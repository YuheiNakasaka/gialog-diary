{"pageProps":{"issue":{"body":"[Misreading Chat](https://misreading.chat/2022/05/12/92-software-development-waste/)で紹介されていた[Software Development Waste](https://homepages.dcc.ufmg.br/~figueiredo/disciplinas/papers/icse17sedano.pdf)という論文。\r\n\r\nこの論文に載っていたTypes of Software Development Wasteというソフトウェア開発のムダについて類型されていたものが面白かったので日本語にしてみた。\r\n\r\n# 誤った機能・製品の構築\r\n## ムダ\r\nユーザーニーズやビジネスニーズに対応していない機能・製品を構築するコスト\r\n## 原因\r\n- ユーザーの要望\r\n  - ユーザー調査、検証、テストを行っていない、ユーザーフィードバックを無視している、ユーザー価値の低い機能に取り組んでいる\r\n- ビジネスの要望\r\n  - ビジネス関係者を関与させていない、関係者からのフィードバックが遅い、製品の優先度が不明確\r\n## 一言メモ\r\nユーザーの声を汲み損ねていたり、えいやで作ってしまった機能とかまぁムダですよねと言われてばそう。割とよく起こりがちである。\r\n\r\n# バックログの管理ミス\r\n## ムダ\r\n作業の重複、価値の低いユーザー機能の迅速化、必要なバグ修正の遅延のコスト\r\n## 原因\r\n- バックログの逆転\r\n- 同時に多くの機能に取り組む\r\n- 作業の重複\r\n- 十分に準備されていないストーリー(以降\"ストーリー\"は\"機能\"と同じ意味で使われてるっぽい？)\r\n- 機能開発とバグ修正のアンバランス\r\n- テストまたは重要なバグ修正の遅延\r\n- 気まぐれなスラッシング(訳が微妙)\r\n## 一言メモ\r\n取り組むべきタスクの優先度づけがうまくできてないと、あるべき順番であるべき機能がユーザに届けられなくなるのでそういうのはムダですよねという感じか。\r\n\r\n# リワーク(手戻り)\r\n## ムダ\r\n正しく行われたはずの納品物を変更するコスト\r\n## 原因\r\n- 技術的負債\r\n- ストーリーの却下（例：プロダクトマネージャーがストーリーの実装を却下）\r\n- 完了の明確な定義がない（ストーリーが曖昧、設計モックの推測）\r\n- 欠陥（テスト戦略の不備、バグの根本原因分析がない）。\r\n## 一言メモ\r\n仕様の作り込みが甘かったり、そもそもユーザーテストが不十分であやふやな機能が設計されたりして作り直しが発生するのはムダですよねという感じ。技術的負債やバグ起因で作り直しが発生するのもここの無駄にカウントされてる。\r\n\r\n# 不必要に複雑なソリューション\r\n## ムダ\r\n必要以上に複雑なソリューションを作成するコスト、機能、ユーザーインターフェース、コードを単純化する機会を逃す\r\n## 原因\r\n- ユーザーの視点から見た不必要な機能の複雑さ\r\n- 不必要な技術的複雑さ\r\n  - コードの重複、インタラクションデザインの再利用不足、前倒しで作った複雑すぎる技術的デザイン\r\n## 一言メモ\r\nオーバーエンジニアリングの結果、なんかかっこいいけど誰も容易に変更できなくなってしまったみたいな実装はたまにある気がする。しかもそれをやった人が退職してしまい結局全部書き直す羽目にみたいな、、やり直しが発生するという意味で確かにそういう実装は結局ムダと言われればムダ。\r\n\r\n# 不要な認知負荷\r\n## ムダ\r\n精神的エネルギーを不必要に消費するコスト\r\n## 原因\r\n- 技術的負債に苦しんでいる\r\n- 複雑または大規模なストーリー\r\n- 非効率なツールや問題のあるAPI、ライブラリ、フレームワーク\r\n- 不必要なコンテキストスイッチ\r\n- 非効率な開発フロー\r\n- 整理されていないコード\r\n## 一言メモ\r\n開発フローやツールや負債に起因してMPを過剰に消費させるのはムダですよねというやつ。\r\n\r\nそういえば精神的に負荷がかかることそれ自体がどのくらい開発の生産性低下を引き起こすのか知りたいんだけどそういう研究あるかな。例えば技術的負債によって発生する精神的な負荷は自体は実は生産性を低下させてなくて、技術的な負債そのものが生産性を低下させているだけみたいな。\r\n\r\nまぁMPが過剰に減らされるのは人間をリソースと考えるとムダだよねというのは当たり前だけど。\r\n\r\n# 心理的苦痛\r\n## ムダ\r\n不要なストレスでチームに負担をかけるコスト\r\n## 原因\r\n- チームのモラルの低下\r\n- ラッシュモード(締切がきつすぎるみたいな状況)\r\n- 対人関係やチーム内の対立\r\n## 一言メモ\r\nこれも上のやつと似ててMPの過剰消費に繋がるのでムダというやつ。\r\n\r\nそういえばフルリモートでissueベースで働いてると対人関係みたいなものを気にすることがほぼ無くなった。issueだけの関係だと後腐れなくて事務的に処理できることが多くて楽。一方でプロダクトを作っていくチームの一員としてビルドアップから参加する必要があると柔らかなコミュニケーションが必要になるので気を遣う。\r\n\r\n# 待ち時間/マルチタスク\r\n## ムダ\r\nマルチタスクに隠れがちなアイドルタイムのコスト\r\n## 原因\r\n- 遅いテストや信頼できないテスト\r\n- 信頼できない受け入れ環境\r\n- 不足する情報、人、設備\r\n- フィードバック遅延によるコンテキストスイッチ\r\n## 一言メモ\r\nテストが遅すぎたりPRのレビューがスルーされたりして先に進めない時に発生する待ち時間はムダですよね、というやつ。確かによく起きがちではあるが、PRのレビューで発生する待ちはどうしようもないところがあるな...。\r\n\r\n# ナレッジロス\r\n## ムダ\r\nチームがかつて知っていた情報を再取得するコスト\r\n## 原因\r\n- チームの解散や移動\r\n- 知識のサイロ化\r\n## 一言メモ\r\nチームの移動や変更でナレッジの共有をやり直すのに発生する時間とかがムダですよねというやつ。これは暗黙知を減らすために各人が情報をオープンに見える化しておかないと発生しがち。\r\n\r\nベテランの特定の人に質問が集中しちゃったりするとその人の本質的な作業時間が減るのもよくある。そういうベテランはそのプロダクトのあらゆることを知っているから開発のパフォーマンスも他の人より出せるはずなんだけど、オンボーディングを手伝うコストが度々発生しちゃたりすると勿体無いな〜となる。\r\n\r\n# 非効率的なコミュニケーション\r\n## ムダ\r\n不完全、不正確、誤解を招く、非効率的、または不在のコミュニケーションのコスト\r\n## 原因\r\n- チームサイズが大きすぎる\r\n- 非同期コミュニケーション\r\n  - 分散チーム、分散ステークホルダー、他のチームへの依存、チーム外の不透明なプロセス\r\n- 不均衡\r\n  - 会話を支配する、聞かない\r\n- 非効率な会議\r\n  - 集中力の欠如、振り返りのスキップ、毎日ブロッカーについて話さない(どういうこと...)、会議が長引く（例：長い立ち話）など\r\n## 一言メモ\r\nコミュニケーションがうまくいかないとムダですよねみたいな感じ。幅広いけどもまぁそれはそう。会議に関しても不要な話で盛り上がっちゃうとか曖昧な目的始まっちゃって終わりどころが見えずダラダラ続くみたいなことはよくある気がする。\r\n\r\n# 雑感\r\nソフトウェア開発におけるあるあるネタまとめみたいな様相である。こういうムダは確かに至る所に散見されるが、これらをどうやって取り除くかというのは中々難しい問題だ。だがその辺の対処法についてはこの論文に書いていない。\r\n\r\nこの辺りのムダを取り除くためのプロセス改善の話はどういう本(や記事や論文)を読むと良いのだろうか。","bodyHTML":"<p><a href=\"https://misreading.chat/2022/05/12/92-software-development-waste/\">Misreading Chat</a>で紹介されていた<a href=\"https://homepages.dcc.ufmg.br/~figueiredo/disciplinas/papers/icse17sedano.pdf\">Software Development Waste</a>という論文。</p>\n<p>この論文に載っていたTypes of Software Development Wasteというソフトウェア開発のムダについて類型されていたものが面白かったので日本語にしてみた。</p>\n<h1>誤った機能・製品の構築</h1>\n<h2>ムダ</h2>\n<p>ユーザーニーズやビジネスニーズに対応していない機能・製品を構築するコスト</p>\n<h2>原因</h2>\n<ul>\n<li>ユーザーの要望\n<ul>\n<li>ユーザー調査、検証、テストを行っていない、ユーザーフィードバックを無視している、ユーザー価値の低い機能に取り組んでいる</li>\n</ul>\n</li>\n<li>ビジネスの要望\n<ul>\n<li>ビジネス関係者を関与させていない、関係者からのフィードバックが遅い、製品の優先度が不明確</li>\n</ul>\n</li>\n</ul>\n<h2>一言メモ</h2>\n<p>ユーザーの声を汲み損ねていたり、えいやで作ってしまった機能とかまぁムダですよねと言われてばそう。割とよく起こりがちである。</p>\n<h1>バックログの管理ミス</h1>\n<h2>ムダ</h2>\n<p>作業の重複、価値の低いユーザー機能の迅速化、必要なバグ修正の遅延のコスト</p>\n<h2>原因</h2>\n<ul>\n<li>バックログの逆転</li>\n<li>同時に多くの機能に取り組む</li>\n<li>作業の重複</li>\n<li>十分に準備されていないストーリー(以降\"ストーリー\"は\"機能\"と同じ意味で使われてるっぽい？)</li>\n<li>機能開発とバグ修正のアンバランス</li>\n<li>テストまたは重要なバグ修正の遅延</li>\n<li>気まぐれなスラッシング(訳が微妙)</li>\n</ul>\n<h2>一言メモ</h2>\n<p>取り組むべきタスクの優先度づけがうまくできてないと、あるべき順番であるべき機能がユーザに届けられなくなるのでそういうのはムダですよねという感じか。</p>\n<h1>リワーク(手戻り)</h1>\n<h2>ムダ</h2>\n<p>正しく行われたはずの納品物を変更するコスト</p>\n<h2>原因</h2>\n<ul>\n<li>技術的負債</li>\n<li>ストーリーの却下（例：プロダクトマネージャーがストーリーの実装を却下）</li>\n<li>完了の明確な定義がない（ストーリーが曖昧、設計モックの推測）</li>\n<li>欠陥（テスト戦略の不備、バグの根本原因分析がない）。</li>\n</ul>\n<h2>一言メモ</h2>\n<p>仕様の作り込みが甘かったり、そもそもユーザーテストが不十分であやふやな機能が設計されたりして作り直しが発生するのはムダですよねという感じ。技術的負債やバグ起因で作り直しが発生するのもここの無駄にカウントされてる。</p>\n<h1>不必要に複雑なソリューション</h1>\n<h2>ムダ</h2>\n<p>必要以上に複雑なソリューションを作成するコスト、機能、ユーザーインターフェース、コードを単純化する機会を逃す</p>\n<h2>原因</h2>\n<ul>\n<li>ユーザーの視点から見た不必要な機能の複雑さ</li>\n<li>不必要な技術的複雑さ\n<ul>\n<li>コードの重複、インタラクションデザインの再利用不足、前倒しで作った複雑すぎる技術的デザイン</li>\n</ul>\n</li>\n</ul>\n<h2>一言メモ</h2>\n<p>オーバーエンジニアリングの結果、なんかかっこいいけど誰も容易に変更できなくなってしまったみたいな実装はたまにある気がする。しかもそれをやった人が退職してしまい結局全部書き直す羽目にみたいな、、やり直しが発生するという意味で確かにそういう実装は結局ムダと言われればムダ。</p>\n<h1>不要な認知負荷</h1>\n<h2>ムダ</h2>\n<p>精神的エネルギーを不必要に消費するコスト</p>\n<h2>原因</h2>\n<ul>\n<li>技術的負債に苦しんでいる</li>\n<li>複雑または大規模なストーリー</li>\n<li>非効率なツールや問題のあるAPI、ライブラリ、フレームワーク</li>\n<li>不必要なコンテキストスイッチ</li>\n<li>非効率な開発フロー</li>\n<li>整理されていないコード</li>\n</ul>\n<h2>一言メモ</h2>\n<p>開発フローやツールや負債に起因してMPを過剰に消費させるのはムダですよねというやつ。</p>\n<p>そういえば精神的に負荷がかかることそれ自体がどのくらい開発の生産性低下を引き起こすのか知りたいんだけどそういう研究あるかな。例えば技術的負債によって発生する精神的な負荷は自体は実は生産性を低下させてなくて、技術的な負債そのものが生産性を低下させているだけみたいな。</p>\n<p>まぁMPが過剰に減らされるのは人間をリソースと考えるとムダだよねというのは当たり前だけど。</p>\n<h1>心理的苦痛</h1>\n<h2>ムダ</h2>\n<p>不要なストレスでチームに負担をかけるコスト</p>\n<h2>原因</h2>\n<ul>\n<li>チームのモラルの低下</li>\n<li>ラッシュモード(締切がきつすぎるみたいな状況)</li>\n<li>対人関係やチーム内の対立</li>\n</ul>\n<h2>一言メモ</h2>\n<p>これも上のやつと似ててMPの過剰消費に繋がるのでムダというやつ。</p>\n<p>そういえばフルリモートでissueベースで働いてると対人関係みたいなものを気にすることがほぼ無くなった。issueだけの関係だと後腐れなくて事務的に処理できることが多くて楽。一方でプロダクトを作っていくチームの一員としてビルドアップから参加する必要があると柔らかなコミュニケーションが必要になるので気を遣う。</p>\n<h1>待ち時間/マルチタスク</h1>\n<h2>ムダ</h2>\n<p>マルチタスクに隠れがちなアイドルタイムのコスト</p>\n<h2>原因</h2>\n<ul>\n<li>遅いテストや信頼できないテスト</li>\n<li>信頼できない受け入れ環境</li>\n<li>不足する情報、人、設備</li>\n<li>フィードバック遅延によるコンテキストスイッチ</li>\n</ul>\n<h2>一言メモ</h2>\n<p>テストが遅すぎたりPRのレビューがスルーされたりして先に進めない時に発生する待ち時間はムダですよね、というやつ。確かによく起きがちではあるが、PRのレビューで発生する待ちはどうしようもないところがあるな...。</p>\n<h1>ナレッジロス</h1>\n<h2>ムダ</h2>\n<p>チームがかつて知っていた情報を再取得するコスト</p>\n<h2>原因</h2>\n<ul>\n<li>チームの解散や移動</li>\n<li>知識のサイロ化</li>\n</ul>\n<h2>一言メモ</h2>\n<p>チームの移動や変更でナレッジの共有をやり直すのに発生する時間とかがムダですよねというやつ。これは暗黙知を減らすために各人が情報をオープンに見える化しておかないと発生しがち。</p>\n<p>ベテランの特定の人に質問が集中しちゃったりするとその人の本質的な作業時間が減るのもよくある。そういうベテランはそのプロダクトのあらゆることを知っているから開発のパフォーマンスも他の人より出せるはずなんだけど、オンボーディングを手伝うコストが度々発生しちゃたりすると勿体無いな〜となる。</p>\n<h1>非効率的なコミュニケーション</h1>\n<h2>ムダ</h2>\n<p>不完全、不正確、誤解を招く、非効率的、または不在のコミュニケーションのコスト</p>\n<h2>原因</h2>\n<ul>\n<li>チームサイズが大きすぎる</li>\n<li>非同期コミュニケーション\n<ul>\n<li>分散チーム、分散ステークホルダー、他のチームへの依存、チーム外の不透明なプロセス</li>\n</ul>\n</li>\n<li>不均衡\n<ul>\n<li>会話を支配する、聞かない</li>\n</ul>\n</li>\n<li>非効率な会議\n<ul>\n<li>集中力の欠如、振り返りのスキップ、毎日ブロッカーについて話さない(どういうこと...)、会議が長引く（例：長い立ち話）など</li>\n</ul>\n</li>\n</ul>\n<h2>一言メモ</h2>\n<p>コミュニケーションがうまくいかないとムダですよねみたいな感じ。幅広いけどもまぁそれはそう。会議に関しても不要な話で盛り上がっちゃうとか曖昧な目的始まっちゃって終わりどころが見えずダラダラ続くみたいなことはよくある気がする。</p>\n<h1>雑感</h1>\n<p>ソフトウェア開発におけるあるあるネタまとめみたいな様相である。こういうムダは確かに至る所に散見されるが、これらをどうやって取り除くかというのは中々難しい問題だ。だがその辺の対処法についてはこの論文に書いていない。</p>\n<p>この辺りのムダを取り除くためのプロセス改善の話はどういう本(や記事や論文)を読むと良いのだろうか。</p>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/comments","created_at":"2022-06-23T03:03:33Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/10","id":1281601385,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5MY69p","number":10,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/timeline","title":"ソフトウェア開発におけるムダ","updated_at":"2022-06-23T08:22:59Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},"issueComments":[],"pickupArticles":[{"body":"※**専門家ではないので、以下の文章はn=1の経験談として読んでください。**\r\n\r\n[腰痛エンジニアを支える技術](https://zenn.dev/ryo_kawamata/articles/a596e3325ba865)や[手が痺れるエンジニアを支える技術](https://zenn.dev/seya/articles/35cd238d79b6e0)を読んだ。\r\n\r\n上の記事の腰痛や神経痛をはじめ、肩こり・頭痛・神経痛・腹痛など**すぐに死ぬわけではないがQoLに結構な支障をきたす慢性の疾患**を抱えたエンジニアというのは回りを見渡しても割と多いと感じる。自分の場合はそれが**痔**である。\r\n\r\n下痢や便秘の際に切れ痔になった経験があるという人は結構多い。だから「あー痔か、自分もなったことあるよ」みたいな軽い反応をもらうのだけどそういう人の痔は一過性のもので、いわば転んで擦りむいたくらいのレベル。自分の場合は外痔核である。\r\n\r\n外痔核とは何かという説明をする前にそもそも痔にはいくつか種類があるので簡単に説明しておく。\r\n\r\n# 痔の種類\r\n## 裂肛\r\nいわゆる切れ痔である。便秘で便が固くなってしまった場合や下痢でゆるくなり便の排出速度が上がり切れてしまうなどが主な原因。通常は一般的な切り傷同様数日で直るが、何度も繰り返していると潰瘍ができたり傷が直る際に肛門が狭くなっていく肛門狭窄という状態になる。この段階までくると排便時は毎回切れ痔が起きるようになってしまう。\r\n\r\n## 痔核\r\nいわゆるいぼ痔である。肛門に強い力がかかるとうっ血が発生し、手に血豆ができるような感じでイボができる。日常生活における肛門に負荷をかかる全ての場面で発生する可能性がある。痔核の中でも肛門の中にできる内痔核と外痔核がありそれぞれ症状や対処法は異なる。\r\n\r\n### 内痔核\r\n内痔核は肛門の中にイボができるタイプの痔核である。段階がレベル1~4まであり1~2ではそれほど生活に支障はないが3~4レベルになると手術が推奨される。1~2レベルの内側の痔は排便時に血は出たりイボが露出したりするが痛みはそれほどないが、それ以上のレベルになると下着に鮮血が見られるような状態になる。ここまでくると手術だ。\r\n\r\n### 外痔核\r\n外痔核は肛門の外にイボができるタイプの痔核である。この痔の特徴はなんと言っても**とにかく痛いこと**である。肛門の中とは違い、肛門の外側は神経が集中しているのでイボに何かが触れると激痛が走る。強めの口内炎が肛門にできたと想像してほしい。排便時に100%の確率でそれが刺激されるのでどう頑張っても痛みから逃れられない。排便はほぼ毎日あるので毎日の排便が恐怖になる。\r\n\r\n### 痔ろう\r\n肛門内部が炎症を起こし化膿、その膿を排出するための膿の管が肛門に残った状態のこと。激しい痛みや発熱を伴う。どの段階であれ、痔ろうとなればほぼ手術になる。\r\n\r\n# 対処法\r\n痔ろう以外はどの痔の場合も酷くない場合は基本的に保存療法か外来処置(飲み薬や塗り薬など)で済むはず。一方で慢性化している場合は手術となることが多い。最悪の場合は人工肛門になることもあるし、そもそも大腸などに腫瘍があったりして別の病気の場合もある。\r\n\r\nとにかく早めの受診によりあらゆる悲劇は避けられるので自分で判断せず早めに近くの肛門科へ行くのが最適解だ。\r\n\r\n# 自分の話\r\nここまでは痔の一般的な話だが、ここからは自分の経験の話をする。\r\n\r\n先述した通り自分の場合は外痔核だった。月に数回、肛門に力を入れた瞬間激痛が走る日が来て、それを境に1~2週間ほどは毎日排便時にお尻を針で刺されたような感じになる。辛いは辛いのだけど、とはいえこれは日常生活の工夫により少し快方することもあるのでのらりくらりと病院へ行かず10年ほど経ってしまっていた。\r\n\r\nいよいよ厳しいな...と感じてきて病院へ。そこでレベル2程度の外痔核とレベル1程度の内痔核と診断された。内側の痔に関しては病院で検査を受けて発覚したくらいのレベルで自覚もなかった程度。出血もない。\r\n\r\nただどうしても外痔核が辛いなら痔核の部分を切開して取る、内痔核なら内痔核硬化療法(ジオン注射)を勧められたが、まだ必須というほどでもないという。様子見でも今は大丈夫とのことだったので一旦は保留にして1年ほど時間が経ち、今に至るという感じ。\r\n\r\nなのでいまだに痔と共に生きるという生活をしている。(余談だが先生自体も痔持ちで、数年前に手術したが時間が経ってまた痔になっちゃった...と言ってて大変そうだった)。\r\n\r\n診察の中で、そもそも自分は何故外痔核ができやすいのか？を先生といろいろ振り返りながら話してみて気づいたのは**排便時のいきみの強さ**である。\r\n\r\n体質や食生活の問題で固い便になりやすかったこと、元々スポーツをやっていてある程度筋肉があったこと、決まった時間に必ず排便しようとすること、などが重なったことで、必要以上に強くいきんで硬めの便を無理してでも排出しようという習慣ができてしまっていた。これは幼い頃からの習慣だが誰にも注意されなかったし、自分でも悪いことだと気づかなかった。なんか気づかずにやっていた悪習が自然と痔を招いてしまっていたのだ。\r\n\r\n# 痔を悪化させないためにやってること\r\n以下は主に痔核を悪化させないためにやっていることを書く。\r\n\r\n## 肛門に力をかけない\r\n外痔核に関してはとにかく肛門に過度な力をかけないことが一番重要。なので排便時は無理して出すために腹筋に力を入れたりしない。ちゃんと便意を待て。腹筋に力を入れたりしなくても便は出る。すぐ出ないからといって急がない。\r\n\r\nその他にもスクワットなどの筋トレで踏ん張る時や重いものを持つ時なども肛門に力がかかり続けないように気を付ける。肛門への負荷を気をつけるだけでもかなり良くなる。\r\n\r\n肛門に力をかけずに直腸から便を送り出すような意識で排便する訓練(ヨガに近い)もやっていて、これはコツが掴めるととても楽に排便ができるようになる。言葉では上手く伝えられないが、これができないと手術してもまた下手くそな排便により痔が再発する。排便のフォーム矯正と思ってやった。\r\n\r\n## 水分を十分に摂る\r\n固い便になるとどうしても排便に力が必要になってしまう。これを防ぐために水分は十分に摂った方が安全。\r\n\r\n自分の場合は500mlのタンブラーでぬるま湯を最低3杯~4杯は飲むようにしている。しかもこまめに摂るようにしている。これはがぶ飲みしても人間が一度に吸収できる量には限界があるので。ただしトイレの頻度が多くなってしまうのでなかなか難しいという人もいるかも。\r\n\r\n## 食事\r\n食事に関しては人それぞれだろうなという感じ。よく言われるのは3食バランスよくしっかり食べる方が良いくらいな感じで、特に野菜がいいとか発酵食品がいいみたいなものはない。\r\n\r\nが、自分がいろいろ試してみた結果だけ参考までに書いておく。これが正解!とかいうものはない。\r\n\r\n- 飯を食べる前にまず多めに水を飲む\r\n  - 飲む場合と飲まない場合で翌日の便の硬さが変わるっぽい\r\n- お米を最低1合は食べる\r\n  - 米を食べる量が少ないと排便サイクルが狂う。便も何故か硬くなる。\r\n- 納豆・ヨーグルト・キムチを毎日適度に摂る\r\n  - 腸がよく動いてるな〜と感じるようになる。便秘予防にはなりそう。単純に発酵食品が好きというのもあるので楽しみ半分で続けている。\r\n- アルコールを摂取しない\r\n  - 酒を飲むと翌日の便が硬くなるっぽかったのでやめた。\r\n- 寝る3時間前までに食事は済ませる\r\n  - 寝る前まで何か食べてると翌日変なタイミングで便意がきたりするようになる。変なタイミングだと都合によっては我慢しないといけないことにもなりかねない。我慢すると便が固くなっていく原因になるのでなるべく避けている。\r\n\r\n食事に関してはこれくらい。あとは外食などでも好きなものを好きなように食っている。\r\n\r\n## 睡眠\r\n夜更かしすればするほど内臓の調子がおかしくなる。大抵排便サイクルが狂うし便がいつもと違う感じになる。そもそも一般的に考えても寝るべき時間に寝た方が内臓や神経系にも良いはずなので無理せず寝ている。\r\n\r\n## 毎日湯船に浸かる\r\n下半身の冷えは血流を悪くして痔ができやすくなる元なので毎日湯船に浸かるようになった。これは病院の先生にも勧められたのでやっている。それまでは湯船を洗うのも湯を準備するのもとにかく面倒だからシャワーで済ませることが多かったが今は毎日湯船で体の芯まで温めるようになった。\r\n\r\n痔が辛い時も温かいお湯に使っていると血行が良くなり、いくらか治りが早くなるので痔持ちの人は全員湯船に浸かった方が良い。\r\n\r\n## 座り続けない、またはスタンディングデスク\r\n上記の生活習慣的な対策は前提として、それ以外にできることとして座りすぎないようにするというのがある。エンジニアは職業柄椅子に座り続けがちだが、それは上述の「肛門に負荷をかける」につながるので良くない。\r\n\r\n自分は適当に60分おきにiPhoneでタイマーをセットして時間が来たら立ち上がり少しフラフラしてまた座る、といった習慣で作業していた。これはこれで良い。\r\n\r\nが、外痔核真っ只中の時はとにかく座ってるだけで痛いことがある。そういう時は立っていた方が楽。なのでそういう時はスタンディングデスクで作業している。\r\n\r\n[電動昇降デスク](https://flexispot.jp/e7-set.html)というスタンディングデスク専用の机があったりするので検討はしたがちょっと試してみるか〜と買うには高いしデカい。要らなくなった時の処理が面倒。\r\n\r\nそこで自宅にあったデスクとちゃぶ台で下のようなハリボテスタンディングデスクを作って使っている(もうかれこれ半年以上これで仕事してる)。\r\n\r\n![https://user-images.githubusercontent.com/1421093/180774838-28eb541b-9d6b-4b9b-8998-92d54f935d7a.JPG](https://user-images.githubusercontent.com/1421093/180774838-28eb541b-9d6b-4b9b-8998-92d54f935d7a.JPG)\r\n\r\nポイントは下のクッション部分。これ無しで床に立って作業するとすぐ足の裏が痛くて終わる。たまたま普段使いしていた座椅子がちょうど良い高さだったのでこれでなんとかやれている。\r\n\r\n座椅子が微妙という時は[リカバリーサンダル](https://amzn.to/3RCOp9I)というのをスリッパがわりにして履いて作業するのも良かった。看護師さんなど長時間立ち仕事をしてる人たちが履いているらしい。\r\n\r\n![IMG_3954_res](https://user-images.githubusercontent.com/1421093/216818045-1deb3b26-24a0-4db1-a26c-018cc15a6d42.JPG)\r\n\r\n基本的に1時間~２時間くらい立ち続けて、少し座って休んで、みたいな感じで1日仕事をしている。最初のうちは30分も作業してるとキツくなってくるがこれは慣れ。続けてれば慣れてくる。\r\n\r\n座らなくなることでお尻への負荷だけでなく腰への負荷も体感的に減ってる。**変な姿勢で座るより変な姿勢で立つ方が難しい**ので姿勢の維持の観点では個人的には立ってる方が楽だ。\r\n\r\nただし立ち続けると足が痛くなってくるのでそれは適度に休みを入れるしかない。あと、デスクの高さの設定をミスると肩が凝る。高さの微調整を細かくやりたいなら先程の挙げたちゃんとした電動昇降デスクを買った方が良さそう。\r\n\r\n# 現在\r\n病院に通って以降色々やったのもあって、最近はもう少なくとも3~4ヶ月は外痔核で苦しんでいない。上記の悪化させないための諸々を今後も続けていく必要はありそうだけど、基本的には硬い便を避けつつ排便時に気をつけることさえできればあとはなんとかなりそう。\r\n\r\nまた以前のような厳しい状態になったら本格的に手術を検討してみようかねとも先生とは話している。手術せずになんとか終えられたら良いな…という感じ(内痔核の手術なら術後の痛みは少なめだからすぐやってもいいけど、外痔核の術後は出産を経験した人でも辛かったと聞いたのでめちゃくちゃ怖いのが正直なところ)。\r\n\r\n# おわりに\r\n痔の\"エンジニア\"を支える技術と題して書き始めたがエンジニア的な要素はスタンディングデスクくらいで、その他は痔一般の知識と痔主の経験談になってしまったので申し訳ない(のでZennではなく自分のブログに書いた)。\r\n\r\n排便は食事と同じくほぼ避けることができないし肛門以外の場所で代替することもできない。肛門はとてもクリティカルな場所だからこそ健康に保つための最低限の知識は全員持っておいて損はない。\r\n\r\n痔は身近な病気であり軽んじられがちだが、悪化させるとQoLが駄々下がりするはめになる。[何年も痔に苦しんでいる - 怠惰を求めて勤勉に行き着く](https://fushiroyama.hatenablog.com/entry/2022/11/20/063019)では慢性的な切れ痔に悩まされているエンジニアの話が書いてある。痔核の場合は手術(と術後の結構な痛み)を耐えられればある程度の期間は良くなるようだが悪化した切れ痔の場合はより大変そうだ。痔ろうに関しては言わずもがな。\r\n\r\n痔に関してはどの状況でもとりあえず病院に行くのがいつでも最適解なので気になったら恥ずかしがらずにすぐ行け。\r\n\r\n# リンク\r\n- [痔の総合情報サイト《痔-web》](https://www.iwadare.jp/G-WEB/)\r\n  - 痔主の聖典","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/comments","created_at":"2023-02-05T13:12:02Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/40","id":1571425666,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5dqg2C","number":40,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/timeline","title":"痔のエンジニアを支える技術","updated_at":"2023-02-05T13:12:02Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"- Web3とは何であったか\r\n  - トークンとコントラクトと誰からでも見える台帳を使ってなんか出来そうなことないっすかねくらいの思想または活動\r\n    - 自動販売機で金入れたら人を解さずにジュースが買えるような感じで、トークンを支払ったら人を解さずにトークンが買えたり付与したりできる仕組みを作れるスマートコントラクトというのがあり、これなんかに応用できないっすかみたいなことだけだったはず\r\n    - NFTとかDAOとかもその応用例の一つなだけにすぎない\r\n  - トラストレスとか分散性みたいな話はEthereumのDocsには一部記述があるがあくまで理想論として語ってるだけ。会社がvisionをHPに書いてるようなもん。\r\n  - Internetの技術が置き換わるとかBigTechを打倒するみたいな対立構造を煽るような話では全く無い\r\n    - そもそも既存のインターネットの上に成り立っているし、分散されたそのノードはどこのサーバーで動いているんだという話がある。お前は自宅サーバの独自のノードを稼働させてるのか？(私はブレーカーが落ちてPCが終わったりした経験がある)\r\n      - まぁPoSになると必要なマシンパワーがかなり少なくなり最低32ETHあれば参加しやすくなるはずなのでやってみてほしい\r\n  - Web3という何かに技術的な新しさは無い\r\n    - あるのはWeb3論者が語る理想の世界が\"今とは違う\"ということだけ(良し悪しや実現可能性は問わず)\r\n  - ブロックチェーンにしてもソフトウェア的には既存の技術を組み合わせた仕組みだしそれ自体でブレークスルーとなるかは自分にはわからない。これだけ世界中の人々を巻き込んだムーブメントを起こす基盤になっているというのは面白いけど。\r\n  - ZKPとかは真新しいかもしれないけどクリプト固有の範疇では\r\n- Web3という言葉は死んだ\r\n  - 現状はバカを丸め込むためのバズワードと化した\r\n  - 機械学習やDL界隈が盛り上がってきた時にAIという言葉が流行ったのと同じ感じ\r\n  - 概念をまとめて名前をつけるとマーケティングが捗る\r\n    - バカでも難しい概念を使えるようになる\r\n      - バカでも自分の会話に取り入れられるようになる\r\n        - この時自らは何も概念を理解できてなくても問題ない。複雑な理解の部分は相手側に委ねられるので。\r\n          - 「Web3でやっていきましょう!」「(Web3でやっていくとは...)」\r\n  - とはいえある現象への名づけ行為自体は概念の普及やコミュニティの拡大には役に立つので一概に悪いことではない\r\n    - ブラック企業/毒親/非モテ/LGBTなどは複雑な現象や概念に対して言葉が定義されてバズワード化して広く普及した。良し悪しは知らんけど。\r\n- 危険な一発逆転思想\r\n  - 政府のWeb3政策みたいなやつ。Web2.0までは世界に遅れを取ったという敗者根性に起因してると思う。\r\n  - Web3という概念は「ゼロからのスタートだし世界に勝てるかも」という一発逆転願望を良い具合に刺激してくれる\r\n    - 巷のエセサロンがうまくいかない人間に対してささやく甘い言葉と同じ\r\n      - 「未経験でも高収入」みたいなやつ\r\n  - これは完全に自分の考えで余談だけどそもそもIT戦略に関する政府の失敗はなんだったか考えてみると、天才育成の失敗だと思う。ITの世界(というか高度に発展してきた科学が主流の時代)は1万人の凡人より1人の天才(及びそれに次ぐ数人の優秀)な頭脳によって大きく発展する傾向がある。それにもかかわらず自由と多様性の確保や研究開発への資金援助を怠り、規制及び選択と集中に舵を切ったのが間違ってたのではと思う。\r\n- 市場と信仰\r\n  - DEXの台頭で一定の流動性が確保されてトラストレスにトークンを売買したりできる経済っぽいものが立ち上がったのは確か\r\n  - しかし大体において暗号通貨市場は信仰によって成り立っている印象\r\n    - S&P500のインデックス投資ですらある意味米国経済への信仰の元に成り立っているわけではあるが、 暗号通貨市場のそれは全くその比ではない(歴史も根拠もなすぎるし既存の金融市場のおこぼれを貰ってるだけでは...)\r\n  - 投資(投機)は自己責任の範囲でやるべきというのは当然だけど、他人へ暗号通貨の保有を勧めたりする行為はカルト宗教の勧誘と同じ(根拠なく理想を語り、甘い言葉で自己の利益を目論む行為という点で)\r\n- 自分のポジション\r\n  - 一言で言うとdapps作るのが楽しい、以上。くらいな感じ。現状ほぼ金になってないから盆栽いじりと同等。\r\n    - 情報を追い始めたのは去年の夏くらいからなので割と最近。仕事上必要で情報をキャッチアップし始めた感じ。最初はEthereumから見ていった。\r\n    - コントラクトを書いてブロックチェーンにデプロイ(有料)しておくと、適当なAPIが生えて、なんか激烈にreadのAPIリクエストしてもちょっとやそっとでは落ちない(writeに関しては同時処理できるtransactionが少ないのでそもそも激烈にリクエストできないが)使い方によっては便利じゃんとか、ウォレットをネットワーク全体通じたID代わりにできればユーザー認証周りはサービスごとに特別に作らずとも良くなり、フロントエンドだけ書けばよくてラクできそうみたいな感じで色々遊んでた感じ\r\n      - まぁ現実はそううまくいきませんが(オフチェーンとオンチェーン間のシャトルランで死にそうになりながら...)\r\n  - それぞれ好き勝手に好きなネットワークにコミットして俺だけの最強のWeb3をやれば良いとは思ってるけど、既存の技術や先人の肩に乗って生きているくせに彼らに敬意無く、己の利益のためだけに都合のいい嘘をついたり、対立構造を煽ったりして、大衆を分断させる卑劣な行為や言説は糾弾したい\r\n  - 粛々と研究開発している人はたくさんいるのでそういう人達だけ相手にしていきたい\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/14/comments","created_at":"2022-07-21T08:34:28Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/14/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/14","id":1312885378,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/14/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5OQQqC","number":14,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/14/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/14/timeline","title":"最近のWeb3への雑感","updated_at":"2022-07-21T13:50:02Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/14","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"会社にエンジニアが一人になってからもう10ヶ月ほどが経った。もちろん一人であらゆる開発を行わないといけないので負荷は大きい。しかし手に負えないほどの仕事があるわけではないのでなんとかなっている。実務面ではそうなのだが、それ以外の面での影響が個人的には少なからずあったなと感じている。\r\n\r\nチームメンバーがいた頃は毎日15分~30分程度の朝会があった。ここでは前日・当日の仕事に関する話はもちろん気になったニュースや好きなアニメの話など自由に話していた。この時間を設けたのは業務上のコミュニケーションロスを減らしたいというよりはむしろPCの前で毎日作業を続けるエンジニアは人と会話をする機会が減りがちなのでとりあえず雑談しようという、ライフバランスを整えたい的な意味合いが大きかった。\r\n\r\n別に人と会話をしなくても問題ないのではというご意見も尤もだけど、アルツハイマーで認知能力を低下させないためには規則正しい生活はもちろん他者とのコミュニケーションをおこない、ある程度脳に負荷をかけた方が衰えにくいと言われている。エンジニアは知的生産を行う脳みそが資本の職業だから認知能力を維持する時間にある程度投資してもペイするはずだ。そういう理由から朝(といっても10時とか11時とかだけど)に朝会というものを開催していた。\r\n\r\nこれが10ヶ月ほど前から無くなってしまったわけである。\r\n\r\n加えてコロナの影響で外出も減ってしまっているし家にいながら飯が食えたり何もかも家でできてしまうから他者との接点がほぼ無くなっていることに気づいた。\r\n\r\n自分は趣味といえば開発かハロプロくらいなので、そういう話ができる仲間を会社の外にも持っておけばよかったなと少し後悔している。ゲームが趣味の人とかは配信で盛り上がれたり内輪で連携を取るメリットもあったりするからそういう仲間がいてDiscordとかでワイワイしてたりするの見て良さ...などと思ったりする。\r\n\r\nコロナ以前であれば勉強会やカンファレンスの現地会場で知り合いができたりする機会もあったがリモート開催が普通になっている昨今ではなかなかそういう機会も少ない。アイドルの現場も同じく。\r\n\r\n複数人エンジニアのいる会社に所属しているとそういう機会を手軽に得られるのでお得だったな〜などと思うのであった。\r\n\r\nとはいえプログラミングはポジティブな意味で孤独な営みであり、自分はそれが好きである。だから不特定多数の人達でワイワイと馴れ合いたいわけでは全くないけど好きなことについて様々な意見を言い合ってコミュニケーションできる相手や場(大学の研究室みたいなやつとか)は大切にしないといけなかったなと感じている。\r\n\r\n一人が好きとかコミュニケーションが嫌いとかそういう人が多いこの職業ではある(し自分もそのタイプだ)けど、それは会話したくない人と会話したくないだけであって、楽しく会話できる有意義な時間を過ごせる相手ともコミュニケーションしたくないやつなんていないよな〜という話。\r\n\r\n共通の話題で盛り上がれる人間 探し方 2022 が求められている。\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/comments","created_at":"2022-06-03T09:45:09Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/5","id":1259695399,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5LFW0n","number":5,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/timeline","title":"会話","updated_at":"2022-06-03T10:37:15Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}}]},"__N_SSG":true}