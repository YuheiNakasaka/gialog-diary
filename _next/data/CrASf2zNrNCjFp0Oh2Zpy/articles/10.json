{"pageProps":{"issue":{"body":"[Misreading Chat](https://misreading.chat/2022/05/12/92-software-development-waste/)で紹介されていた[Software Development Waste](https://homepages.dcc.ufmg.br/~figueiredo/disciplinas/papers/icse17sedano.pdf)という論文。\r\n\r\nこの論文に載っていたTypes of Software Development Wasteというソフトウェア開発のムダについて類型されていたものが面白かったので日本語にしてみた。\r\n\r\n# 誤った機能・製品の構築\r\n## ムダ\r\nユーザーニーズやビジネスニーズに対応していない機能・製品を構築するコスト\r\n## 原因\r\n- ユーザーの要望\r\n  - ユーザー調査、検証、テストを行っていない、ユーザーフィードバックを無視している、ユーザー価値の低い機能に取り組んでいる\r\n- ビジネスの要望\r\n  - ビジネス関係者を関与させていない、関係者からのフィードバックが遅い、製品の優先度が不明確\r\n## 一言メモ\r\nユーザーの声を汲み損ねていたり、えいやで作ってしまった機能とかまぁムダですよねと言われてばそう。割とよく起こりがちである。\r\n\r\n# バックログの管理ミス\r\n## ムダ\r\n作業の重複、価値の低いユーザー機能の迅速化、必要なバグ修正の遅延のコスト\r\n## 原因\r\n- バックログの逆転\r\n- 同時に多くの機能に取り組む\r\n- 作業の重複\r\n- 十分に準備されていないストーリー(以降\"ストーリー\"は\"機能\"と同じ意味で使われてるっぽい？)\r\n- 機能開発とバグ修正のアンバランス\r\n- テストまたは重要なバグ修正の遅延\r\n- 気まぐれなスラッシング(訳が微妙)\r\n## 一言メモ\r\n取り組むべきタスクの優先度づけがうまくできてないと、あるべき順番であるべき機能がユーザに届けられなくなるのでそういうのはムダですよねという感じか。\r\n\r\n# リワーク(手戻り)\r\n## ムダ\r\n正しく行われたはずの納品物を変更するコスト\r\n## 原因\r\n- 技術的負債\r\n- ストーリーの却下（例：プロダクトマネージャーがストーリーの実装を却下）\r\n- 完了の明確な定義がない（ストーリーが曖昧、設計モックの推測）\r\n- 欠陥（テスト戦略の不備、バグの根本原因分析がない）。\r\n## 一言メモ\r\n仕様の作り込みが甘かったり、そもそもユーザーテストが不十分であやふやな機能が設計されたりして作り直しが発生するのはムダですよねという感じ。技術的負債やバグ起因で作り直しが発生するのもここの無駄にカウントされてる。\r\n\r\n# 不必要に複雑なソリューション\r\n## ムダ\r\n必要以上に複雑なソリューションを作成するコスト、機能、ユーザーインターフェース、コードを単純化する機会を逃す\r\n## 原因\r\n- ユーザーの視点から見た不必要な機能の複雑さ\r\n- 不必要な技術的複雑さ\r\n  - コードの重複、インタラクションデザインの再利用不足、前倒しで作った複雑すぎる技術的デザイン\r\n## 一言メモ\r\nオーバーエンジニアリングの結果、なんかかっこいいけど誰も容易に変更できなくなってしまったみたいな実装はたまにある気がする。しかもそれをやった人が退職してしまい結局全部書き直す羽目にみたいな、、やり直しが発生するという意味で確かにそういう実装は結局ムダと言われればムダ。\r\n\r\n# 不要な認知負荷\r\n## ムダ\r\n精神的エネルギーを不必要に消費するコスト\r\n## 原因\r\n- 技術的負債に苦しんでいる\r\n- 複雑または大規模なストーリー\r\n- 非効率なツールや問題のあるAPI、ライブラリ、フレームワーク\r\n- 不必要なコンテキストスイッチ\r\n- 非効率な開発フロー\r\n- 整理されていないコード\r\n## 一言メモ\r\n開発フローやツールや負債に起因してMPを過剰に消費させるのはムダですよねというやつ。\r\n\r\nそういえば精神的に負荷がかかることそれ自体がどのくらい開発の生産性低下を引き起こすのか知りたいんだけどそういう研究あるかな。例えば技術的負債によって発生する精神的な負荷は自体は実は生産性を低下させてなくて、技術的な負債そのものが生産性を低下させているだけみたいな。\r\n\r\nまぁMPが過剰に減らされるのは人間をリソースと考えるとムダだよねというのは当たり前だけど。\r\n\r\n# 心理的苦痛\r\n## ムダ\r\n不要なストレスでチームに負担をかけるコスト\r\n## 原因\r\n- チームのモラルの低下\r\n- ラッシュモード(締切がきつすぎるみたいな状況)\r\n- 対人関係やチーム内の対立\r\n## 一言メモ\r\nこれも上のやつと似ててMPの過剰消費に繋がるのでムダというやつ。\r\n\r\nそういえばフルリモートでissueベースで働いてると対人関係みたいなものを気にすることがほぼ無くなった。issueだけの関係だと後腐れなくて事務的に処理できることが多くて楽。一方でプロダクトを作っていくチームの一員としてビルドアップから参加する必要があると柔らかなコミュニケーションが必要になるので気を遣う。\r\n\r\n# 待ち時間/マルチタスク\r\n## ムダ\r\nマルチタスクに隠れがちなアイドルタイムのコスト\r\n## 原因\r\n- 遅いテストや信頼できないテスト\r\n- 信頼できない受け入れ環境\r\n- 不足する情報、人、設備\r\n- フィードバック遅延によるコンテキストスイッチ\r\n## 一言メモ\r\nテストが遅すぎたりPRのレビューがスルーされたりして先に進めない時に発生する待ち時間はムダですよね、というやつ。確かによく起きがちではあるが、PRのレビューで発生する待ちはどうしようもないところがあるな...。\r\n\r\n# ナレッジロス\r\n## ムダ\r\nチームがかつて知っていた情報を再取得するコスト\r\n## 原因\r\n- チームの解散や移動\r\n- 知識のサイロ化\r\n## 一言メモ\r\nチームの移動や変更でナレッジの共有をやり直すのに発生する時間とかがムダですよねというやつ。これは暗黙知を減らすために各人が情報をオープンに見える化しておかないと発生しがち。\r\n\r\nベテランの特定の人に質問が集中しちゃったりするとその人の本質的な作業時間が減るのもよくある。そういうベテランはそのプロダクトのあらゆることを知っているから開発のパフォーマンスも他の人より出せるはずなんだけど、オンボーディングを手伝うコストが度々発生しちゃたりすると勿体無いな〜となる。\r\n\r\n# 非効率的なコミュニケーション\r\n## ムダ\r\n不完全、不正確、誤解を招く、非効率的、または不在のコミュニケーションのコスト\r\n## 原因\r\n- チームサイズが大きすぎる\r\n- 非同期コミュニケーション\r\n  - 分散チーム、分散ステークホルダー、他のチームへの依存、チーム外の不透明なプロセス\r\n- 不均衡\r\n  - 会話を支配する、聞かない\r\n- 非効率な会議\r\n  - 集中力の欠如、振り返りのスキップ、毎日ブロッカーについて話さない(どういうこと...)、会議が長引く（例：長い立ち話）など\r\n## 一言メモ\r\nコミュニケーションがうまくいかないとムダですよねみたいな感じ。幅広いけどもまぁそれはそう。会議に関しても不要な話で盛り上がっちゃうとか曖昧な目的始まっちゃって終わりどころが見えずダラダラ続くみたいなことはよくある気がする。\r\n\r\n# 雑感\r\nソフトウェア開発におけるあるあるネタまとめみたいな様相である。こういうムダは確かに至る所に散見されるが、これらをどうやって取り除くかというのは中々難しい問題だ。だがその辺の対処法についてはこの論文に書いていない。\r\n\r\nこの辺りのムダを取り除くためのプロセス改善の話はどういう本(や記事や論文)を読むと良いのだろうか。","bodyHTML":"<p><a href=\"https://misreading.chat/2022/05/12/92-software-development-waste/\">Misreading Chat</a>で紹介されていた<a href=\"https://homepages.dcc.ufmg.br/~figueiredo/disciplinas/papers/icse17sedano.pdf\">Software Development Waste</a>という論文。</p>\n<p>この論文に載っていたTypes of Software Development Wasteというソフトウェア開発のムダについて類型されていたものが面白かったので日本語にしてみた。</p>\n<h1>誤った機能・製品の構築</h1>\n<h2>ムダ</h2>\n<p>ユーザーニーズやビジネスニーズに対応していない機能・製品を構築するコスト</p>\n<h2>原因</h2>\n<ul>\n<li>ユーザーの要望\n<ul>\n<li>ユーザー調査、検証、テストを行っていない、ユーザーフィードバックを無視している、ユーザー価値の低い機能に取り組んでいる</li>\n</ul>\n</li>\n<li>ビジネスの要望\n<ul>\n<li>ビジネス関係者を関与させていない、関係者からのフィードバックが遅い、製品の優先度が不明確</li>\n</ul>\n</li>\n</ul>\n<h2>一言メモ</h2>\n<p>ユーザーの声を汲み損ねていたり、えいやで作ってしまった機能とかまぁムダですよねと言われてばそう。割とよく起こりがちである。</p>\n<h1>バックログの管理ミス</h1>\n<h2>ムダ</h2>\n<p>作業の重複、価値の低いユーザー機能の迅速化、必要なバグ修正の遅延のコスト</p>\n<h2>原因</h2>\n<ul>\n<li>バックログの逆転</li>\n<li>同時に多くの機能に取り組む</li>\n<li>作業の重複</li>\n<li>十分に準備されていないストーリー(以降\"ストーリー\"は\"機能\"と同じ意味で使われてるっぽい？)</li>\n<li>機能開発とバグ修正のアンバランス</li>\n<li>テストまたは重要なバグ修正の遅延</li>\n<li>気まぐれなスラッシング(訳が微妙)</li>\n</ul>\n<h2>一言メモ</h2>\n<p>取り組むべきタスクの優先度づけがうまくできてないと、あるべき順番であるべき機能がユーザに届けられなくなるのでそういうのはムダですよねという感じか。</p>\n<h1>リワーク(手戻り)</h1>\n<h2>ムダ</h2>\n<p>正しく行われたはずの納品物を変更するコスト</p>\n<h2>原因</h2>\n<ul>\n<li>技術的負債</li>\n<li>ストーリーの却下（例：プロダクトマネージャーがストーリーの実装を却下）</li>\n<li>完了の明確な定義がない（ストーリーが曖昧、設計モックの推測）</li>\n<li>欠陥（テスト戦略の不備、バグの根本原因分析がない）。</li>\n</ul>\n<h2>一言メモ</h2>\n<p>仕様の作り込みが甘かったり、そもそもユーザーテストが不十分であやふやな機能が設計されたりして作り直しが発生するのはムダですよねという感じ。技術的負債やバグ起因で作り直しが発生するのもここの無駄にカウントされてる。</p>\n<h1>不必要に複雑なソリューション</h1>\n<h2>ムダ</h2>\n<p>必要以上に複雑なソリューションを作成するコスト、機能、ユーザーインターフェース、コードを単純化する機会を逃す</p>\n<h2>原因</h2>\n<ul>\n<li>ユーザーの視点から見た不必要な機能の複雑さ</li>\n<li>不必要な技術的複雑さ\n<ul>\n<li>コードの重複、インタラクションデザインの再利用不足、前倒しで作った複雑すぎる技術的デザイン</li>\n</ul>\n</li>\n</ul>\n<h2>一言メモ</h2>\n<p>オーバーエンジニアリングの結果、なんかかっこいいけど誰も容易に変更できなくなってしまったみたいな実装はたまにある気がする。しかもそれをやった人が退職してしまい結局全部書き直す羽目にみたいな、、やり直しが発生するという意味で確かにそういう実装は結局ムダと言われればムダ。</p>\n<h1>不要な認知負荷</h1>\n<h2>ムダ</h2>\n<p>精神的エネルギーを不必要に消費するコスト</p>\n<h2>原因</h2>\n<ul>\n<li>技術的負債に苦しんでいる</li>\n<li>複雑または大規模なストーリー</li>\n<li>非効率なツールや問題のあるAPI、ライブラリ、フレームワーク</li>\n<li>不必要なコンテキストスイッチ</li>\n<li>非効率な開発フロー</li>\n<li>整理されていないコード</li>\n</ul>\n<h2>一言メモ</h2>\n<p>開発フローやツールや負債に起因してMPを過剰に消費させるのはムダですよねというやつ。</p>\n<p>そういえば精神的に負荷がかかることそれ自体がどのくらい開発の生産性低下を引き起こすのか知りたいんだけどそういう研究あるかな。例えば技術的負債によって発生する精神的な負荷は自体は実は生産性を低下させてなくて、技術的な負債そのものが生産性を低下させているだけみたいな。</p>\n<p>まぁMPが過剰に減らされるのは人間をリソースと考えるとムダだよねというのは当たり前だけど。</p>\n<h1>心理的苦痛</h1>\n<h2>ムダ</h2>\n<p>不要なストレスでチームに負担をかけるコスト</p>\n<h2>原因</h2>\n<ul>\n<li>チームのモラルの低下</li>\n<li>ラッシュモード(締切がきつすぎるみたいな状況)</li>\n<li>対人関係やチーム内の対立</li>\n</ul>\n<h2>一言メモ</h2>\n<p>これも上のやつと似ててMPの過剰消費に繋がるのでムダというやつ。</p>\n<p>そういえばフルリモートでissueベースで働いてると対人関係みたいなものを気にすることがほぼ無くなった。issueだけの関係だと後腐れなくて事務的に処理できることが多くて楽。一方でプロダクトを作っていくチームの一員としてビルドアップから参加する必要があると柔らかなコミュニケーションが必要になるので気を遣う。</p>\n<h1>待ち時間/マルチタスク</h1>\n<h2>ムダ</h2>\n<p>マルチタスクに隠れがちなアイドルタイムのコスト</p>\n<h2>原因</h2>\n<ul>\n<li>遅いテストや信頼できないテスト</li>\n<li>信頼できない受け入れ環境</li>\n<li>不足する情報、人、設備</li>\n<li>フィードバック遅延によるコンテキストスイッチ</li>\n</ul>\n<h2>一言メモ</h2>\n<p>テストが遅すぎたりPRのレビューがスルーされたりして先に進めない時に発生する待ち時間はムダですよね、というやつ。確かによく起きがちではあるが、PRのレビューで発生する待ちはどうしようもないところがあるな...。</p>\n<h1>ナレッジロス</h1>\n<h2>ムダ</h2>\n<p>チームがかつて知っていた情報を再取得するコスト</p>\n<h2>原因</h2>\n<ul>\n<li>チームの解散や移動</li>\n<li>知識のサイロ化</li>\n</ul>\n<h2>一言メモ</h2>\n<p>チームの移動や変更でナレッジの共有をやり直すのに発生する時間とかがムダですよねというやつ。これは暗黙知を減らすために各人が情報をオープンに見える化しておかないと発生しがち。</p>\n<p>ベテランの特定の人に質問が集中しちゃったりするとその人の本質的な作業時間が減るのもよくある。そういうベテランはそのプロダクトのあらゆることを知っているから開発のパフォーマンスも他の人より出せるはずなんだけど、オンボーディングを手伝うコストが度々発生しちゃたりすると勿体無いな〜となる。</p>\n<h1>非効率的なコミュニケーション</h1>\n<h2>ムダ</h2>\n<p>不完全、不正確、誤解を招く、非効率的、または不在のコミュニケーションのコスト</p>\n<h2>原因</h2>\n<ul>\n<li>チームサイズが大きすぎる</li>\n<li>非同期コミュニケーション\n<ul>\n<li>分散チーム、分散ステークホルダー、他のチームへの依存、チーム外の不透明なプロセス</li>\n</ul>\n</li>\n<li>不均衡\n<ul>\n<li>会話を支配する、聞かない</li>\n</ul>\n</li>\n<li>非効率な会議\n<ul>\n<li>集中力の欠如、振り返りのスキップ、毎日ブロッカーについて話さない(どういうこと...)、会議が長引く（例：長い立ち話）など</li>\n</ul>\n</li>\n</ul>\n<h2>一言メモ</h2>\n<p>コミュニケーションがうまくいかないとムダですよねみたいな感じ。幅広いけどもまぁそれはそう。会議に関しても不要な話で盛り上がっちゃうとか曖昧な目的始まっちゃって終わりどころが見えずダラダラ続くみたいなことはよくある気がする。</p>\n<h1>雑感</h1>\n<p>ソフトウェア開発におけるあるあるネタまとめみたいな様相である。こういうムダは確かに至る所に散見されるが、これらをどうやって取り除くかというのは中々難しい問題だ。だがその辺の対処法についてはこの論文に書いていない。</p>\n<p>この辺りのムダを取り除くためのプロセス改善の話はどういう本(や記事や論文)を読むと良いのだろうか。</p>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/comments","created_at":"2022-06-23T03:03:33Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/10","id":1281601385,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5MY69p","number":10,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/timeline","title":"ソフトウェア開発におけるムダ","updated_at":"2022-06-23T08:22:59Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},"issueComments":[],"pickupArticles":[{"body":"楽天モバイルからの移行を検討している。前々からニュースになっているが今まで1GB以下のデータ利用で無料だったのが7月からなくなってしまうからだ(追記: 2022年10月末までの最大4カ月間は月額データ利用量が1GB以下の場合、月額料金が実質無料だった →[詳細](https://network.mobile.rakuten.co.jp/fee/un-limit/info_20220513/))。\r\n- [楽天モバイル「0円」終了。7月からは最低1078円](https://www.watch.impress.co.jp/docs/news/1408944.html)\r\n\r\n# 要件\r\n要件的には下記のような感じ。\r\n\r\n- 1台目のスマホとして使える\r\n- 電話番号は要る(電話はしない)\r\n- SMS受け取れないと困る(が、送ることはない)\r\n- ネットは外出時に検索等の静的サイトやアプリで使えればOK。1GB/月あれば十分。\r\n- 家ではWi-Fiと接続する\r\n\r\n# 合理的シンプル290プラン\r\nこれら要件を勘案した上で移行先の選択肢を検討した。\r\n\r\nといっても候補がたくさんあってマジで訳分からんという感じだったが、いくつか調べた感じだと自分には日本通信の[合理的シンプル290プラン](https://www.nihontsushin.com/plan/plansimple.html)が合っていそうだと思った。\r\n\r\n上記要件を全て満たした上で、ドコモ回線で1GB 290円/月というプランだ。\r\n\r\n楽天モバイルでのデータ通信はもともと1GB/月以内に収まる使い方しかしていなかった。なのでこのプランで十分である。\r\n\r\nさらに1GBを超えると+1GBごとに220円なので2GB使っても510円/月だけ。外出先でYoutubeを見たりゲームをするような人には全く向かないけどプライベートも引きこもりのリモートワーカーにはピッタリだと思う。\r\n\r\nちなみにSIM or eSIMを選べるが初期手数料はどちらも3300円かかる(どこも同じ。7月以降の楽天モバイルx3ヶ月分)。\r\n\r\n# その他の候補\r\n## [povo](https://povo.jp/)\r\n基本料無料。年に2回トッピング購入が必要だがそれを加味しても440円/年で済む。多分1番安い。\r\n\r\n選ばなかった理由は安すぎる回線は楽天モバイルみたいにどこかで終了しそうだな〜という気がするのと、トッピング購入がちょっと手間。\r\n\r\nauの回線だし速度は十分だと思うし(ただし0円0GBの時は128kbpsになる)、何より1日だけ使い放題にしたりとかなり細かく料金をカスタマイズできるのは面白いなとは思った。\r\n\r\n## [IIJmio](https://www.iijmio.jp/hdc/spec/)\r\n2GB 850円/月。悪くはないけど日本通信の方が安かった。\r\n\r\n## [NUROモバイル](https://mobile.nuro.jp/plan/)\r\n3GB 792円/月。結構安い方だけど、これも日本通信の方が自分にあってたので却下。\r\n\r\n## [OCNモバイルONE](https://www.ntt.com/personal/services/mobile/one/charge.html)\r\n昔使ってたやつ。0.5GB 550円/月。月額だけ見たら安いけどさすがに1GBは欲しかったし、日本通信の方が安い。\r\n\r\n## [HIS Mobile](https://his-mobile.com/domestic/planlp_2022splan)\r\n1GB 550円/月。100MB未満だと290円/月になる。安いけど100MB未満のことは流石にないので却下。あとは申し訳ないがHISという名前にやや不安があった。\r\n\r\n## その他\r\n他にも[ahamo](https://ahamo.com/plan/)・[LINEMO](https://www.linemo.jp/)・[mineo](https://mineo.jp/price/)・[UQ Mobile](https://shop.uqmobile.jp/shop/)など色々と移行先の候補はあるが、どれも自分のユースケースには微妙で割に合わなかったので書いてない。\r\n\r\nあくまでも今回は自分の要件に合っているのはどこか？という話であり、特定のサービスを勧めたり贔屓したりしているわけではないことはご了承願いたい。データ通信のみとか逆に20GB以上プランとかだと話が変わってくると思うし。\r\n\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/8/comments","created_at":"2022-06-17T09:41:09Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/8/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/8","id":1274814318,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/8/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5L_B9u","number":8,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/8/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/8/timeline","title":"楽天モバイルからの移行先","updated_at":"2022-06-17T14:13:06Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/8","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"## 経緯\r\n昨日[GitHubに日記を書く運用](https://github.com/YuheiNakasaka/life/blob/main/_posts/20220527-tutorial.md)というやつを書いたんだけど、実際にやってみると色々と微妙に使い心地がよくなくてう〜〜〜んとなってしまった。\r\n\r\nその旨をツイートしたところr7kamuraさんがGitHub issuesをエディタにしてブログを作れるクソ便利ツールを教えてくれた。\r\n\r\n![https://user-images.githubusercontent.com/1421093/170819012-f920b5be-ec7b-4cfd-8bb4-ef4730de3754.png](https://user-images.githubusercontent.com/1421093/170819012-f920b5be-ec7b-4cfd-8bb4-ef4730de3754.png)\r\n\r\n## gialogを使った日記の作り方\r\n[r7kamura/gialog](https://github.com/r7kamura/gialog)のリポジトリのREADME.mdに書かれているリンクをポチっとやって、自分用のリポジトリを適当に作成する。するとGitHub Actionsが起動し、gh-pagesへNext.js製のSGGのブログサイトがデプロイされる。これだけ。\r\n\r\nあとはissuesを更新することでActionsがその更新を検知して変更を反映してくれるという仕組みっぽい。\r\n\r\nサイト自体は普通のNext.js製なのでテーマの概念とかはないけども、その辺は勉強がてらコードを拡張していけばいいんじゃないですかね〜という感じ。\r\n\r\n最近のぴよぴよフロントエンドピーポーにとってはNext.jsが一昔前のRailsだろうから大体弄れるだろうし、ちょっとした現代のWordPress感あってよいなとも思った。","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/comments","created_at":"2022-05-28T09:22:36Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/1","id":1251560179,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5KmUrz","number":1,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/timeline","title":"gialogで簡単に日記を作るやつをやった","updated_at":"2022-05-29T02:50:59Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"会社にエンジニアが一人になってからもう10ヶ月ほどが経った。もちろん一人であらゆる開発を行わないといけないので負荷は大きい。しかし手に負えないほどの仕事があるわけではないのでなんとかなっている。実務面ではそうなのだが、それ以外の面での影響が個人的には少なからずあったなと感じている。\r\n\r\nチームメンバーがいた頃は毎日15分~30分程度の朝会があった。ここでは前日・当日の仕事に関する話はもちろん気になったニュースや好きなアニメの話など自由に話していた。この時間を設けたのは業務上のコミュニケーションロスを減らしたいというよりはむしろPCの前で毎日作業を続けるエンジニアは人と会話をする機会が減りがちなのでとりあえず雑談しようという、ライフバランスを整えたい的な意味合いが大きかった。\r\n\r\n別に人と会話をしなくても問題ないのではというご意見も尤もだけど、アルツハイマーで認知能力を低下させないためには規則正しい生活はもちろん他者とのコミュニケーションをおこない、ある程度脳に負荷をかけた方が衰えにくいと言われている。エンジニアは知的生産を行う脳みそが資本の職業だから認知能力を維持する時間にある程度投資してもペイするはずだ。そういう理由から朝(といっても10時とか11時とかだけど)に朝会というものを開催していた。\r\n\r\nこれが10ヶ月ほど前から無くなってしまったわけである。\r\n\r\n加えてコロナの影響で外出も減ってしまっているし家にいながら飯が食えたり何もかも家でできてしまうから他者との接点がほぼ無くなっていることに気づいた。\r\n\r\n自分は趣味といえば開発かハロプロくらいなので、そういう話ができる仲間を会社の外にも持っておけばよかったなと少し後悔している。ゲームが趣味の人とかは配信で盛り上がれたり内輪で連携を取るメリットもあったりするからそういう仲間がいてDiscordとかでワイワイしてたりするの見て良さ...などと思ったりする。\r\n\r\nコロナ以前であれば勉強会やカンファレンスの現地会場で知り合いができたりする機会もあったがリモート開催が普通になっている昨今ではなかなかそういう機会も少ない。アイドルの現場も同じく。\r\n\r\n複数人エンジニアのいる会社に所属しているとそういう機会を手軽に得られるのでお得だったな〜などと思うのであった。\r\n\r\nとはいえプログラミングはポジティブな意味で孤独な営みであり、自分はそれが好きである。だから不特定多数の人達でワイワイと馴れ合いたいわけでは全くないけど好きなことについて様々な意見を言い合ってコミュニケーションできる相手や場(大学の研究室みたいなやつとか)は大切にしないといけなかったなと感じている。\r\n\r\n一人が好きとかコミュニケーションが嫌いとかそういう人が多いこの職業ではある(し自分もそのタイプだ)けど、それは会話したくない人と会話したくないだけであって、楽しく会話できる有意義な時間を過ごせる相手ともコミュニケーションしたくないやつなんていないよな〜という話。\r\n\r\n共通の話題で盛り上がれる人間 探し方 2022 が求められている。\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/comments","created_at":"2022-06-03T09:45:09Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/5","id":1259695399,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5LFW0n","number":5,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5/timeline","title":"会話","updated_at":"2022-06-03T10:37:15Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/5","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}}]},"__N_SSG":true}