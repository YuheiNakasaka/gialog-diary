{"pageProps":{"issue":{"body":"[プログラミング文体練習 ―Pythonで学ぶ40のプログラミングスタイル ](https://amzn.to/3Nv34mL)という本を読みました。本書はある文章の中に含まれる単語の頻度を集計するという処理を題材にして、それを40種類の手法で実装していくという少し変わった本です。目次は以下になります。\r\n![programming_buntai_rensyuu](https://github.com/YuheiNakasaka/gialog-diary/assets/1421093/56bb9fa7-ba9e-4011-8782-74934c4fcaff)\r\n\r\n見ての通り、低レベルなところでいうとアセンブリやスタックヒープ縛りのようなスタイルから関数型やOOPを用いた実装など現代的なスタイル、果てはニューラルネットワークまで多岐にわたります。実装言語としてはPythonが採用されているため低レベルなプログラミング(主にメモリへの直接アクセス)や末尾再帰の実装では無理がある部分もありますが内容を理解するという点では問題はないでしょう。この本で重要なのは具体的な実装コードというよりもそのプログラミングスタイルが生まれた背景は何だったのか？ということであり、それらがコンパクトに各章まとめられている点が見どころのように思いました。\r\n\r\n例えば構造化プログラミングについて。第Ⅱ部 5章によると1960年台、大規模プログラムを書くプロジェクトが増えてきて他人にも理解できるプログラムというものが必要となります。そこでどういう機能がプログラムの理解にとって「良い」ことでどの機能は「悪い」のかという共通認識を作るための議論がされ始めます。ここで登場するのがグラフの経路問題でお馴染みのダイクストラ先生であり、彼は`goto`を痛烈に批判したとされています。彼のこうしたいくつかの活動を中心にして、モノリスな手続き的プログラミングに対し構造化プログラミングというスタイルが生まれたとのことです。こうしたやりとりやターニングポイントになった50年以上も昔の原著論文に関してもしっかりと各章に参考文献が挙げられている点も有り難いところです。\r\n\r\n各章それぞれにこのような幾つものプログラミングスタイルがどのような制約から生まれたのか？という歴史背景が書かれており、その時代の空気を垣間見ることができます。著者が前書きでスタイルというのはある制約によって生まれると述べていますが、スタイルを学ぶことで逆にその時代における物理的な制約やソフト的な限界などに想いを馳せることができるという体験は他のプログラミング系の書籍にはあまりない切り口であり、この本をユニークにしている点だと思いました。\r\n\r\n一方でコードゴルフやデータベースやMVC/ステートレスといったものがスタイルとして紹介されていることにやや違和感があったり(章数を増やすため？)、追加収録されたニューラルネットワークの章に異様に力が入れられていたり(AI的な内容があった方が売れる？)みたいな邪推もなくはないです。ただこれはCS学部3,4年生くらいのプログラミングの授業で使われることが視野に入れられた書籍とのことなので出来るだけ幅広くトピックに触れてくれていた方が使い勝手が良いのかもしれないです。対象読者としてはCS学部3,4年生~はもちろん、プログラミング初心者ではなく、ある程度いくつかの言語でいくつかのコードを書き、試行錯誤した経験のある人が当てはまりそうです。\r\n\r\n私のような職業プログラマがこれを読んだからといってすぐにお賃金アップにつながるといったようなお得な効果はほぼないと思われますが、単純に読み物としてはそれなりに面白いのでプログラミング好きの暇人には程々におすすめの一冊かと思います。\r\n<br/>\r\n<br/>\r\n[![amazon](https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4814400225&Format=_SL250_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=razokulover-22&language=ja_JP)](https://amzn.to/3Nv34mL)\r\n[プログラミング文体練習 ―Pythonで学ぶ40のプログラミングスタイル | Cristina Videira Lopes, 菊池 彰 |本 | 通販 | Amazon](https://amzn.to/3Nv34mL)","bodyHTML":"<p><a href=\"https://amzn.to/3Nv34mL\">プログラミング文体練習 ―Pythonで学ぶ40のプログラミングスタイル </a>という本を読みました。本書はある文章の中に含まれる単語の頻度を集計するという処理を題材にして、それを40種類の手法で実装していくという少し変わった本です。目次は以下になります。\r\n<img src=\"https://github.com/YuheiNakasaka/gialog-diary/assets/1421093/56bb9fa7-ba9e-4011-8782-74934c4fcaff\" alt=\"programming_buntai_rensyuu\"></p>\n<p>見ての通り、低レベルなところでいうとアセンブリやスタックヒープ縛りのようなスタイルから関数型やOOPを用いた実装など現代的なスタイル、果てはニューラルネットワークまで多岐にわたります。実装言語としてはPythonが採用されているため低レベルなプログラミング(主にメモリへの直接アクセス)や末尾再帰の実装では無理がある部分もありますが内容を理解するという点では問題はないでしょう。この本で重要なのは具体的な実装コードというよりもそのプログラミングスタイルが生まれた背景は何だったのか？ということであり、それらがコンパクトに各章まとめられている点が見どころのように思いました。</p>\n<p>例えば構造化プログラミングについて。第Ⅱ部 5章によると1960年台、大規模プログラムを書くプロジェクトが増えてきて他人にも理解できるプログラムというものが必要となります。そこでどういう機能がプログラムの理解にとって「良い」ことでどの機能は「悪い」のかという共通認識を作るための議論がされ始めます。ここで登場するのがグラフの経路問題でお馴染みのダイクストラ先生であり、彼は<code>goto</code>を痛烈に批判したとされています。彼のこうしたいくつかの活動を中心にして、モノリスな手続き的プログラミングに対し構造化プログラミングというスタイルが生まれたとのことです。こうしたやりとりやターニングポイントになった50年以上も昔の原著論文に関してもしっかりと各章に参考文献が挙げられている点も有り難いところです。</p>\n<p>各章それぞれにこのような幾つものプログラミングスタイルがどのような制約から生まれたのか？という歴史背景が書かれており、その時代の空気を垣間見ることができます。著者が前書きでスタイルというのはある制約によって生まれると述べていますが、スタイルを学ぶことで逆にその時代における物理的な制約やソフト的な限界などに想いを馳せることができるという体験は他のプログラミング系の書籍にはあまりない切り口であり、この本をユニークにしている点だと思いました。</p>\n<p>一方でコードゴルフやデータベースやMVC/ステートレスといったものがスタイルとして紹介されていることにやや違和感があったり(章数を増やすため？)、追加収録されたニューラルネットワークの章に異様に力が入れられていたり(AI的な内容があった方が売れる？)みたいな邪推もなくはないです。ただこれはCS学部3,4年生くらいのプログラミングの授業で使われることが視野に入れられた書籍とのことなので出来るだけ幅広くトピックに触れてくれていた方が使い勝手が良いのかもしれないです。対象読者としてはCS学部3,4年生~はもちろん、プログラミング初心者ではなく、ある程度いくつかの言語でいくつかのコードを書き、試行錯誤した経験のある人が当てはまりそうです。</p>\n<p>私のような職業プログラマがこれを読んだからといってすぐにお賃金アップにつながるといったようなお得な効果はほぼないと思われますが、単純に読み物としてはそれなりに面白いのでプログラミング好きの暇人には程々におすすめの一冊かと思います。\r\n<br/>\r\n<br/>\r\n<a href=\"https://amzn.to/3Nv34mL\"><img src=\"https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&#x26;ASIN=4814400225&#x26;Format=_SL250_&#x26;ID=AsinImage&#x26;MarketPlace=JP&#x26;ServiceVersion=20070822&#x26;WS=1&#x26;tag=razokulover-22&#x26;language=ja_JP\" alt=\"amazon\"></a>\r\n<a href=\"https://amzn.to/3Nv34mL\">プログラミング文体練習 ―Pythonで学ぶ40のプログラミングスタイル | Cristina Videira Lopes, 菊池 彰 |本 | 通販 | Amazon</a></p>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/46/comments","created_at":"2023-06-19T07:54:46Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/46/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/46","id":1762962946,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/46/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5pFK4C","number":46,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/46/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/46/timeline","title":"『プログラミング文体練習』を読んだ","updated_at":"2023-06-19T07:54:46Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/46","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},"issueComments":[],"pickupArticles":[{"body":"- 先日「育児など家庭の色々があって自分の時間が確保できなくなった。技術力を高めるための勉強ができなくて不安。」みたいな話を聞いた\r\n- この悩みの直接的な解決方法としては先人の様々な体験談および対策みたいなものが世に出回っているからご家庭の状況に応じて参照すればいい思う\r\n  - [子育てと開発を両立するコツは「無理をしないこと」。パパ／ママエンジニアの働き方とは](https://engineer-lab.findy-code.io/ikuji_findy)\r\n  - [子育てを支える技術 ─ フルスタックお父さんとエンジニアとしての成長を両立させるには](https://eh-career.com/engineerhub/entry/2018/05/15/110000)\r\n  - [ITエンジニアと子育てと勉強と](https://zenn.dev/akinari_ueda/articles/3ec81c9605e732cb7912)\r\n- それよりも「技術力を高めるための勉強ができなくて不安」という点が個人的には気になった\r\n- 技術力とは何か？技術力が高くないとなぜ不安なのか？みたいな話\r\n- 技術力は特に明確な定義があるわけではない\r\n  - 例えば著名なOSSにコミットしているとか低レイヤーのプロトコルやインフラをバリバリ実装してるとか競プロで上位勢だとか、挙げ始めたらキリがなく、それっぽい何かはたくさん挙げられそう\r\n  - つまるところ技術力というのはその人の理想次第なのではないか\r\n- 技術力が無いとなぜ不安か\r\n  - 「**今職を失うのではないかという不安**」と「**将来職を失うのではないかという不安**」がある\r\n  - 前者に関しては\r\n    - 技術力が無いと仕事がこなせない => 役立たずとしてクビになる => 職を失う => 生きていく金がない => 不安、というロジック？\r\n  - 後者に関しては\r\n    - 技術力が無いと職を得られない => 生きていく金がない => 不安、というロジック？\r\n  - どちらにしても技術力の高低によって仕事をし続けられるかどうかが決まるという前提がありそう\r\n- 技術力の高さと失職の可能性\r\n  - 確かに技術力が高ければ職を得やすそうだしクビにもなりにくいのは確か\r\n  - しかし技術力の有り無しは0か1の離散的な話ではなく、0と1の間に無限のグラデーションがあるはず\r\n    - 技術力が0.2の人もいれば0.5の人もいるし0.8の人もいる\r\n    - どれだけの力があれば失職の可能性に怯えずに済むのか。はっきりわからない部分が多い。\r\n      - 企業ごとに技術力を0.2しか求められない会社もあるし0.8求める会社もある\r\n      - 自分の所属する企業はどれくらいを求めているのか、自分の将来働いているであろう企業群はどの程度を求めているのだろうか\r\n- 技術的成長はどれほど必要か？仕事が出来るだけの技術力があれば良いのでは？\r\n  - 仕事を最低限こなせるだけの技術力があれば仕事を失わないのではないか\r\n    - 少なくとも日本だとそんな簡単に解雇しづらいし\r\n- 業務外の技術について\r\n  - 現状の仕事で必要な範囲を超えた技術を学ぶことはどれだけ重要か\r\n    - 例えばサーバーサイドエンジニアがUnityを学ぶのはその人の不安の解消に役立つのかとか\r\n  - 不安の解消という観点では今の仕事の延長線上にある未知の技術に手を出す以外の学習は遠回り感があるのでは？\r\n- 仕事で必要なのは技術力ではなく仕事力ではないか\r\n  - エンジニアは技術職と言われることも多いし、仕事を遂行する能力=技術力というような考えをしがち\r\n  - しかし仕事を遂行する力、すなわち仕事力は技術力と一致しない(もちろんガチTech企業ならほぼ一致することもあるが)\r\n  - これは別に技術力を軽んじている訳ではなくソフトスキルを礼賛したいわけでも無く、仕事に必要な技術力は高々仕事の範囲でしかないという意味\r\n  - その仕事特有のドメイン知識や問題の定義・解決能力、チームを巻き込む力など仕事には仕事をこなすために必要なスキルがある\r\n  - 仕事とは**ある目標を達成すること**なので重要なのは技術力ではなく目標遂行能力だ\r\n    - 自分はこの能力を**仕事力**と定義してる\r\n  - 技術力というのはその中で必要になるピースの一つである。だからまずは今の仕事にどういう技術力がどのくらい必要か見極めて必要な分だけ学べば良い\r\n- そう考えると先の若者のように「業務外で勉強する時間がなくて不安」みたいな話についてはとりあえず下記の心構えで上から順に臨むのが良さそうに思った\r\n  - 仕事に取り組む上で必要な自分に足りていない技術力を定義すること。まずこれが重要。\r\n  - そしてその技術の学習を業務内で出来る限り行う\r\n    - 業務に関係のある技術なのでお賃金をもらいながら胸を張ってやるべき\r\n  - それでもどうしても足りないのであれば仕方なく業務外で頑張る\r\n    - ここに占める割合があまりにも多い場合は、上司のタスク割り当てが間違ってる可能性があるのでまず相談する\r\n      - 自分の能力不足の場合、気合いでやる。しかし気合いで血反吐を吐きながらやるのは最終手段。\r\n- 巷のスゴいエンジニアと自分を比べたり膨大で深遠な技術力という怪物を倒そうと頑張るのではなく、まずは自分に必要な最低限のサイズの目標に切り分けてそれだけを相手にするように心がける。まずは不安に囚われず余裕を持てるようになるところを目指す。\r\n- **今職を失うのではないかという不安**に関してはこんな感じ\r\n- では**将来職を失うのではないかという不安**に関してはどうか\r\n  - 業務内の時間で仕事にコミットすることで得た知識がそのまま将来の不安を軽減させてくれる可能性もあるし、余裕が生まれたことで業務外でできるようになる好き勝手な技術探求で得た知見が将来の不安を軽減させてくれる可能性もある\r\n  - どのみち将来のことはどうなるかわからない\r\n    - 10年前のインフラ・サーバーサイド・フロントエンド・各種技術の流行りやスタンダードを思い浮かべてほしい。何が消えて何が残って何が新たに生まれるかはわからんすぎる(ある程度の方向性は予測できるにせよ)。\r\n    - そういう意味ではハードウェアやOSやネットワークのような比較的低レイヤーな基礎技術を学ぶのが良いとかはあるかも\r\n      - だからといってその辺の知識が将来の失職を予防してくれるかも不明。その時必要となる仕事力がないと結局は不安は拭えない。\r\n- 第一は今コミット出来ることにコミット。そして遠い将来に関しては直感を頼りに逐一betしながら祈る。\r\n- その他色々\r\n  - 将来については歳を重ねて技術力どころではなくなり健康力みたいなものも必要そう。健康への投資も重要っぽい。\r\n    - 目や腰、その他生活習慣病などのケアに追われている中年エンジニアが自分のTLにも散見されるようになってきた(TLの老化...)。\r\n  - 未婚・DINKsなど子育てが無い人は**将来職を失うのではないかという不安**への投資がしやすいので余裕があるか？\r\n    - 先に書いた通り将来に関しては祈り要素もあるので皆等しくほんのり不安なのは同じ\r\n    - 置かれた立場によってそれぞれの不安要素はあるものだし、まして子の有無によって発生するもの/失っているものを比較するのは語り得ないものなので踏み込むべきではない\r\n  - こういう人生や日常の悩みは現状把握と分解と整理が基本なので一人で抱え込まずに早めに適当に文章にするなり人に吐き出すなりすると良い。当事者だけではるつぼに嵌ってしまう。\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/comments","created_at":"2022-12-20T12:17:23Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/28","id":1504471609,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5ZrGo5","number":28,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/timeline","title":"仕事力と技術力と不安に関する雑文","updated_at":"2022-12-21T01:21:04Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"## 経緯\r\n昨日[GitHubに日記を書く運用](https://github.com/YuheiNakasaka/life/blob/main/_posts/20220527-tutorial.md)というやつを書いたんだけど、実際にやってみると色々と微妙に使い心地がよくなくてう〜〜〜んとなってしまった。\r\n\r\nその旨をツイートしたところr7kamuraさんがGitHub issuesをエディタにしてブログを作れるクソ便利ツールを教えてくれた。\r\n\r\n![https://user-images.githubusercontent.com/1421093/170819012-f920b5be-ec7b-4cfd-8bb4-ef4730de3754.png](https://user-images.githubusercontent.com/1421093/170819012-f920b5be-ec7b-4cfd-8bb4-ef4730de3754.png)\r\n\r\n## gialogを使った日記の作り方\r\n[r7kamura/gialog](https://github.com/r7kamura/gialog)のリポジトリのREADME.mdに書かれているリンクをポチっとやって、自分用のリポジトリを適当に作成する。するとGitHub Actionsが起動し、gh-pagesへNext.js製のSGGのブログサイトがデプロイされる。これだけ。\r\n\r\nあとはissuesを更新することでActionsがその更新を検知して変更を反映してくれるという仕組みっぽい。\r\n\r\nサイト自体は普通のNext.js製なのでテーマの概念とかはないけども、その辺は勉強がてらコードを拡張していけばいいんじゃないですかね〜という感じ。\r\n\r\n最近のぴよぴよフロントエンドピーポーにとってはNext.jsが一昔前のRailsだろうから大体弄れるだろうし、ちょっとした現代のWordPress感あってよいなとも思った。","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/comments","created_at":"2022-05-28T09:22:36Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/1","id":1251560179,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5KmUrz","number":1,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1/timeline","title":"gialogで簡単に日記を作るやつをやった","updated_at":"2022-05-29T02:50:59Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/1","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"パソコンが使えると言った場合、どのレベルまでのスキルを持っていれば使えると言えるのだろうか。ブラウザを開いてググったりできれば使えると言えるかもしれないし、もしかすると MOS 関連の資格を持っていないと使えると言えないかもしれない。日常的に PC を使ってブログを書いたりゲームを遊んでいる人は自分はパソコンが使える、と言うだろう。まぁこんな感じでパソコンが使えるといえるかどうかの基準は結構曖昧なものである。\r\n\r\nしかしながらもし自分が自社の採用担当で「最低限パソコンが使える人を採ってほしい」とクソアバウトな指令を与えられた場合には自分なりに何かしらの基準を設けなければいけない。採用した人材がどの部門で働くのかによって必要とされるスキルは違うだろうからまずはどこの部署に配属される人材なのかを整理するところから始めるだろうか。そして事務職系だったり営業だったり社内オフィス系だったりとにかく何かしらの部署であることが判明し、具体的に必要なスキルなんかがわかるはずだ。ところが今回は総合職というこれまた曖昧な人材の採用を行うということが分かった。どうやら上司から言われた「最低限パソコンが使える人を採ってほしい」という曖昧な指令を満たす人材をどうにかしてふるいにかけるしかなさそうだ。\r\n\r\nこんなシチュエーションがあった場合(実際はこんなことないと思うけど)に「最低限パソコンが使える人」をふるいにかける試験について考えてみた。\r\n\r\nそれが下記である(通称: 所在地抽出試験)。\r\n\r\n「ここに大小様々な企業のホームページの URL が 20 社分ある。これらの URL を頼りにして各企業の所在地の住所をエクセルもしくは Google SpreadSheet でまとめて提出してください。」\r\n\r\nこれだけだと、一見誰でも解ける簡単なタスクであると思うかもしれない。しかし次の１文を加えることでこのタスクの難易度は一気に上がる。\r\n\r\n「尚、制限時間は 25 分です。」\r\n\r\n25 分かけて 20 社分の HP の URL から所在地を調べてエクセルにまとめる。エクセルにまとめる諸準備などの時間も含めると 1 社あたりに割ける時間は約 1 分である。\r\n\r\n基本的なタイピング速度・各種ショートカットコマンドの使い方・ブラウザの使い方・Web サイトの回遊力・表計算ソフトの使い方など当たり前のことでまごつくような人は 1 社 1 分だとおそらく間に合わない。\r\n\r\n「URL にアクセスして住所が書いてある部分を見つけてコピペすればいいだけだろ？」と思うかもしれないが、実は企業の HP の所在地がどこに書いてあるか見つけるのは案外難しい。なぜかというと HP のどこに所在地を書くのか？やどのような形式で住所を書くのか？などに決まったルールはないからだ。ある企業は企業概要というメニューの先の所在地という欄に記載しているかもしれないし、ある企業はトップページのフッターに記載しているかもしれない。たどり着いた HP から素早く情報を吸い出せるかどうかは日頃からどれだけネットサーフィンをしているかという地力が試される。cmd+f でサイトの全文検索ができることすら知らない人も意外と多い。\r\n\r\n「そうはいってもこのくらいのネットサーフィン力は自分にはあるよ。1 社あたり 1 分なんて難しくないっすわ。」というネット常用民もいるだろう。ところが実際やってみると中々難しいことがわかる。というのも例えばある企業の HP ではサイト全体のコピペが許可されていないという場合がある。その際は単純にコピペすることができないだろう。コピペ以外の術を知らなければ住所を丁寧に手打ちで入力する羽目になる(短い場合はそれでも良いが)。回避方法を知っている人は cmd+option+i などで開発者ツールを開いて HTML から直接コピーすることができる。だが開発者ツールを弄れる人はどれくらいいるだろうか。\r\n\r\n「俺はプログラマーだ。こんなブルシットジョブなんてプログラミングで駆逐してやるぜ。」という考えが浮かんでくる人もいるかもしれないがそれも良案ではない。というのもまず、先にも述べた通り所在地の記載方法にルールはないのでプログラム化するのが面倒だ(無理ではない)。所在地の記載について、そのルールを各社のサイトにアクセスし学んでいるくらいならその都度コピペしてしまった方が早い。もしこれが 200 社とか 2000 社に対して同様のタスクをこなさないといけないのであればコード化してしまった方がトータルの時間は短くなるだろうが 20 社なら手動でやった方が多分早い。それに例えばある企業のサイトでは所在地部分が画像で出来ているかもしれない。その場合は単純なテキストマイニングでは抽出できないので OCR などを使う必要がある。20 社程度であればプログラミングで解決するのはやや大袈裟であろう。\r\n\r\n他にも、とある HP ではそもそも所在地の記載がなかったりする。そういったサイトはエクセルにどう記載すればいいのだろうか？と受験者を戸惑わせるだろう。そういうサイトに対してどう対処するかもある意味試験の一部である。その企業の部分だけ空欄にしておくのもありだし、所在地不明と書いておいてくれるならいくらか親切かもしれない。\r\n\r\nそもそも URL にアクセスせずに Google で検索してしまった方が早い、みたいな可能性もある。これもまたパソコンが使える人ならではの技法なのでアリだ。しかし HP に載っている所在地と異なる場合があるので結局 HP の該当箇所をチェックする必要はある。所在地が本社と支店で複数あるパターンなどは本社ではなく支店の方が検索結果に出てくる場合もあるので注意が必要だ。\r\n\r\nこのように企業の所在地をエクセルでまとめるだけの簡単なお仕事であってもハマりどころがそれなりにあり、ある程度のパソコンの習熟度が必要になる。テスト時間は 20~30 分で済むので手軽にふるいにかける試験としては中々アリではないだろうか。\r\n\r\n今回は 20 社としたがこれを 10 社などに減らしてテスト時間を減らすのも良い。さらに「採用担当者に適宜疑問があれば質問して良いことにする」というルールを加えると、実際にその人が困難にぶつかった時にうまくヘルプを出せる人間なのか？みたいなこともわかるかもしれない。\r\n\r\n「パソコンが使えるかどうかの試験というよりはネットサーフィン力みたいなものしか測れないじゃろ！」という意見もありそうだが、この程度のことが出来ないのにさらに難しい各種ツールの使い方を効率よく学べるわけがない。最低限押さえておくべきパソコン力の土台みたいなスキルを持ち合わせているかチェックする試験としてはこれで十分だろう。\r\n\r\nちなみにこの試験には元ネタがある。今年の初めに某所の若者が所用でアニメスタジオの HP の URL(約 150 社分)から所在地を抜き出してエクセルにまとめるというタスクを何やらぶつぶつ言いながら作業をしていたのでそれを横から眺めていたところ、タブ移動や window 切り替えやコピペ作業をキーボードでやらずに全てマウスでぽちぽちやっていたり、サイト内検索を知らなかったなど基本的なことが意外と出来ていないことが判明した。ある程度整理されたサイトであっても目 grep で所在地を見つけ出すのは時間がかかるので cmd+f で\"所\"や\"〒\"で検索する術を覚え、一発で移動できることに感動したりしていた、というようなことがあった。\r\n\r\n似たような話だとある長い文章における重複箇所や語尾の変換などをメモ帳で一つ一つ修正していたのでテキストエディタ(その時は VSCode)を教えて一括変換や複数箇所同時修正などの方法を教えたところ驚愕されたというのもあった。IT 業界だとまぁ大体この辺は周知のスキルだと思うが、それ以外の業界ではまだまだ PC を使いこなせていないのかもなと思った次第。DX という言葉がバズワード化して久しいがそれ以前にこういう基本的な PC 作業の省力化スキルをみたいなものを広めるのも大切だな〜などと思うなどした。\r\n\r\n最後に例のアニメスタジオの HP の URL をまとめたものを置いておくので好きに使ってください。\r\n\r\n- [https://gist.github.com/YuheiNakasaka/638e2ea980a56a09c7122fe01d4c33e5](https://gist.github.com/YuheiNakasaka/638e2ea980a56a09c7122fe01d4c33e5)\r\n\r\nちなみに上場企業(2022 年)の URL 一覧と CSV をまとめてくれているサイトがあったのでこれも貼っておく。\r\n\r\n- [https://tachitechi.com/listed-company-url-summary-csv/](https://tachitechi.com/listed-company-url-summary-csv/)\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/comments","created_at":"2024-01-13T15:27:21Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/57","id":2080345150,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc57_4w-","number":57,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/timeline","title":"パソコンを最低限使える人かチェックする試験","updated_at":"2024-01-13T15:27:21Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}}]},"__N_SSG":true}