{"pageProps":{"issue":{"body":"- 先日 OpenAI から[ChatGPT](https://chat.openai.com/chat)が Beta 公開された\r\n- ChatGPT ではどんな質問に対しても何かしらの回答を生成してくれるのだが、ソースコードに関しても中々の筋が良さそうな雰囲気のコード片を生成してくれるということで少し話題になっていた\r\n- こうしたプログラムを生成してくれる AI が発展していく中でどういう具合にプログラマの仕事が奪われていくのか興味がある\r\n- 特に以下では**web アプリやモバイルアプリなどのアプリケーションの開発において**という文脈で考えることにする\r\n- まず AI がプログラマの仕事を奪うまでにはいくつかの段階があると思う\r\n\r\n# コード支援レベル\r\n\r\n- 現状は[GitHub Copilot](https://github.com/features/copilot)のようなコーディング支援を行うレベルの AI はある程度実用レベルになっている\r\n  - 自分は Copilot が生成したコード片をプロダクションコードに含めるのは権利関係の問題もあり様子見している\r\n  - しかし Copilot を使っていないわけではなく、変数名や定型作業のサジェストや変数名の補完、コードの書き出しの補助などで利用している\r\n    - 例えば API のレスポンスで受け取る予定の JSON をペタッと貼るとそれにあった構造体とか型が丸ッと生成されたりする。スニペットとか静的なコードジェネレータでやってたような作業が良い感じにできるなど。\r\n  - 正直このようなコーディングの支援 AI だけではプログラマの仕事は AI に奪われないだろう。全然奪うというよりプログラマの手助けをするだけなので、これではまだまだプログラマがいないとアプリケーションは完成しない。\r\n\r\n# ChatGPT レベル\r\n\r\n- では ChatGPT のようにある程度まとまったサイズのコード片を生成してくれる AI が普及するとどうなるか\r\n  - Twitter ではさまざまなプログラマがコード片の生成を試みているがその内容を見るとそのまま使えるコードが半分、修正が必要なコードが 1〜2 割、完全に間違っているコードが 3〜4 割という感じだ\r\n  - 今のクオリティだと人が書いた方がまだ早い、もしくはプログラマによる手修正が結構必要そう。なのでプログラマがいないとまだアプリケーションは完成させられないだろう\r\n  - ただし修正すること前提で簡単なタスク用のまとまったコード片を生成してコーディングの時間短縮、といった使い方はできるかもしれない\r\n  - ある意味これもコーディング支援というレベルではある\r\n    - というか GitHub Copilot が GPT-3 を使ってるから実質同じといえば同じ\r\n\r\n# かなり高精度にコード生成できるレベル\r\n\r\n- ではそのまま使えるコード片を ほぼ 100%のクオリティで生成できる AI が登場するようになるとどうか\r\n  - ここまでくると AI に生成してほしいコードの内容を伝えてコード片を大量に生成してもらい、それをプログラマが組み合わせてアプリケーションという形にする流れでも現実的になってきそう\r\n    - 例えば「メールアドレス認証するコード書いて」「CRUD なフォームのモデルとコントローラとビューを書いて」等々でいくつかの動くコード片が生成される\r\n    - 人間はこれらをつなぎ合わせるだけでアプリケーションが完成するイメージ\r\n      - こうしたコード片をつなぎ合わせる仕事はアセンブリエンジニアとでも呼ばれるようになりそう\r\n  - **AI には体力が無いかつマシンさえあれば並列で大量に実行できるという人間には成し得ない強力な生産性がある**\r\n    - 金とマシンさえあれば 24 時間並列で一気にコード生成してもらえるはず\r\n  - よって例えば今までだと新規でアプリケーションを完成させるのに必要なプログラマが 1 人月必要だった案件でも AI にコーディング部分を大幅に代替してもらえるなら一部コード修正やレビューが必要にしても、数人日で完成させられるようなことはあるかもしれない\r\n  - この辺りから一部のプログラマの仕事は AI に奪われたと言われるようになるだろう\r\n- とはいえこれらは**新規開発の場合のみの話**だ\r\n- 仕事におけるプロダクションで稼働するシステム開発の難易度の高い部分は既存システムへ追加・修正などの改修を入れるところである\r\n- どんなに正確なコード片を生成できたり、あるいはアプリケーション全体のコードを生成できたとしてもそれは新規開発時のコーディングの代替であり、一度本番に乗ってしまったコードを運用していく際にはちょっとやそっとのコード片の生成レベルでは代替は難しそうだ\r\n\r\n# 既存コードのコンテキストも読み取ってコード生成できるレベル\r\n\r\n- では改修要望を書くと既存コードのコンテキストを加味した状態の追加修正が入ったコードが丸っと生成されるようになるとどうか\r\n  - これが出来るならアプリケーションのコーディング部分を担当するプログラマはほぼ不要になるかもしれない\r\n    - 生成されたコードを既存コードに適用するくらいで済むレベルを想定\r\n  - 残りの仕事に必要なのは下記くらいか\r\n    - 生成されたコードが安定して実行し続けられるように周辺環境を作るインフラエンジニア\r\n    - 生成されたコードに問題はないか確認するコードレビューエンジニア\r\n    - 生成されたコードが想定通りに動くか確認する QA エンジニア\r\n    - AI のコード生成や生成したコードを管理するプロンプトエンジニア/アセンブリエンジニア?\r\n      - AI の癖を知り既存コードとの相性の良いプロンプトを管理するご機嫌伺い役\r\n- ここまでくると新規開発だけでなく既存システムの改修に関するコーディングはある程度代替できるのでさらに従来のプログラマの仕事は減らせるかもしれない\r\n\r\n# さらに先の話\r\n\r\n- さらに AI がプログラマの仕事を奪うにはどんなことが必要か\r\n  - 生成されたアプリケーションを実行管理し安定運用してくれるインフラをなんとかしてもらう必要がありそう\r\n    - 生成されたアプリケーションと想定するサービス品質などを指定すると自動でインフラを展開して運用までやってくれるような仕組みはできるか？\r\n    - サーバー・ネットワーク・DB などの知識を隠蔽できるか？\r\n    - トラブルシューティングは可能か？\r\n      - この辺りができないとインフラ系のエンジニアの仕事はなくせなそう\r\n  - アプリケーションが正しく動いているか保証できる必要がありそう\r\n    - 想定外の挙動はないかコードレビューする\r\n    - 生成されたコードが想定通りの動作をしているかテストを書く\r\n    - 生成されたコードが想定通りの動作をしているか動作確認を行う\r\n    - 誤作動した時にストップできる\r\n      - この辺りを担保できないと品質保証系のエンジニアの仕事はなくせなそう\r\n- その他仕事に関してはどうか？\r\n  - 他の役職に関しては詳しくないので何もいえない\r\n    - というか自分の理解が浅いかもしれない職に関して簡単に奪われる職として挙げるのは憚られる\r\n\r\n# 雑多な話\r\n\r\n## 生成されるコード\r\n\r\n- AI が生成するコードは既存のプログラミング言語で書かれたコードである必要はあるのか\r\n  - コード片を人間が読まなくても良いレベルのクオリティなら既存の言語で吐き出す意味はないのでは\r\n    - トラブルシューティングしづらそう\r\n    - 過去の資産(GitHub 上のコードとか)を利用するなら既存のプログラミング言語の方が吐き出しやすそうではある\r\n- AI が吐き出しやすいようなコードを書くという価値観が新たにコーディング規約に追加されたりするかも\r\n- そもそも実行バイナリを吐き出すだけではダメか？\r\n  - 実行バイナリをブラックボックステストであとは QA エンジニアが検証するだけのお仕事で良いのでは\r\n    - とはいえトラブルシューティングしづらそうなのはキツいか\r\n\r\n## 開発体験\r\n\r\n- 開発体験(DX)の向上は必要か？\r\n  - AI が大方のコード生成をしてくれるなら開発体験の向上にコストをかける必要はあるのか\r\n  - プログラマがコードに手を入れなくても良いなら lint とか formatter とか型とかもいらないのでは\r\n- プログラミング言語やフレームワークの選定はどう変わるか？\r\n  - AI が一番精度良く吐き出せる言語が人気になるか\r\n  - ただまぁこれは今と変わらず要件次第になりそうではあるな\r\n\r\n## プログラマの仕事\r\n\r\n- プログラマの仕事はどう変わるか\r\n  - コードを書く比重が減り、コード片を生成する作業とシステムを組み上げる作業に比重が移りそう\r\n  - 要件を分解しシステムを構成するコード片を生成するためのプロンプト作成作業が大量に発生しそう\r\n  - より必要になる能力\r\n    - 業務知識への明るさ\r\n    - 調整能力(コミュニケーション力含め)\r\n    - 要件の分解とそのそれぞれへの解決策を文章化する能力\r\n    - **システム全体**の設計力\r\n  - 今も似たようなことをやってるはずだし必要な能力は変わらなそう\r\n  - コード化する部分がめちゃくちゃ爆速になるだけか？\r\n- フロントエンドエンジニアとかバックエンドエンジニアみたいな職域の境はなくなり、システム全体を設計して形にできる全部できる強いフルスタックな人が 1 人いればアプリケーション開発には十分というチーム構成になる可能性はあるかも\r\n- システムの安定性を向上させたり保証する仕事の重要性が増しそう\r\n  - 要は**AI の尻拭い**\r\n    - テストや QA を手厚くやって AI の生成したコードの穴を塞ぐ仕事\r\n    - コードレビューの仕事\r\n  - QA 用 AI が出てくる可能性もあるが、その AI の QA を誰がやるのか？とかその AI は業務依存の実装になりそうなので維持管理は内製になりそう\r\n    - AI より安いマンパワーを使った方がコスパ良いとかありそう\r\n- インフラ周りは構築はまだしも運用を完全に AI に代替させることで仕事を奪わせるのは難しそうに感じる、というか想像できない\r\n  - ただ自社で DC 持ってるとかよっぽど特殊な要件のアプリケーションでなければクラウドベンダが良い感じのソリューションを出してきそうではある。昔に比べたら今でも十分インフラは深い知識なくてもある程度構築運用できるし。\r\n- 責任を取ること\r\n  - AI のミスの尻拭いは人間がやる\r\n\r\n## 完全に未知の概念に対応できるか\r\n\r\n- 「イスカルテンダ王国のスルマオン暦のランフォイを求めるコード」みたいな未知の概念は AI に正しく対応できない(はず)\r\n- AI が知らないものは人間が頑張るしかない\r\n\r\n## AI の学習ソースはどうなるのか\r\n\r\n- 現状は GitHub やインターネット上のコードを学習してモデルを作ってると思うが、近い将来学習ソースが枯渇するという話がある\r\n- 将棋 AI は将棋 AI の生成した棋譜をさらに学習したりしているが、AI が生成したプログラミングのコードをさらに学習したりすれば解決するか？\r\n  - 将棋における[floodgate](http://wdoor.c.u-tokyo.ac.jp/shogi/floodgate.html)みたいな AI が作ったソースコードが実行されたり共有されたりするものが生まれるか？\r\n\r\n## 信頼性\r\n\r\n- AI が生成したコードをどこまで信頼できるか\r\n  - 例えばある手術に使われる機器のソフトウェアが一切人間の手が入っていない AI による自動生成コードで作られているとして、自分の娘がその機器で手術を受けると知ったら、今の AI のレベルなら 100%手術をやめさせると思う\r\n  - その信頼性を**担保するための仕事**(コードを人間が書くべきといっているわけではない)はしばらくは人間の仕事になりそう\r\n  - 特に人の営みと高度に接続する必要がある場面では避けられないように思う\r\n    - AI にはパーソナリティや家族のような守るべきものが(現時点では)ないという点がある種の弱点(利点)な気がする\r\n- AI は人との営みの中で何か重要なことを行うためには責任感が足りなすぎる\r\n  - 失敗しましたごめんな！で済まない場面への対応を整備する必要がありそう\r\n  - そうなると責任は開発(会社|者)が取るしかない。AI の尻拭いは人間がやる。\r\n- ある程度無責任でも良い場面には使えるが強く責任が伴う場面では、失敗した場合のケアや予防策を構築する必要がある\r\n\r\n## シンギュラリティ\r\n\r\n- AI が考え、AI が解決案を生み出し、また AI が問題を見つけ、AI が解決を試みるみたいなシンギュラリティ的な世界は一部の分野ではもうすぐあり得そう\r\n- 社会の中でも広く適用されるためには失敗の責任を自分で取れる、自分で尻拭いできる能力が AI に生まれたら世界は変わりそう。まだまだ SF っぽいだいぶ先の話な気もする。\r\n- プログラマはAIの失敗の尻拭いをするために謝罪の練習をしておくと良さそう(?)\r\n\r\n # [追記] コード生成ではなくシステム生成できるレベル\r\n\r\n- 昨夜もう少しちゃんと考えてみたが、そもそもコード生成というのをやめてシステム全体を生成して展開するところまで一気通貫でやってしまえるならどうか\r\n  - 例えば仕様書とシステム構成をアップロードしたらアプリケーションコードが生成されインフラが構築され一気にAWSか何かに展開される感じ\r\n    - 生成されたシステムをブラックボックスでテストして振る舞いなど問題なければOKみたいな。\r\n    - これで十分な案件はかなりあるのでは。\r\n  - これなら新規開発に関してはもうコーディングが完全にいらないしインフラ周りの仕事も消える\r\n  - 昨日書いた時はどのみち既存システムの改修とかは既存データをどうするかとか既存インフラとのつなぎ合わせとか調整の関係で大変じゃないかと思っていたが、そもそも全て改修時にスクラップ&ビルドすれば良いなと思った\r\n    - アプリケーションコードもインフラ側も全部都度作り直す\r\n    - そうなると既存データとどう整合性を保つかだけが問題になる\r\n      - であればここだけ人間が頑張れば良いのでは...\r\n      - というかここまでできるならデータに関してもAI側でやってくれそう\r\n  - もうこの段階まで来ると変更容易性だとか**保守性に関する概念すら全て過去の遺物**\r\n  - あとは品質管理だけどうするかだけど、これもテストと品質水準をまとめてAIに提出し検証してもらう感じで良いのかも。\r\n    - ブコメなどでも書かれていたが確かにここまでくるともう人間が把握できる規模ではないかもだし、どのみち機械に頼らないといけない部分も出てきそう。\r\n    - このへんも時間の問題なのかもしれないな...\r\n\r\n# [追記] システム開発がなくなる世界線\r\n- ここまで簡単にシステム開発を適用できるようになると、そもそも世の中的に必要なソフトウェアが全ての業界に行き渡りあらかた開発され切ってしまったという世界線もあるか\r\n- ある意味今でいうところの白物家電みたいな。\r\n- そうなるとシステム開発という業種自体かなり下火になりそう\r\n","bodyHTML":"<ul>\n<li>先日 OpenAI から<a href=\"https://chat.openai.com/chat\">ChatGPT</a>が Beta 公開された</li>\n<li>ChatGPT ではどんな質問に対しても何かしらの回答を生成してくれるのだが、ソースコードに関しても中々の筋が良さそうな雰囲気のコード片を生成してくれるということで少し話題になっていた</li>\n<li>こうしたプログラムを生成してくれる AI が発展していく中でどういう具合にプログラマの仕事が奪われていくのか興味がある</li>\n<li>特に以下では<strong>web アプリやモバイルアプリなどのアプリケーションの開発において</strong>という文脈で考えることにする</li>\n<li>まず AI がプログラマの仕事を奪うまでにはいくつかの段階があると思う</li>\n</ul>\n<h1>コード支援レベル</h1>\n<ul>\n<li>現状は<a href=\"https://github.com/features/copilot\">GitHub Copilot</a>のようなコーディング支援を行うレベルの AI はある程度実用レベルになっている\n<ul>\n<li>自分は Copilot が生成したコード片をプロダクションコードに含めるのは権利関係の問題もあり様子見している</li>\n<li>しかし Copilot を使っていないわけではなく、変数名や定型作業のサジェストや変数名の補完、コードの書き出しの補助などで利用している\n<ul>\n<li>例えば API のレスポンスで受け取る予定の JSON をペタッと貼るとそれにあった構造体とか型が丸ッと生成されたりする。スニペットとか静的なコードジェネレータでやってたような作業が良い感じにできるなど。</li>\n</ul>\n</li>\n<li>正直このようなコーディングの支援 AI だけではプログラマの仕事は AI に奪われないだろう。全然奪うというよりプログラマの手助けをするだけなので、これではまだまだプログラマがいないとアプリケーションは完成しない。</li>\n</ul>\n</li>\n</ul>\n<h1>ChatGPT レベル</h1>\n<ul>\n<li>では ChatGPT のようにある程度まとまったサイズのコード片を生成してくれる AI が普及するとどうなるか\n<ul>\n<li>Twitter ではさまざまなプログラマがコード片の生成を試みているがその内容を見るとそのまま使えるコードが半分、修正が必要なコードが 1〜2 割、完全に間違っているコードが 3〜4 割という感じだ</li>\n<li>今のクオリティだと人が書いた方がまだ早い、もしくはプログラマによる手修正が結構必要そう。なのでプログラマがいないとまだアプリケーションは完成させられないだろう</li>\n<li>ただし修正すること前提で簡単なタスク用のまとまったコード片を生成してコーディングの時間短縮、といった使い方はできるかもしれない</li>\n<li>ある意味これもコーディング支援というレベルではある\n<ul>\n<li>というか GitHub Copilot が GPT-3 を使ってるから実質同じといえば同じ</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>かなり高精度にコード生成できるレベル</h1>\n<ul>\n<li>ではそのまま使えるコード片を ほぼ 100%のクオリティで生成できる AI が登場するようになるとどうか\n<ul>\n<li>ここまでくると AI に生成してほしいコードの内容を伝えてコード片を大量に生成してもらい、それをプログラマが組み合わせてアプリケーションという形にする流れでも現実的になってきそう\n<ul>\n<li>例えば「メールアドレス認証するコード書いて」「CRUD なフォームのモデルとコントローラとビューを書いて」等々でいくつかの動くコード片が生成される</li>\n<li>人間はこれらをつなぎ合わせるだけでアプリケーションが完成するイメージ\n<ul>\n<li>こうしたコード片をつなぎ合わせる仕事はアセンブリエンジニアとでも呼ばれるようになりそう</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>AI には体力が無いかつマシンさえあれば並列で大量に実行できるという人間には成し得ない強力な生産性がある</strong>\n<ul>\n<li>金とマシンさえあれば 24 時間並列で一気にコード生成してもらえるはず</li>\n</ul>\n</li>\n<li>よって例えば今までだと新規でアプリケーションを完成させるのに必要なプログラマが 1 人月必要だった案件でも AI にコーディング部分を大幅に代替してもらえるなら一部コード修正やレビューが必要にしても、数人日で完成させられるようなことはあるかもしれない</li>\n<li>この辺りから一部のプログラマの仕事は AI に奪われたと言われるようになるだろう</li>\n</ul>\n</li>\n<li>とはいえこれらは<strong>新規開発の場合のみの話</strong>だ</li>\n<li>仕事におけるプロダクションで稼働するシステム開発の難易度の高い部分は既存システムへ追加・修正などの改修を入れるところである</li>\n<li>どんなに正確なコード片を生成できたり、あるいはアプリケーション全体のコードを生成できたとしてもそれは新規開発時のコーディングの代替であり、一度本番に乗ってしまったコードを運用していく際にはちょっとやそっとのコード片の生成レベルでは代替は難しそうだ</li>\n</ul>\n<h1>既存コードのコンテキストも読み取ってコード生成できるレベル</h1>\n<ul>\n<li>では改修要望を書くと既存コードのコンテキストを加味した状態の追加修正が入ったコードが丸っと生成されるようになるとどうか\n<ul>\n<li>これが出来るならアプリケーションのコーディング部分を担当するプログラマはほぼ不要になるかもしれない\n<ul>\n<li>生成されたコードを既存コードに適用するくらいで済むレベルを想定</li>\n</ul>\n</li>\n<li>残りの仕事に必要なのは下記くらいか\n<ul>\n<li>生成されたコードが安定して実行し続けられるように周辺環境を作るインフラエンジニア</li>\n<li>生成されたコードに問題はないか確認するコードレビューエンジニア</li>\n<li>生成されたコードが想定通りに動くか確認する QA エンジニア</li>\n<li>AI のコード生成や生成したコードを管理するプロンプトエンジニア/アセンブリエンジニア?\n<ul>\n<li>AI の癖を知り既存コードとの相性の良いプロンプトを管理するご機嫌伺い役</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>ここまでくると新規開発だけでなく既存システムの改修に関するコーディングはある程度代替できるのでさらに従来のプログラマの仕事は減らせるかもしれない</li>\n</ul>\n<h1>さらに先の話</h1>\n<ul>\n<li>さらに AI がプログラマの仕事を奪うにはどんなことが必要か\n<ul>\n<li>生成されたアプリケーションを実行管理し安定運用してくれるインフラをなんとかしてもらう必要がありそう\n<ul>\n<li>生成されたアプリケーションと想定するサービス品質などを指定すると自動でインフラを展開して運用までやってくれるような仕組みはできるか？</li>\n<li>サーバー・ネットワーク・DB などの知識を隠蔽できるか？</li>\n<li>トラブルシューティングは可能か？\n<ul>\n<li>この辺りができないとインフラ系のエンジニアの仕事はなくせなそう</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>アプリケーションが正しく動いているか保証できる必要がありそう\n<ul>\n<li>想定外の挙動はないかコードレビューする</li>\n<li>生成されたコードが想定通りの動作をしているかテストを書く</li>\n<li>生成されたコードが想定通りの動作をしているか動作確認を行う</li>\n<li>誤作動した時にストップできる\n<ul>\n<li>この辺りを担保できないと品質保証系のエンジニアの仕事はなくせなそう</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>その他仕事に関してはどうか？\n<ul>\n<li>他の役職に関しては詳しくないので何もいえない\n<ul>\n<li>というか自分の理解が浅いかもしれない職に関して簡単に奪われる職として挙げるのは憚られる</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>雑多な話</h1>\n<h2>生成されるコード</h2>\n<ul>\n<li>AI が生成するコードは既存のプログラミング言語で書かれたコードである必要はあるのか\n<ul>\n<li>コード片を人間が読まなくても良いレベルのクオリティなら既存の言語で吐き出す意味はないのでは\n<ul>\n<li>トラブルシューティングしづらそう</li>\n<li>過去の資産(GitHub 上のコードとか)を利用するなら既存のプログラミング言語の方が吐き出しやすそうではある</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>AI が吐き出しやすいようなコードを書くという価値観が新たにコーディング規約に追加されたりするかも</li>\n<li>そもそも実行バイナリを吐き出すだけではダメか？\n<ul>\n<li>実行バイナリをブラックボックステストであとは QA エンジニアが検証するだけのお仕事で良いのでは\n<ul>\n<li>とはいえトラブルシューティングしづらそうなのはキツいか</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>開発体験</h2>\n<ul>\n<li>開発体験(DX)の向上は必要か？\n<ul>\n<li>AI が大方のコード生成をしてくれるなら開発体験の向上にコストをかける必要はあるのか</li>\n<li>プログラマがコードに手を入れなくても良いなら lint とか formatter とか型とかもいらないのでは</li>\n</ul>\n</li>\n<li>プログラミング言語やフレームワークの選定はどう変わるか？\n<ul>\n<li>AI が一番精度良く吐き出せる言語が人気になるか</li>\n<li>ただまぁこれは今と変わらず要件次第になりそうではあるな</li>\n</ul>\n</li>\n</ul>\n<h2>プログラマの仕事</h2>\n<ul>\n<li>プログラマの仕事はどう変わるか\n<ul>\n<li>コードを書く比重が減り、コード片を生成する作業とシステムを組み上げる作業に比重が移りそう</li>\n<li>要件を分解しシステムを構成するコード片を生成するためのプロンプト作成作業が大量に発生しそう</li>\n<li>より必要になる能力\n<ul>\n<li>業務知識への明るさ</li>\n<li>調整能力(コミュニケーション力含め)</li>\n<li>要件の分解とそのそれぞれへの解決策を文章化する能力</li>\n<li><strong>システム全体</strong>の設計力</li>\n</ul>\n</li>\n<li>今も似たようなことをやってるはずだし必要な能力は変わらなそう</li>\n<li>コード化する部分がめちゃくちゃ爆速になるだけか？</li>\n</ul>\n</li>\n<li>フロントエンドエンジニアとかバックエンドエンジニアみたいな職域の境はなくなり、システム全体を設計して形にできる全部できる強いフルスタックな人が 1 人いればアプリケーション開発には十分というチーム構成になる可能性はあるかも</li>\n<li>システムの安定性を向上させたり保証する仕事の重要性が増しそう\n<ul>\n<li>要は<strong>AI の尻拭い</strong>\n<ul>\n<li>テストや QA を手厚くやって AI の生成したコードの穴を塞ぐ仕事</li>\n<li>コードレビューの仕事</li>\n</ul>\n</li>\n<li>QA 用 AI が出てくる可能性もあるが、その AI の QA を誰がやるのか？とかその AI は業務依存の実装になりそうなので維持管理は内製になりそう\n<ul>\n<li>AI より安いマンパワーを使った方がコスパ良いとかありそう</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>インフラ周りは構築はまだしも運用を完全に AI に代替させることで仕事を奪わせるのは難しそうに感じる、というか想像できない\n<ul>\n<li>ただ自社で DC 持ってるとかよっぽど特殊な要件のアプリケーションでなければクラウドベンダが良い感じのソリューションを出してきそうではある。昔に比べたら今でも十分インフラは深い知識なくてもある程度構築運用できるし。</li>\n</ul>\n</li>\n<li>責任を取ること\n<ul>\n<li>AI のミスの尻拭いは人間がやる</li>\n</ul>\n</li>\n</ul>\n<h2>完全に未知の概念に対応できるか</h2>\n<ul>\n<li>「イスカルテンダ王国のスルマオン暦のランフォイを求めるコード」みたいな未知の概念は AI に正しく対応できない(はず)</li>\n<li>AI が知らないものは人間が頑張るしかない</li>\n</ul>\n<h2>AI の学習ソースはどうなるのか</h2>\n<ul>\n<li>現状は GitHub やインターネット上のコードを学習してモデルを作ってると思うが、近い将来学習ソースが枯渇するという話がある</li>\n<li>将棋 AI は将棋 AI の生成した棋譜をさらに学習したりしているが、AI が生成したプログラミングのコードをさらに学習したりすれば解決するか？\n<ul>\n<li>将棋における<a href=\"http://wdoor.c.u-tokyo.ac.jp/shogi/floodgate.html\">floodgate</a>みたいな AI が作ったソースコードが実行されたり共有されたりするものが生まれるか？</li>\n</ul>\n</li>\n</ul>\n<h2>信頼性</h2>\n<ul>\n<li>AI が生成したコードをどこまで信頼できるか\n<ul>\n<li>例えばある手術に使われる機器のソフトウェアが一切人間の手が入っていない AI による自動生成コードで作られているとして、自分の娘がその機器で手術を受けると知ったら、今の AI のレベルなら 100%手術をやめさせると思う</li>\n<li>その信頼性を<strong>担保するための仕事</strong>(コードを人間が書くべきといっているわけではない)はしばらくは人間の仕事になりそう</li>\n<li>特に人の営みと高度に接続する必要がある場面では避けられないように思う\n<ul>\n<li>AI にはパーソナリティや家族のような守るべきものが(現時点では)ないという点がある種の弱点(利点)な気がする</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>AI は人との営みの中で何か重要なことを行うためには責任感が足りなすぎる\n<ul>\n<li>失敗しましたごめんな！で済まない場面への対応を整備する必要がありそう</li>\n<li>そうなると責任は開発(会社|者)が取るしかない。AI の尻拭いは人間がやる。</li>\n</ul>\n</li>\n<li>ある程度無責任でも良い場面には使えるが強く責任が伴う場面では、失敗した場合のケアや予防策を構築する必要がある</li>\n</ul>\n<h2>シンギュラリティ</h2>\n<ul>\n<li>AI が考え、AI が解決案を生み出し、また AI が問題を見つけ、AI が解決を試みるみたいなシンギュラリティ的な世界は一部の分野ではもうすぐあり得そう</li>\n<li>社会の中でも広く適用されるためには失敗の責任を自分で取れる、自分で尻拭いできる能力が AI に生まれたら世界は変わりそう。まだまだ SF っぽいだいぶ先の話な気もする。</li>\n<li>プログラマはAIの失敗の尻拭いをするために謝罪の練習をしておくと良さそう(?)</li>\n</ul>\n<h1>[追記] コード生成ではなくシステム生成できるレベル</h1>\n<ul>\n<li>昨夜もう少しちゃんと考えてみたが、そもそもコード生成というのをやめてシステム全体を生成して展開するところまで一気通貫でやってしまえるならどうか\n<ul>\n<li>例えば仕様書とシステム構成をアップロードしたらアプリケーションコードが生成されインフラが構築され一気にAWSか何かに展開される感じ\n<ul>\n<li>生成されたシステムをブラックボックスでテストして振る舞いなど問題なければOKみたいな。</li>\n<li>これで十分な案件はかなりあるのでは。</li>\n</ul>\n</li>\n<li>これなら新規開発に関してはもうコーディングが完全にいらないしインフラ周りの仕事も消える</li>\n<li>昨日書いた時はどのみち既存システムの改修とかは既存データをどうするかとか既存インフラとのつなぎ合わせとか調整の関係で大変じゃないかと思っていたが、そもそも全て改修時にスクラップ&#x26;ビルドすれば良いなと思った\n<ul>\n<li>アプリケーションコードもインフラ側も全部都度作り直す</li>\n<li>そうなると既存データとどう整合性を保つかだけが問題になる\n<ul>\n<li>であればここだけ人間が頑張れば良いのでは...</li>\n<li>というかここまでできるならデータに関してもAI側でやってくれそう</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>もうこの段階まで来ると変更容易性だとか<strong>保守性に関する概念すら全て過去の遺物</strong></li>\n<li>あとは品質管理だけどうするかだけど、これもテストと品質水準をまとめてAIに提出し検証してもらう感じで良いのかも。\n<ul>\n<li>ブコメなどでも書かれていたが確かにここまでくるともう人間が把握できる規模ではないかもだし、どのみち機械に頼らないといけない部分も出てきそう。</li>\n<li>このへんも時間の問題なのかもしれないな...</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1>[追記] システム開発がなくなる世界線</h1>\n<ul>\n<li>ここまで簡単にシステム開発を適用できるようになると、そもそも世の中的に必要なソフトウェアが全ての業界に行き渡りあらかた開発され切ってしまったという世界線もあるか</li>\n<li>ある意味今でいうところの白物家電みたいな。</li>\n<li>そうなるとシステム開発という業種自体かなり下火になりそう</li>\n</ul>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/comments","created_at":"2022-12-03T08:28:02Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/26","id":1473845983,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5X2Rrf","number":26,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/timeline","title":"どのようにしてプログラマはAIに仕事を奪われていくかの妄想","updated_at":"2022-12-04T01:15:33Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},"issueComments":[],"pickupArticles":[{"body":"※**専門家ではないので、以下の文章はn=1の経験談として読んでください。**\r\n\r\n[腰痛エンジニアを支える技術](https://zenn.dev/ryo_kawamata/articles/a596e3325ba865)や[手が痺れるエンジニアを支える技術](https://zenn.dev/seya/articles/35cd238d79b6e0)を読んだ。\r\n\r\n上の記事の腰痛や神経痛をはじめ、肩こり・頭痛・神経痛・腹痛など**すぐに死ぬわけではないがQoLに結構な支障をきたす慢性の疾患**を抱えたエンジニアというのは回りを見渡しても割と多いと感じる。自分の場合はそれが**痔**である。\r\n\r\n下痢や便秘の際に切れ痔になった経験があるという人は結構多い。だから「あー痔か、自分もなったことあるよ」みたいな軽い反応をもらうのだけどそういう人の痔は一過性のもので、いわば転んで擦りむいたくらいのレベル。\r\n\r\n自分の場合は慢性的な外痔核である。外痔核とは何かという説明をする前にそもそも痔にはいくつか種類があるので簡単に説明しておく。\r\n\r\n# 痔の種類\r\n## 裂肛\r\nいわゆる切れ痔である。便秘で便が固くなってしまった場合や下痢でゆるくなり便の排出速度が上がり切れてしまうなどが主な原因。通常は一般的な切り傷同様数日で直るが、何度も繰り返していると潰瘍ができたり傷が直る際に肛門が狭くなっていく肛門狭窄という状態になる。この段階までくると排便時は毎回切れ痔が起きるようになってしまう。\r\n\r\n## 痔核\r\nいわゆるいぼ痔である。肛門に強い力がかかるとうっ血が発生し、手に血豆ができるような感じでイボができる。日常生活における肛門に負荷をかかる全ての場面で発生する可能性がある。痔核の中でも肛門の中にできる内痔核と外痔核がありそれぞれ症状や対処法は異なる。\r\n\r\n### 内痔核\r\n内痔核は肛門の中にイボができるタイプの痔核である。段階がレベル1~4まであり1~2ではそれほど生活に支障はないが3~4レベルになると手術が推奨される。1~2レベルの内側の痔は排便時に血は出たりイボが露出したりするが痛みはそれほどないが、それ以上のレベルになると下着に鮮血が見られるような状態になる。ここまでくると手術だ。\r\n\r\n### 外痔核\r\n外痔核は肛門の外にイボができるタイプの痔核である。この痔の特徴はなんと言っても**とにかく痛いこと**である。肛門の中とは違い、肛門の外側は神経が集中しているのでイボに何かが触れると激痛が走る。強めの口内炎が肛門にできたと想像してほしい。排便時に100%の確率でそれが刺激されるのでどう頑張っても痛みから逃れられない。排便はほぼ毎日あるので毎日の排便が恐怖になる。\r\n\r\n### 痔ろう\r\n肛門内部が炎症を起こし化膿、その膿を排出するための膿の管が肛門に残った状態のこと。激しい痛みや発熱を伴う。どの段階であれ、痔ろうとなればほぼ手術になる。\r\n\r\n# 対処法\r\n痔ろう以外はどの痔の場合も酷くない場合は基本的に保存療法か外来処置(飲み薬や塗り薬など)で済むはず。一方で慢性化している場合は手術となることが多い。最悪の場合は人工肛門になることもあるし、そもそも大腸などに腫瘍があったりして別の病気の場合もある。\r\n\r\nとにかく早めの受診によりあらゆる悲劇は避けられるので自分で判断せず早めに近くの肛門科へ行くのが最適解だ。\r\n\r\n# 自分の話\r\nここまでは痔の一般的な話だが、ここからは自分の経験の話をする。\r\n\r\n先述した通り自分の場合は外痔核だった。月に数回、肛門に力を入れた瞬間激痛が走る日が来て、それを境に1~2週間ほどは毎日排便時にお尻を針で刺されたような感じになる。辛いは辛いのだけど、とはいえこれは日常生活の工夫により少し快方することもあるのでのらりくらりと病院へ行かず10年ほど経ってしまっていた。\r\n\r\nいよいよ厳しいな...と感じてきて病院へ。そこでレベル2程度の外痔核とレベル1程度の内痔核と診断された。内側の痔に関しては病院で検査を受けて発覚したくらいのレベルで自覚もなかった程度。出血もない。\r\n\r\nただどうしても外痔核が辛いなら痔核の部分を切開して取る、内痔核なら内痔核硬化療法(ジオン注射)を勧められたが、まだ必須というほどでもないという。様子見でも今は大丈夫とのことだったので一旦は保留にして1年ほど時間が経ち、今に至るという感じ。\r\n\r\nなのでいまだに痔と共に生きるという生活をしている。(余談だが先生自体も痔持ちで、数年前に手術したが時間が経ってまた痔になっちゃった...と言ってて大変そうだった)。\r\n\r\n診察の中で、そもそも自分は何故外痔核ができやすいのか？を先生といろいろ振り返りながら話してみて気づいたのは**排便時のいきみの強さ**である。\r\n\r\n体質や食生活の問題で固い便になりやすかったこと、元々スポーツをやっていてある程度筋肉があったこと、決まった時間に必ず排便しようとすること、などが重なったことで、必要以上に強くいきんで硬めの便を無理してでも排出しようという習慣ができてしまっていた。これは幼い頃からの習慣だが誰にも注意されなかったし、自分でも悪いことだと気づかなかった。なんか気づかずにやっていた悪習が自然と痔を招いてしまっていたのだ。\r\n\r\n# 痔を悪化させないためにやってること\r\n以下は主に痔核を悪化させないためにやっていることを書く。\r\n\r\n## 肛門に力をかけない\r\n外痔核に関してはとにかく肛門に過度な力をかけないことが一番重要。なので排便時は無理して出すために腹筋に力を入れたりしない。ちゃんと便意を待て。腹筋に力を入れたりしなくても便は出る。すぐ出ないからといって急がない。\r\n\r\nその他にもスクワットなどの筋トレで踏ん張る時や重いものを持つ時なども肛門に力がかかり続けないように気を付ける。肛門への負荷を気をつけるだけでもかなり良くなる。\r\n\r\n肛門に力をかけずに直腸から便を送り出すような意識で排便する訓練(ヨガに近い)もやっていて、これはコツが掴めるととても楽に排便ができるようになる。言葉では上手く伝えられないが、これができないと手術してもまた下手くそな排便により痔が再発する。排便のフォーム矯正と思ってやった。\r\n\r\n## 水分を十分に摂る\r\n固い便になるとどうしても排便に力が必要になってしまう。これを防ぐために水分は十分に摂った方が安全。\r\n\r\n自分の場合は500mlのタンブラーでぬるま湯を最低3杯~4杯は飲むようにしている。しかもこまめに摂るようにしている。これはがぶ飲みしても人間が一度に吸収できる量には限界があるので。ただしトイレの頻度が多くなってしまうのでなかなか難しいという人もいるかも。\r\n\r\n## 食事\r\n食事に関しては人それぞれだろうなという感じ。よく言われるのは3食バランスよくしっかり食べる方が良いくらいな感じで、特に野菜がいいとか発酵食品がいいみたいなものはない。\r\n\r\nが、自分がいろいろ試してみた結果だけ参考までに書いておく。これが正解!とかいうものはない。\r\n\r\n- 飯を食べる前にまず多めに水を飲む\r\n  - 飲む場合と飲まない場合で翌日の便の硬さが変わるっぽい\r\n- お米を最低1合は食べる\r\n  - 米を食べる量が少ないと排便サイクルが狂う。便も何故か硬くなる。\r\n- 納豆・ヨーグルト・キムチを毎日適度に摂る\r\n  - 腸がよく動いてるな〜と感じるようになる。便秘予防にはなりそう。単純に発酵食品が好きというのもあるので楽しみ半分で続けている。\r\n- アルコールを摂取しない\r\n  - 酒を飲むと翌日の便が硬くなるっぽかったのでやめた。\r\n- 寝る3時間前までに食事は済ませる\r\n  - 寝る前まで何か食べてると翌日変なタイミングで便意がきたりするようになる。変なタイミングだと都合によっては我慢しないといけないことにもなりかねない。我慢すると便が固くなっていく原因になるのでなるべく避けている。\r\n\r\n食事に関してはこれくらい。あとは外食などでも好きなものを好きなように食っている。\r\n\r\n## 睡眠\r\n夜更かしすればするほど内臓の調子がおかしくなる。大抵排便サイクルが狂うし便がいつもと違う感じになる。そもそも一般的に考えても寝るべき時間に寝た方が内臓や神経系にも良いはずなので無理せず寝ている。\r\n\r\n## 毎日湯船に浸かる\r\n下半身の冷えは血流を悪くして痔ができやすくなる元なので毎日湯船に浸かるようになった。これは病院の先生にも勧められたのでやっている。それまでは湯船を洗うのも湯を準備するのもとにかく面倒だからシャワーで済ませることが多かったが今は毎日湯船で体の芯まで温めるようになった。\r\n\r\n痔が辛い時も温かいお湯に使っていると血行が良くなり、いくらか治りが早くなるので痔持ちの人は全員湯船に浸かった方が良い。\r\n\r\n## 座り続けない、またはスタンディングデスク\r\n上記の生活習慣的な対策は前提として、それ以外にできることとして座りすぎないようにするというのがある。エンジニアは職業柄椅子に座り続けがちだが、それは上述の「肛門に負荷をかける」につながるので良くない。\r\n\r\n自分は適当に60分おきにiPhoneでタイマーをセットして時間が来たら立ち上がり少しフラフラしてまた座る、といった習慣で作業していた。これはこれで良い。\r\n\r\nが、外痔核真っ只中の時はとにかく座ってるだけで痛いことがある。そういう時は立っていた方が楽。なのでそういう時はスタンディングデスクで作業している。\r\n\r\n[電動昇降デスク](https://flexispot.jp/e7-set.html)というスタンディングデスク専用の机があったりするので検討はしたがちょっと試してみるか〜と買うには高いしデカい。要らなくなった時の処理が面倒。\r\n\r\nそこで自宅にあったデスクとちゃぶ台で下のようなハリボテスタンディングデスクを作って使っている(もうかれこれ半年以上これで仕事してる)。\r\n\r\n![https://user-images.githubusercontent.com/1421093/180774838-28eb541b-9d6b-4b9b-8998-92d54f935d7a.JPG](https://user-images.githubusercontent.com/1421093/180774838-28eb541b-9d6b-4b9b-8998-92d54f935d7a.JPG)\r\n\r\nポイントは下のクッション部分。これ無しで床に立って作業するとすぐ足の裏が痛くて終わる。たまたま普段使いしていた座椅子がちょうど良い高さだったのでこれでなんとかやれている。\r\n\r\n座椅子が微妙という時は[リカバリーサンダル](https://amzn.to/3RCOp9I)というのをスリッパがわりにして履いて作業するのも良かった。看護師さんなど長時間立ち仕事をしてる人たちが履いているらしい。\r\n\r\n![IMG_3954_res](https://user-images.githubusercontent.com/1421093/216818045-1deb3b26-24a0-4db1-a26c-018cc15a6d42.JPG)\r\n\r\n基本的に1時間~２時間くらい立ち続けて、少し座って休んで、みたいな感じで1日仕事をしている。最初のうちは30分も作業してるとキツくなってくるがこれは慣れ。続けてれば慣れてくる。\r\n\r\n座らなくなることでお尻への負荷だけでなく腰への負荷も体感的に減ってる。**変な姿勢で座るより変な姿勢で立つ方が難しい**ので姿勢の維持の観点では個人的には立ってる方が楽だ。\r\n\r\nただし立ち続けると足が痛くなってくるのでそれは適度に休みを入れるしかない。あと、デスクの高さの設定をミスると肩が凝る。高さの微調整を細かくやりたいなら先程の挙げたちゃんとした電動昇降デスクを買った方が良さそう。\r\n\r\n# 現在\r\n病院に通って以降色々やったのもあって、最近はもう少なくとも3~4ヶ月は外痔核で苦しんでいない。上記の悪化させないための諸々を今後も続けていく必要はありそうだけど、基本的には硬い便を避けつつ排便時に気をつけることさえできればあとはなんとかなりそう。\r\n\r\nまた以前のような厳しい状態になったら本格的に手術を検討してみようかねとも先生とは話している。とはいえ手術せずになんとか終えられたら良いな…という感じ。内痔核の手術なら術後の痛みは少なめだからすぐやってもいいけど、外痔核の術後は出産を経験した人でも辛かったと聞いたのでめちゃくちゃ怖いのが正直なところ...。\r\n\r\nとはいえ痔核は痔の中でも手術すれば治る病気の一つなので、金と時間と気合いさえあればなんとかできる(はず)。色々めんどくさい人は(痔核なら)手術するのが多分早いんだろう。\r\n\r\n# おわりに\r\n痔の\"エンジニア\"を支える技術と題して書き始めたがエンジニア的な要素はスタンディングデスクくらいで、その他は痔一般の知識と痔主の経験談になってしまったので申し訳ない(のでZennではなく自分のブログに書いた)。\r\n\r\n排便は食事と同じくほぼ避けることができないし肛門以外の場所で代替することもできない。肛門はとてもクリティカルな場所だからこそ健康に保つための最低限の知識は全員持っておいて損はない。\r\n\r\n痔は身近な病気であり軽んじられがちだが、悪化させるとQoLが駄々下がりするはめになる。[何年も痔に苦しんでいる - 怠惰を求めて勤勉に行き着く](https://fushiroyama.hatenablog.com/entry/2022/11/20/063019)では慢性的な切れ痔に悩まされているエンジニアの話が書いてある。痔核の場合は手術(と術後の結構な痛み)を耐えられればある程度の期間は良くなるようだが悪化した切れ痔の場合はより大変そうだ。痔ろうに関しては言わずもがな。\r\n\r\n痔に関してはどの状況でもとりあえず病院に行くのがいつでも最適解なので気になったら恥ずかしがらずにすぐ行け。\r\n\r\n# リンク\r\n- [痔の総合情報サイト《痔-web》](https://www.iwadare.jp/G-WEB/)\r\n  - 痔主の聖典","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/comments","created_at":"2023-02-05T13:12:02Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/40","id":1571425666,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5dqg2C","number":40,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40/timeline","title":"痔のエンジニアを支える技術","updated_at":"2023-02-05T15:05:46Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/40","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"- 先日「育児など家庭の色々があって自分の時間が確保できなくなった。技術力を高めるための勉強ができなくて不安。」みたいな話を聞いた\r\n- この悩みの直接的な解決方法としては先人の様々な体験談および対策みたいなものが世に出回っているからご家庭の状況に応じて参照すればいい思う\r\n  - [子育てと開発を両立するコツは「無理をしないこと」。パパ／ママエンジニアの働き方とは](https://engineer-lab.findy-code.io/ikuji_findy)\r\n  - [子育てを支える技術 ─ フルスタックお父さんとエンジニアとしての成長を両立させるには](https://eh-career.com/engineerhub/entry/2018/05/15/110000)\r\n  - [ITエンジニアと子育てと勉強と](https://zenn.dev/akinari_ueda/articles/3ec81c9605e732cb7912)\r\n- それよりも「技術力を高めるための勉強ができなくて不安」という点が個人的には気になった\r\n- 技術力とは何か？技術力が高くないとなぜ不安なのか？みたいな話\r\n- 技術力は特に明確な定義があるわけではない\r\n  - 例えば著名なOSSにコミットしているとか低レイヤーのプロトコルやインフラをバリバリ実装してるとか競プロで上位勢だとか、挙げ始めたらキリがなく、それっぽい何かはたくさん挙げられそう\r\n  - つまるところ技術力というのはその人の理想次第なのではないか\r\n- 技術力が無いとなぜ不安か\r\n  - 「**今職を失うのではないかという不安**」と「**将来職を失うのではないかという不安**」がある\r\n  - 前者に関しては\r\n    - 技術力が無いと仕事がこなせない => 役立たずとしてクビになる => 職を失う => 生きていく金がない => 不安、というロジック？\r\n  - 後者に関しては\r\n    - 技術力が無いと職を得られない => 生きていく金がない => 不安、というロジック？\r\n  - どちらにしても技術力の高低によって仕事をし続けられるかどうかが決まるという前提がありそう\r\n- 技術力の高さと失職の可能性\r\n  - 確かに技術力が高ければ職を得やすそうだしクビにもなりにくいのは確か\r\n  - しかし技術力の有り無しは0か1の離散的な話ではなく、0と1の間に無限のグラデーションがあるはず\r\n    - 技術力が0.2の人もいれば0.5の人もいるし0.8の人もいる\r\n    - どれだけの力があれば失職の可能性に怯えずに済むのか。はっきりわからない部分が多い。\r\n      - 企業ごとに技術力を0.2しか求められない会社もあるし0.8求める会社もある\r\n      - 自分の所属する企業はどれくらいを求めているのか、自分の将来働いているであろう企業群はどの程度を求めているのだろうか\r\n- 技術的成長はどれほど必要か？仕事が出来るだけの技術力があれば良いのでは？\r\n  - 仕事を最低限こなせるだけの技術力があれば仕事を失わないのではないか\r\n    - 少なくとも日本だとそんな簡単に解雇しづらいし\r\n- 業務外の技術について\r\n  - 現状の仕事で必要な範囲を超えた技術を学ぶことはどれだけ重要か\r\n    - 例えばサーバーサイドエンジニアがUnityを学ぶのはその人の不安の解消に役立つのかとか\r\n  - 不安の解消という観点では今の仕事の延長線上にある未知の技術に手を出す以外の学習は遠回り感があるのでは？\r\n- 仕事で必要なのは技術力ではなく仕事力ではないか\r\n  - エンジニアは技術職と言われることも多いし、仕事を遂行する能力=技術力というような考えをしがち\r\n  - しかし仕事を遂行する力、すなわち仕事力は技術力と一致しない(もちろんガチTech企業ならほぼ一致することもあるが)\r\n  - これは別に技術力を軽んじている訳ではなくソフトスキルを礼賛したいわけでも無く、仕事に必要な技術力は高々仕事の範囲でしかないという意味\r\n  - その仕事特有のドメイン知識や問題の定義・解決能力、チームを巻き込む力など仕事には仕事をこなすために必要なスキルがある\r\n  - 仕事とは**ある目標を達成すること**なので重要なのは技術力ではなく目標遂行能力だ\r\n    - 自分はこの能力を**仕事力**と定義してる\r\n  - 技術力というのはその中で必要になるピースの一つである。だからまずは今の仕事にどういう技術力がどのくらい必要か見極めて必要な分だけ学べば良い\r\n- そう考えると先の若者のように「業務外で勉強する時間がなくて不安」みたいな話についてはとりあえず下記の心構えで上から順に臨むのが良さそうに思った\r\n  - 仕事に取り組む上で必要な自分に足りていない技術力を定義すること。まずこれが重要。\r\n  - そしてその技術の学習を業務内で出来る限り行う\r\n    - 業務に関係のある技術なのでお賃金をもらいながら胸を張ってやるべき\r\n  - それでもどうしても足りないのであれば仕方なく業務外で頑張る\r\n    - ここに占める割合があまりにも多い場合は、上司のタスク割り当てが間違ってる可能性があるのでまず相談する\r\n      - 自分の能力不足の場合、気合いでやる。しかし気合いで血反吐を吐きながらやるのは最終手段。\r\n- 巷のスゴいエンジニアと自分を比べたり膨大で深遠な技術力という怪物を倒そうと頑張るのではなく、まずは自分に必要な最低限のサイズの目標に切り分けてそれだけを相手にするように心がける。まずは不安に囚われず余裕を持てるようになるところを目指す。\r\n- **今職を失うのではないかという不安**に関してはこんな感じ\r\n- では**将来職を失うのではないかという不安**に関してはどうか\r\n  - 業務内の時間で仕事にコミットすることで得た知識がそのまま将来の不安を軽減させてくれる可能性もあるし、余裕が生まれたことで業務外でできるようになる好き勝手な技術探求で得た知見が将来の不安を軽減させてくれる可能性もある\r\n  - どのみち将来のことはどうなるかわからない\r\n    - 10年前のインフラ・サーバーサイド・フロントエンド・各種技術の流行りやスタンダードを思い浮かべてほしい。何が消えて何が残って何が新たに生まれるかはわからんすぎる(ある程度の方向性は予測できるにせよ)。\r\n    - そういう意味ではハードウェアやOSやネットワークのような比較的低レイヤーな基礎技術を学ぶのが良いとかはあるかも\r\n      - だからといってその辺の知識が将来の失職を予防してくれるかも不明。その時必要となる仕事力がないと結局は不安は拭えない。\r\n- 第一は今コミット出来ることにコミット。そして遠い将来に関しては直感を頼りに逐一betしながら祈る。\r\n- その他色々\r\n  - 将来については歳を重ねて技術力どころではなくなり健康力みたいなものも必要そう。健康への投資も重要っぽい。\r\n    - 目や腰、その他生活習慣病などのケアに追われている中年エンジニアが自分のTLにも散見されるようになってきた(TLの老化...)。\r\n  - 未婚・DINKsなど子育てが無い人は**将来職を失うのではないかという不安**への投資がしやすいので余裕があるか？\r\n    - 先に書いた通り将来に関しては祈り要素もあるので皆等しくほんのり不安なのは同じ\r\n    - 置かれた立場によってそれぞれの不安要素はあるものだし、まして子の有無によって発生するもの/失っているものを比較するのは語り得ないものなので踏み込むべきではない\r\n  - こういう人生や日常の悩みは現状把握と分解と整理が基本なので一人で抱え込まずに早めに適当に文章にするなり人に吐き出すなりすると良い。当事者だけではるつぼに嵌ってしまう。\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/comments","created_at":"2022-12-20T12:17:23Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/28","id":1504471609,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5ZrGo5","number":28,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/timeline","title":"仕事力と技術力と不安に関する雑文","updated_at":"2022-12-21T01:21:04Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"パソコンが使えると言った場合、どのレベルまでのスキルを持っていれば使えると言えるのだろうか。ブラウザを開いてググったりできれば使えると言えるかもしれないし、もしかすると MOS 関連の資格を持っていないと使えると言えないかもしれない。日常的に PC を使ってブログを書いたりゲームを遊んでいる人は自分はパソコンが使える、と言うだろう。まぁこんな感じでパソコンが使えるといえるかどうかの基準は結構曖昧なものである。\r\n\r\nしかしながらもし自分が自社の採用担当で「最低限パソコンが使える人を採ってほしい」とクソアバウトな指令を与えられた場合には自分なりに何かしらの基準を設けなければいけない。採用した人材がどの部門で働くのかによって必要とされるスキルは違うだろうからまずはどこの部署に配属される人材なのかを整理するところから始めるだろうか。そして事務職系だったり営業だったり社内オフィス系だったりとにかく何かしらの部署であることが判明し、具体的に必要なスキルなんかがわかるはずだ。ところが今回は総合職というこれまた曖昧な人材の採用を行うということが分かった。どうやら上司から言われた「最低限パソコンが使える人を採ってほしい」という曖昧な指令を満たす人材をどうにかしてふるいにかけるしかなさそうだ。\r\n\r\nこんなシチュエーションがあった場合(実際はこんなことないと思うけど)に「最低限パソコンが使える人」をふるいにかける試験について考えてみた。\r\n\r\nそれが下記である(通称: 所在地抽出試験)。\r\n\r\n「ここに大小様々な企業のホームページの URL が 20 社分ある。これらの URL を頼りにして各企業の所在地の住所をエクセルもしくは Google SpreadSheet でまとめて提出してください。」\r\n\r\nこれだけだと、一見誰でも解ける簡単なタスクであると思うかもしれない。しかし次の１文を加えることでこのタスクの難易度は一気に上がる。\r\n\r\n「尚、制限時間は 25 分です。」\r\n\r\n25 分かけて 20 社分の HP の URL から所在地を調べてエクセルにまとめる。エクセルにまとめる諸準備などの時間も含めると 1 社あたりに割ける時間は約 1 分である。\r\n\r\n基本的なタイピング速度・各種ショートカットコマンドの使い方・ブラウザの使い方・Web サイトの回遊力・表計算ソフトの使い方など当たり前のことでまごつくような人は 1 社 1 分だとおそらく間に合わない。\r\n\r\n「URL にアクセスして住所が書いてある部分を見つけてコピペすればいいだけだろ？」と思うかもしれないが、実は企業の HP の所在地がどこに書いてあるか見つけるのは案外難しい。なぜかというと HP のどこに所在地を書くのか？やどのような形式で住所を書くのか？などに決まったルールはないからだ。ある企業は企業概要というメニューの先の所在地という欄に記載しているかもしれないし、ある企業はトップページのフッターに記載しているかもしれない。たどり着いた HP から素早く情報を吸い出せるかどうかは日頃からどれだけネットサーフィンをしているかという地力が試される。cmd+f でサイトの全文検索ができることすら知らない人も意外と多い。\r\n\r\n「そうはいってもこのくらいのネットサーフィン力は自分にはあるよ。1 社あたり 1 分なんて難しくないっすわ。」というネット常用民もいるだろう。ところが実際やってみると中々難しいことがわかる。というのも例えばある企業の HP ではサイト全体のコピペが許可されていないという場合がある。その際は単純にコピペすることができないだろう。コピペ以外の術を知らなければ住所を丁寧に手打ちで入力する羽目になる(短い場合はそれでも良いが)。回避方法を知っている人は cmd+option+i などで開発者ツールを開いて HTML から直接コピーすることができる。だが開発者ツールを弄れる人はどれくらいいるだろうか。\r\n\r\n「俺はプログラマーだ。こんなブルシットジョブなんてプログラミングで駆逐してやるぜ。」という考えが浮かんでくる人もいるかもしれないがそれも良案ではない。というのもまず、先にも述べた通り所在地の記載方法にルールはないのでプログラム化するのが面倒だ(無理ではない)。所在地の記載について、そのルールを各社のサイトにアクセスし学んでいるくらいならその都度コピペしてしまった方が早い。もしこれが 200 社とか 2000 社に対して同様のタスクをこなさないといけないのであればコード化してしまった方がトータルの時間は短くなるだろうが 20 社なら手動でやった方が多分早い。それに例えばある企業のサイトでは所在地部分が画像で出来ているかもしれない。その場合は単純なテキストマイニングでは抽出できないので OCR などを使う必要がある。20 社程度であればプログラミングで解決するのはやや大袈裟であろう。\r\n\r\n他にも、とある HP ではそもそも所在地の記載がなかったりする。そういったサイトはエクセルにどう記載すればいいのだろうか？と受験者を戸惑わせるだろう。そういうサイトに対してどう対処するかもある意味試験の一部である。その企業の部分だけ空欄にしておくのもありだし、所在地不明と書いておいてくれるならいくらか親切かもしれない。\r\n\r\nそもそも URL にアクセスせずに Google で検索してしまった方が早い、みたいな可能性もある。これもまたパソコンが使える人ならではの技法なのでアリだ。しかし HP に載っている所在地と異なる場合があるので結局 HP の該当箇所をチェックする必要はある。所在地が本社と支店で複数あるパターンなどは本社ではなく支店の方が検索結果に出てくる場合もあるので注意が必要だ。\r\n\r\nこのように企業の所在地をエクセルでまとめるだけの簡単なお仕事であってもハマりどころがそれなりにあり、ある程度のパソコンの習熟度が必要になる。テスト時間は 20~30 分で済むので手軽にふるいにかける試験としては中々アリではないだろうか。\r\n\r\n今回は 20 社としたがこれを 10 社などに減らしてテスト時間を減らすのも良い。さらに「採用担当者に適宜疑問があれば質問して良いことにする」というルールを加えると、実際にその人が困難にぶつかった時にうまくヘルプを出せる人間なのか？みたいなこともわかるかもしれない。\r\n\r\n「パソコンが使えるかどうかの試験というよりはネットサーフィン力みたいなものしか測れないじゃろ！」という意見もありそうだが、この程度のことが出来ないのにさらに難しい各種ツールの使い方を効率よく学べるわけがない。最低限押さえておくべきパソコン力の土台みたいなスキルを持ち合わせているかチェックする試験としてはこれで十分だろう。\r\n\r\nちなみにこの試験には元ネタがある。今年の初めに某所の若者が所用でアニメスタジオの HP の URL(約 150 社分)から所在地を抜き出してエクセルにまとめるというタスクを何やらぶつぶつ言いながら作業をしていたのでそれを横から眺めていたところ、タブ移動や window 切り替えやコピペ作業をキーボードでやらずに全てマウスでぽちぽちやっていたり、サイト内検索を知らなかったなど基本的なことが意外と出来ていないことが判明した。ある程度整理されたサイトであっても目 grep で所在地を見つけ出すのは時間がかかるので cmd+f で\"所\"や\"〒\"で検索する術を覚え、一発で移動できることに感動したりしていた、というようなことがあった。\r\n\r\n似たような話だとある長い文章における重複箇所や語尾の変換などをメモ帳で一つ一つ修正していたのでテキストエディタ(その時は VSCode)を教えて一括変換や複数箇所同時修正などの方法を教えたところ驚愕されたというのもあった。IT 業界だとまぁ大体この辺は周知のスキルだと思うが、それ以外の業界ではまだまだ PC を使いこなせていないのかもなと思った次第。DX という言葉がバズワード化して久しいがそれ以前にこういう基本的な PC 作業の省力化スキルをみたいなものを広めるのも大切だな〜などと思うなどした。\r\n\r\n最後に例のアニメスタジオの HP の URL をまとめたものを置いておくので好きに使ってください。\r\n\r\n- [https://gist.github.com/YuheiNakasaka/638e2ea980a56a09c7122fe01d4c33e5](https://gist.github.com/YuheiNakasaka/638e2ea980a56a09c7122fe01d4c33e5)\r\n\r\nちなみに上場企業(2022 年)の URL 一覧と CSV をまとめてくれているサイトがあったのでこれも貼っておく。\r\n\r\n- [https://tachitechi.com/listed-company-url-summary-csv/](https://tachitechi.com/listed-company-url-summary-csv/)\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/comments","created_at":"2024-01-13T15:27:21Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/57","id":2080345150,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc57_4w-","number":57,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57/timeline","title":"パソコンを最低限使える人かチェックする試験","updated_at":"2024-01-13T15:27:21Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/57","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}}]},"__N_SSG":true}