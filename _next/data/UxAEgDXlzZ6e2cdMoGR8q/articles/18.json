{"pageProps":{"issue":{"body":"先日Juice=Juice(ハロプロ)と山崎あおいというシンガーソングライターとの対バンライブに行ってきた。ハロプロのアイドルと他ジャンルの歌手との対バンライブは中々珍しい。どういうファンが集まるのかなと少しワクワクしていたが、ほぼ普段の現場と変わらないハロオタだらけであった。\r\n\r\nハロオタといえば大体おじさんであるが、自分もその中の一人だ。だからなのかはわからないがおじさんには親近感がある。特にアイドル現場にいるおじさんはみんな幸せそうな顔をしていて好きだ。\r\n\r\n女性アイドルのライブに行ったことのない人は想像できないかもしれないが、アラフォー・アラフィフのおじさん達がめちゃくちゃニコニコで誰の目を気にすることもなくサイリウムを振ったり踊っていたりする。たまにステージで踊っているメンバーよりキレ良く振りコピをしてるおじさんがいたりするのを見るのも良い。皆同じ方向を向いてニコニコして幸せそうな顔をしている。\r\n\r\n街中や通勤電車で見かける勤労中のおじさん、中には疲弊してヘロヘロのおじさんも結構いる。彼らは大体みんな険しい顔をしていると思うんだけど、そういうおじさん達がアイドル現場では弾けんばかりの笑顔で楽しんでいるのでその姿を見ると嬉しくなる。\r\n\r\nおっさん同士の肩組みみたいな馴れ合いは別に好きではないけど、おじさんになると基本的にうっすら全方面から嫌われるし頼れるものが少なくなっていくからみんなで同じ方向を見て好き勝手楽しめる時間ってすごく貴重だよと思った。","bodyHTML":"<p>先日Juice=Juice(ハロプロ)と山崎あおいというシンガーソングライターとの対バンライブに行ってきた。ハロプロのアイドルと他ジャンルの歌手との対バンライブは中々珍しい。どういうファンが集まるのかなと少しワクワクしていたが、ほぼ普段の現場と変わらないハロオタだらけであった。</p>\n<p>ハロオタといえば大体おじさんであるが、自分もその中の一人だ。だからなのかはわからないがおじさんには親近感がある。特にアイドル現場にいるおじさんはみんな幸せそうな顔をしていて好きだ。</p>\n<p>女性アイドルのライブに行ったことのない人は想像できないかもしれないが、アラフォー・アラフィフのおじさん達がめちゃくちゃニコニコで誰の目を気にすることもなくサイリウムを振ったり踊っていたりする。たまにステージで踊っているメンバーよりキレ良く振りコピをしてるおじさんがいたりするのを見るのも良い。皆同じ方向を向いてニコニコして幸せそうな顔をしている。</p>\n<p>街中や通勤電車で見かける勤労中のおじさん、中には疲弊してヘロヘロのおじさんも結構いる。彼らは大体みんな険しい顔をしていると思うんだけど、そういうおじさん達がアイドル現場では弾けんばかりの笑顔で楽しんでいるのでその姿を見ると嬉しくなる。</p>\n<p>おっさん同士の肩組みみたいな馴れ合いは別に好きではないけど、おじさんになると基本的にうっすら全方面から嫌われるし頼れるものが少なくなっていくからみんなで同じ方向を見て好き勝手楽しめる時間ってすごく貴重だよと思った。</p>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/18/comments","created_at":"2022-08-18T11:51:14Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/18/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/18","id":1342987594,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/18/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5QDF1K","number":18,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/18/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/18/timeline","title":"楽しそうなおじさんを見るのが好き","updated_at":"2022-08-18T11:51:14Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/18","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},"issueComments":[],"pickupArticles":[{"body":"※以下、エンジニア=ウェブアプリケーションエンジニアとして書いています\r\n\r\n[エンジニアとして今の自分を形成した本を5冊紹介する](https://panda-program.com/posts/introduce-five-books)という記事を読み、自分だったらどの本を選ぶかなと考えてみた。\r\n\r\nこの記事を読んでみた感じ、名著が多いな〜という印象を受けた。対象読者に関しては、\r\n\r\n> 独学でプログラムを書き始めた人やエンジニアスクールを卒業したばかりの方というよりは、実務経験を1~3年くらい積んでいるけど次に何を学べば良いかわからず、自分でイマイチ伸び悩んでいると感じている人\r\n\r\nと著者も書いている通りちょっと実務経験のある人になっているので確かにそういう人達には丁度良さそうだなと思う。\r\n\r\n自分もこのブログの著者が書いているようないわゆる名著の部類に入る本をそういう時期にいくつか読んではいるが、それらはタメになった本ではあるものの\"今の自分を形成した\"とまではいえないよなーと思う。\r\n\r\n本というのは読むタイミングが大切だ。プログラミングを始めたての頃にClean Architectureを読んだ時の感想(ふーんとしかならなかった)と負債に塗れたプロジェクトをくぐり抜けた後に読んだClean Architectureへの感想では全く異なるはずである。\r\n\r\nまたいくら名著といっても時間と共に古くなってしまう考えや方法が出てきてしまう。技術書であればなおさらだ。よくこういう記事で挙げられる「UNIXという考え方」もその一つで、[名著「UNIXという考え方 - UNIX哲学」は本当に名著なのか？ 〜 著者のガンカーズは何者なのかとことん調べてみた](https://qiita.com/ko1nksm/items/f1800c6ff6dd649d7429)という記事ではこの本の今では古臭くなってしまっている箇所などを丁寧に検証してくれている。\r\n\r\n古くなってしまったからもうその本は読む必要がない、というわけではないからこそ名著であるというのもまた事実である。現代に至るまでの歴史の中で今を振り返るために、また未来を見据えるために重要なヒントをくれたりする。\r\n\r\nでは\"自分を形成した\"本とはどういう本なのか、それはこの道へのめり込むきっかけや感動を得た本ではないかなと思う。\r\n\r\nそれが結果的に名著と呼ばれる本であることも多いが自分にとってはどちらかというとスキルが圧倒的に未熟な頃に読んだ本、いわゆる入門書のようなものがそれにあたるのではないかと考えた。今風にいうと\"駆け出しエンジニア\"のようなスキルレベルの頃に読んだ本である。\r\n\r\n未熟な頃に感動した思い出があるからこそ今もエンジニアとして仕事を続けられていると思う。なのでそういう思い出が詰まった本、思い出補正全開本を\"自分を形成した本\"として5冊選んでみた。思い出補正全開ゆえ今回選んだ本は決して全てがおすすめできるわけではないので悪しからず。\r\n\r\n# [初めてのRuby](https://www.oreilly.co.jp/books/9784873113678/) \r\nRuby1.8と1.9に対応している。現在3.1とかを使っていることを考えると感慨深い...。この本を読んだのは大学卒業~新卒入社した位のタイミングだ。当時の会社ではPHPでウェブアプリケーションを(なんとなく)書いていた。しかし世間はどこもかしこもRuby on Railsを使っておりミーハー心からRubyについて学ばねばな〜などと思い手に取った本だ。\r\n\r\n完全な初学者が手を出すとわからないかもと思えるような一見無味乾燥な本ではあるけど解説がとても丁寧なので当時の自分くらいのレベルでも理解できた。この本を読み切れたことで技術書を読むことのハードルが下がった。またRubyという言語の面白さとかスピリットみたいなものが垣間見えた気がしている。と同時に各種一般的なプログラミングに関する用語についての理解も深まったのでPHPを書く時やドキュメントを読む時の理解力も上がったという副次効果もあった気がする。\r\n\r\n対応Rubyバージョンを見て貰えば分かるとおり今読むべき本ではないとは思うけどあのぐいぐいと引き込まれる体験は確実に今の自分を形成するスタート地点になっていると思う。\r\n\r\n# [Rails3レシピブック](https://www.sbcr.jp/product/4797363821/)\r\nRailsといえば[Ruby on Railsチュートリアル](https://railstutorial.jp/)である。ウェブアプリケーション開発者においては言わずと知れた当時の神サイトだ。当時はまだ全て無料で閲覧できたのでその点もありがたかった。\r\n\r\nこのサイトでTwitterもどきを作ったり、このRails3レシピブックと睨めっこしながら粛々と自分の考える最強のwebサービスを開発するみたいなことを毎日やっていた。その開発体験から派生してすぐあとに起業することになるわけであるが、その時も開発時にいつも横にはRails3レシピブックがあった。\r\n\r\nこれまた対応Railsバージョンを見て貰えば分かるとおり今読むべき本ではないものの、当時の自分にwebサービス開発の楽しさを教えてくれた気がするので個人的に思い出深い本であることは確かである。\r\n\r\n# [リファクタリング: Rubyエディション](https://www.amazon.co.jp/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0-Ruby%E3%82%A8%E3%83%87%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3-Jay-Fields/dp/4048678841)\r\n起業してから一人で我流でwebサービス開発を続けていく中でコードが肥大化していきどうしたもんかね...となってしまう時期がきた。恥ずかしながらこの頃は**Done is better than perfect**よろしく、動けば良い、さっさとリリースじゃ!とガンガン積み木を重ねていくようにコーディングをしていた。実際自分以外に誰もコードを触らないわけなのでなんとかなっていたわけであるが、それなりにコードが大きくなると自分一人でもこれは不味いなと感じるようなコードが増えてきた。その時に手に取ったのがリファクタリング: Rubyエディションである。\r\n\r\nこの本は[リファクタリング 既存のコードを安全に改善する](https://amzn.to/3b3ACYK)というオリジナルのRuby版である。元の本の方はJavaで書かれているのだが、PHPとかJavascriptとか当時のweb開発の言語しか触っていなかった自分に敷居が高く感じられた。一方Ruby版の方はすでに慣れ親しんだ言語で書かれているということで臆せず読み始められた。\r\n\r\nデザインパターンやOOPなどの実装テクニックについて見聞きしたことはあっても実際にどう使えばいいのかというのがいまいち理解できずにいたが、これを読んで腑に落ちた。実際のコードベースに取り入れやすいという環境やタイミングがぴったり合ったというのも大きいがそれにしても学んだ概念がすぐに実践で活用できたというのは気持ちよかった。\r\n\r\n# [コンピュータシステムの理論と実装 ―モダンなコンピュータの作り方](https://amzn.to/3J5EuFa)\r\nある程度webサービスなどが作れるようになるともっとコンピュータの仕組みとか低レイヤーについても知りたくなった。こういうことは本来大学でCSを学んできている人には素地としてあるのかもしれないが自分には全くその手の知識がなかった。\r\n\r\n巷でおすすめされている本やいわゆる名著というものを手に取って読んだりはしてみたが難しいしピンとこないものが多かった。元来頭が良くなくて抽象化能力とか理解力が低いという自覚はあったので理論が延々と続くようなちゃんとした教科書が得意ではないのである。\r\n\r\nそんな時に手に取ったのが[コンピュータシステムの理論と実装 ―モダンなコンピュータの作り方](https://amzn.to/3J5EuFa)だ。これはNANDという電子素子から始まり、CPU、OS、コンパイル、VMと実装していき最終的にはNAND Tetrisと呼ばれるゲームまで作ろうという本。作ると言っても物理的に回路を構築したりするわけではなくHDLや好きな言語(自分はPython)でコードを書いて組み上げていくという流れになる。とはいえ本格的に論理回路から順に組み上げて一応は一通りのコンピュータがどうやって動いているのかを手を動かしながら知れるのでコンピュータへの解像度が爆上がりして感動した。\r\n\r\nOSとか言語を作る部分は流石に全然物足りないのだけど低レイヤーを理解するための足がかりにはなるはず。この本はすでに名著の部類に入ってるし今でも十分おすすめできる。[From Nand To Tetris](https://www.nand2tetris.org/)や巷にすでに実装を行なっている人たちのコードがGitHubやQiitaやZennにたくさんあるのでそれらを参照しながら挑戦すると良いと思う。\r\n\r\n# [Writing An Interpreter In Go](https://amzn.to/3PCmynY)\r\n上記の本を読み始めたのと同じ理由でこの本を読んだ。タイトルの通りGolangでインタプリタを書く本である。プログラミング言語を作ってみるというのは誰もがやってみたいことの一つではあると思うが、いきなりドラゴンブックを読めるわけはないのでどうしたもんかと思っているような人に丁度良い本。\r\n\r\nこれまた解説メインではなくLexer・Parser・Evaluatorを実際に手を動かしながら順を追って解説してくれるのが嬉しい。プログラミング言語を作るっていうのはこういうことなのかと膝を叩く経験ができる。\r\n\r\n今だと日本語版で[Go言語でつくるインタプリタ](https://amzn.to/3PZvOmd)という本になっているので手に取りやすそう。同じ著者がこの本の[コンパイラ版](https://amzn.to/3POSB3K)も出しているのでそちらも読むとさらに理解が深まると思われる。\r\n\r\nよく考えると最初から最後までしっかりと読み込んだ洋書はこれが初めてだったかもしれない。そういう意味でも自分の身になった良い本だったなと思う。\r\n\r\n# 最後に\r\n[エンジニアとして今の自分を形成した本を5冊紹介する](https://panda-program.com/posts/introduce-five-books)という記事を読み、自分にとっての5冊を選んで書いてみた。\r\n\r\n今の自分を形成した本というのは必ずしも万人にとって有益な本ではないかもしれないが、その人の人生を垣間見ることができるという意味で酒のつまみにはなるようなネタだなと思った。他の人(もっと自分より年季の入った人)の経験も読みたい。\r\n\r\nわからない概念だったものが腑に落ちて一段解像度が上がる体験をすると感動してしまうタイプの人間なので分からないことだらけのエンジニア初期の頃に読んだ本の方が贔屓目で見てしまう。新卒の彼らに技術書をお薦めする時は慎重を期して選出するのだけどある意味おじさんの自分語りのようなレベルならばこういう少し偏った選び方もありだと思う。\r\n\r\nそういえばこれを書くために今までどんな本を読んできたかなと振り返ってみたが、圧倒的にインターネット上の記事やドキュメントなどのコンテンツを読んでいる方が多いと思った。\r\n\r\n今は当時にも増してweb上のコンテンツがテキスト・動画問わず溢れているので「おすすめの本」というのを挙げることにそんなに意味はなくなっていくのかもしれない。とはいえ媒体が変わっても初心者が成長していく過程でブレークスルーのきっかけとなった思い出の\"何か\"はあるわけでそれを共有して感慨に浸っているのをみるのはまぁまぁ面白いと思う。\r\n\r\n最後に自分がプログラミングで万能感を得た最古の原体験として、このゆーすけベーさんのブログ記事が出発点だったなと思い出したので貼っておく。一人部屋にこもってこの記事を読みながらクローラを書いていた、フォルダに溜まっていく大量の画像を見つめながら万能感に浸っていたのがめちゃくちゃ懐かしい...\r\n\r\n- [Rubyやってみる！（新おっぱいスクリプトもあるぉ）](https://yusukebe.com/posts/2012/0520074309/)","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/comments","created_at":"2022-07-26T07:58:54Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/16","id":1317850509,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5OjM2N","number":16,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/timeline","title":"エンジニアとして今の自分を形成した本","updated_at":"2022-07-26T08:00:11Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"[Misreading Chat](https://misreading.chat/2022/05/12/92-software-development-waste/)で紹介されていた[Software Development Waste](https://homepages.dcc.ufmg.br/~figueiredo/disciplinas/papers/icse17sedano.pdf)という論文。\r\n\r\nこの論文に載っていたTypes of Software Development Wasteというソフトウェア開発のムダについて類型されていたものが面白かったので日本語にしてみた。\r\n\r\n# 誤った機能・製品の構築\r\n## ムダ\r\nユーザーニーズやビジネスニーズに対応していない機能・製品を構築するコスト\r\n## 原因\r\n- ユーザーの要望\r\n  - ユーザー調査、検証、テストを行っていない、ユーザーフィードバックを無視している、ユーザー価値の低い機能に取り組んでいる\r\n- ビジネスの要望\r\n  - ビジネス関係者を関与させていない、関係者からのフィードバックが遅い、製品の優先度が不明確\r\n## 一言メモ\r\nユーザーの声を汲み損ねていたり、えいやで作ってしまった機能とかまぁムダですよねと言われてばそう。割とよく起こりがちである。\r\n\r\n# バックログの管理ミス\r\n## ムダ\r\n作業の重複、価値の低いユーザー機能の迅速化、必要なバグ修正の遅延のコスト\r\n## 原因\r\n- バックログの逆転\r\n- 同時に多くの機能に取り組む\r\n- 作業の重複\r\n- 十分に準備されていないストーリー(以降\"ストーリー\"は\"機能\"と同じ意味で使われてるっぽい？)\r\n- 機能開発とバグ修正のアンバランス\r\n- テストまたは重要なバグ修正の遅延\r\n- 気まぐれなスラッシング(訳が微妙)\r\n## 一言メモ\r\n取り組むべきタスクの優先度づけがうまくできてないと、あるべき順番であるべき機能がユーザに届けられなくなるのでそういうのはムダですよねという感じか。\r\n\r\n# リワーク(手戻り)\r\n## ムダ\r\n正しく行われたはずの納品物を変更するコスト\r\n## 原因\r\n- 技術的負債\r\n- ストーリーの却下（例：プロダクトマネージャーがストーリーの実装を却下）\r\n- 完了の明確な定義がない（ストーリーが曖昧、設計モックの推測）\r\n- 欠陥（テスト戦略の不備、バグの根本原因分析がない）。\r\n## 一言メモ\r\n仕様の作り込みが甘かったり、そもそもユーザーテストが不十分であやふやな機能が設計されたりして作り直しが発生するのはムダですよねという感じ。技術的負債やバグ起因で作り直しが発生するのもここの無駄にカウントされてる。\r\n\r\n# 不必要に複雑なソリューション\r\n## ムダ\r\n必要以上に複雑なソリューションを作成するコスト、機能、ユーザーインターフェース、コードを単純化する機会を逃す\r\n## 原因\r\n- ユーザーの視点から見た不必要な機能の複雑さ\r\n- 不必要な技術的複雑さ\r\n  - コードの重複、インタラクションデザインの再利用不足、前倒しで作った複雑すぎる技術的デザイン\r\n## 一言メモ\r\nオーバーエンジニアリングの結果、なんかかっこいいけど誰も容易に変更できなくなってしまったみたいな実装はたまにある気がする。しかもそれをやった人が退職してしまい結局全部書き直す羽目にみたいな、、やり直しが発生するという意味で確かにそういう実装は結局ムダと言われればムダ。\r\n\r\n# 不要な認知負荷\r\n## ムダ\r\n精神的エネルギーを不必要に消費するコスト\r\n## 原因\r\n- 技術的負債に苦しんでいる\r\n- 複雑または大規模なストーリー\r\n- 非効率なツールや問題のあるAPI、ライブラリ、フレームワーク\r\n- 不必要なコンテキストスイッチ\r\n- 非効率な開発フロー\r\n- 整理されていないコード\r\n## 一言メモ\r\n開発フローやツールや負債に起因してMPを過剰に消費させるのはムダですよねというやつ。\r\n\r\nそういえば精神的に負荷がかかることそれ自体がどのくらい開発の生産性低下を引き起こすのか知りたいんだけどそういう研究あるかな。例えば技術的負債によって発生する精神的な負荷は自体は実は生産性を低下させてなくて、技術的な負債そのものが生産性を低下させているだけみたいな。\r\n\r\nまぁMPが過剰に減らされるのは人間をリソースと考えるとムダだよねというのは当たり前だけど。\r\n\r\n# 心理的苦痛\r\n## ムダ\r\n不要なストレスでチームに負担をかけるコスト\r\n## 原因\r\n- チームのモラルの低下\r\n- ラッシュモード(締切がきつすぎるみたいな状況)\r\n- 対人関係やチーム内の対立\r\n## 一言メモ\r\nこれも上のやつと似ててMPの過剰消費に繋がるのでムダというやつ。\r\n\r\nそういえばフルリモートでissueベースで働いてると対人関係みたいなものを気にすることがほぼ無くなった。issueだけの関係だと後腐れなくて事務的に処理できることが多くて楽。一方でプロダクトを作っていくチームの一員としてビルドアップから参加する必要があると柔らかなコミュニケーションが必要になるので気を遣う。\r\n\r\n# 待ち時間/マルチタスク\r\n## ムダ\r\nマルチタスクに隠れがちなアイドルタイムのコスト\r\n## 原因\r\n- 遅いテストや信頼できないテスト\r\n- 信頼できない受け入れ環境\r\n- 不足する情報、人、設備\r\n- フィードバック遅延によるコンテキストスイッチ\r\n## 一言メモ\r\nテストが遅すぎたりPRのレビューがスルーされたりして先に進めない時に発生する待ち時間はムダですよね、というやつ。確かによく起きがちではあるが、PRのレビューで発生する待ちはどうしようもないところがあるな...。\r\n\r\n# ナレッジロス\r\n## ムダ\r\nチームがかつて知っていた情報を再取得するコスト\r\n## 原因\r\n- チームの解散や移動\r\n- 知識のサイロ化\r\n## 一言メモ\r\nチームの移動や変更でナレッジの共有をやり直すのに発生する時間とかがムダですよねというやつ。これは暗黙知を減らすために各人が情報をオープンに見える化しておかないと発生しがち。\r\n\r\nベテランの特定の人に質問が集中しちゃったりするとその人の本質的な作業時間が減るのもよくある。そういうベテランはそのプロダクトのあらゆることを知っているから開発のパフォーマンスも他の人より出せるはずなんだけど、オンボーディングを手伝うコストが度々発生しちゃたりすると勿体無いな〜となる。\r\n\r\n# 非効率的なコミュニケーション\r\n## ムダ\r\n不完全、不正確、誤解を招く、非効率的、または不在のコミュニケーションのコスト\r\n## 原因\r\n- チームサイズが大きすぎる\r\n- 非同期コミュニケーション\r\n  - 分散チーム、分散ステークホルダー、他のチームへの依存、チーム外の不透明なプロセス\r\n- 不均衡\r\n  - 会話を支配する、聞かない\r\n- 非効率な会議\r\n  - 集中力の欠如、振り返りのスキップ、毎日ブロッカーについて話さない(どういうこと...)、会議が長引く（例：長い立ち話）など\r\n## 一言メモ\r\nコミュニケーションがうまくいかないとムダですよねみたいな感じ。幅広いけどもまぁそれはそう。会議に関しても不要な話で盛り上がっちゃうとか曖昧な目的始まっちゃって終わりどころが見えずダラダラ続くみたいなことはよくある気がする。\r\n\r\n# 雑感\r\nソフトウェア開発におけるあるあるネタまとめみたいな様相である。こういうムダは確かに至る所に散見されるが、これらをどうやって取り除くかというのは中々難しい問題だ。だがその辺の対処法についてはこの論文に書いていない。\r\n\r\nこの辺りのムダを取り除くためのプロセス改善の話はどういう本(や記事や論文)を読むと良いのだろうか。","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/comments","created_at":"2022-06-23T03:03:33Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/10","id":1281601385,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5MY69p","number":10,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/timeline","title":"ソフトウェア開発におけるムダ","updated_at":"2022-06-23T08:22:59Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"RustやTypeScriptに関するちょっと込み入ったドキュメントや記事を読んだりすると「部分型」だとか「多相」のようなワードが頻出するのだけどこれらの意味があんまりよくわかっていなかった。\r\n\r\n普段よく書いているプログラミング言語のはずなのにその(主に型の)解説で使われている単語が全くわからんというのはどうなのかというあたりに[型システム入門](https://amzn.to/3dPn7wK)(通称 TaPL)を読み始めたモチベーションがある。\r\n\r\nしかしまぁ普段プログラミングをしていると型キャストしたりジェネリクスを使ったりとか、何かしらの形でそういったワードに由来する言語機能を**使う経験**自体はすでにあり、今更小難しい話を知らなくても使い方はわかるので大して困ることもないわけで。\r\n\r\nそれにこの先プログラミング言語を本格的に開発する予定もないし、その理論的な意味といったものに特別興味を持つことはなかったわけだがふと[TypeScriptの型メモ](https://qiita.com/dico_leque/items/06ac5837b7a333c5c8da)というQiitaの記事なんかを読もうと思うと知らない単語が大量に出てきてぐぬぬ...となるのが不便というのもまた事実。\r\n\r\nBlockchain関連の開発の情報を追うのも少し飽きてきてたところなので良い機会と思い重い腰を上げた。\r\n\r\nAmazonから届いて読み始めた当初は噂に違わぬ難解な書籍であるな...と感じた。その辺りの苦慮は[型に関連するよく分からん用語がありすぎる](https://scrapbox.io/razokulover-tech-memo/%E5%9E%8B%E3%81%AB%E9%96%A2%E9%80%A3%E3%81%99%E3%82%8B%E3%82%88%E3%81%8F%E5%88%86%E3%81%8B%E3%82%89%E3%82%93%E7%94%A8%E8%AA%9E%E3%81%8C%E3%81%82%E3%82%8A%E3%81%99%E3%81%8E%E3%82%8B)に書いている...。\r\n\r\nとはいうものの実際10章くらいまでの型付きラムダ計算を理解し操作的意味論を読み下せるまで根気強く粘ることができれば、あとはそれ以降は全ての証明や演習問題は理解できるとは言わなくとも、各概念のエッセンスについて理解する土台は整う気がする。それでも全く簡単ではなく、特に後半はMLやHaskell等の関数型言語の経験がない自分には見たこともない概念だらけで苦戦した。\r\n\r\nちなみに型付きラムダ計算に関してはYoutubeに名大の木原准教授の講義動画があり、これが本当に大変素晴らしく、「あれ？俺、ラムダ計算完全に理解した！？！？」と錯覚させられるのでおすすめ。\r\n\r\n- [名大・講義 計算論](https://www.youtube.com/playlist?list=PLQJysrzOMzUlaYej_MMl5929fJ5A0qdLK)\r\n\r\n第Ⅲ章 部分型以降は、TaPL読む -> 知らない概念に出会う -> 本文を読み込む -> 意味わからん -> ググる -> 「OOOはXXXみたいなイメージやで」みたいな解説を読む -> 自分なりに噛み砕く -> TaPL読む -> 知らない概念に出会う -> ...の繰り返しになる。\r\n\r\n今でも全然理解出来ているとは思わないが以前よりは各種ワードに対するアレルギーのようなものはなく「OOOの言語で言うところのアレね」とか「なるほど、{ ∃X, T }のことね〜」、みたいな論理記号を見てやりたいことがほんのりわかるというくらいにはなってはきた。それだけでも読む価値があったなと思う。\r\n\r\n反面、言葉の意味的なものを知りたいだけならWikipediaなりググって各種大学の講義PDFとか読めば良いのでは？みたいな感覚もあった。あくまでTaPLは型理論を大学院以上で学んでいく学生に入門的な知識を授ける本なので、型についてちょっと知りたいくらいのレベルの人には重すぎるかも。その辺はご自身の体力とご相談という気がする。\r\n\r\nあと今後はHaskell・OCaml、あとはidrisあたりに手を出してみるとTaPLで出てきた完全に知らんかった概念を言語機能レベルで体感できて身になりそうだな〜と思った。これはこの先の宿題としてみる。","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/20/comments","created_at":"2022-08-27T09:22:56Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/20/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/20","id":1352994529,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/20/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5QpQ7h","number":20,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/20/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/20/timeline","title":"TaPLを読んでる","updated_at":"2022-08-27T10:03:43Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/20","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}}]},"__N_SSG":true}