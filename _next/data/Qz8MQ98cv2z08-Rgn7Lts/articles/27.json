{"pageProps":{"issue":{"body":"ChatGPTにレシピを生成してもらうのが楽しい。適当に冷蔵庫の余り物を指定して「レシピを教えて」と聞くと良い感じに答えてくれる。\r\n\r\n普通じゃ思いつかないようなトンチキな解答も結構あり中々味わいがあって良い。レシピに困った時に使えるかもしれない。\r\n\r\n現実的に食えそうでかつユニークな回答を得るには「誰も食べたことがないような」とか「意外な組み合わせ」などの形容句を加えると良さそうだった。\r\n\r\n以下、ChatGPTが生成した今後自分でも試してみたいと思ったレシピをメモしとく。\r\n\r\n※記事が見づらくなるしググラビリティも悪くなるのでやりとりのスクショ画像は省く。自演したんじゃないかと疑われそうだけどスクショを貼ったところで画像もいくらでも改ざんできるわけで大して変わらんだろうからまぁ誤差。\r\n\r\n# Q.  鮭とほうれん草としめじを使った今まで誰も食べたことがないような料理のレシピを教えてください。\r\n\r\n鮭とほうれん草としめじのロール\r\n\r\n材料：\r\n\r\n- 鮭 1/2枚\r\n- ほうれん草 1/2束\r\n- しめじ 1/2袋\r\n- 塩 小さじ1/2\r\n- 味醂 小さじ1/2\r\n- 卵 1個\r\n- 小麦粉 小さじ1/2\r\n- 作り方：\r\n\r\n1. 鮭をスライスし、塩と味醂を加えてマリネする。\r\n2. ほうれん草を細かく切り、しめじを洗い、水切りしておく。\r\n3. 卵を打ち、小麦粉を加えて薄める。\r\n4. フライパンに油を熱し、ほうれん草としめじを炒める。\r\n5. 鮭をフライパンに入れ、表面が色づいたら反対側に折り返す。\r\n6. 鮭の上にほうれん草としめじをのせ、お皿に並べる。\r\n7. 卵液をひたして、鮭と一緒に焼く。\r\n8. 焼き色がついたら、反対側に折り返し、さらに焼く。\r\n9. 焼き上がったら、お皿に並べ、噛みやすく切って、お皿に盛り付ける。\r\n10. お好みで、塩、醤油、レモン汁などで味付けして完成！\r\n\r\n鮭とほうれん草としめじが柔らかく、卵液が香ばしさをプラスした、新鮮な味わいのロールができあがります。是非お試しください。\r\n\r\n## 感想\r\nマリネにした鮭を野菜やキノコで包んで卵で包んで焼くという料理。なんとなく美味そうな気はする。`卵を打つ`という工程が謎だが...。\r\n\r\n# Q.卵とサラダチキンともやしとオクラを使った意外な組み合わせの料理のレシピを教えてください。\r\n\r\n以下は、卵、サラダチキン、もやし、オクラを使った料理のレシピの一例です。\r\n\r\n【材料】\r\n\r\n- 卵: 1個\r\n- サラダチキン: 1/2カップ\r\n- もやし: 1カップ\r\n- オクラ: 1カップ\r\n- 玉ねぎ: 1/2個\r\n- 薄力粉: 1/4カップ\r\n- 中濃ソース: 1/4カップ\r\n- 油: 1/4カップ\r\n- 塩、胡椒、お好みのスパイス: 少々\r\n\r\n【作り方】\r\n\r\n1. 卵をボウルに入れ、塩と胡椒を加えて混ぜます。玉ねぎをみじん切りにし、もやしとオクラを刻んでおきます。\r\n2. 卵をフライパンで炒め、玉ねぎ、もやし、オクラを加えて炒めます。サラダチキンを加えて炒め、薄力粉をまぶして炒めます。\r\n3. 中濃ソースを加え、よく混ぜます。塩、胡椒、お好みのスパイスを加えて味を調えます。\r\n4. 完成した料理を皿に盛ります。好みでサラダや白飯を添えてお召し上がりください。\r\n\r\nこのレシピは、簡単でかつおいしい料理が作れるようになるよう心がけました。ぜひ、試してみてください。\r\n\r\n## 感想\r\n材料を全部炒めて中濃ソースで味付けするという料理。イメージできそうで出来ない絶妙な料理。お好みでサラダに添えてもおいしいらしい。\r\n\r\n# Q. 納豆と冷凍かぼちゃとナスとピーマンを使った誰も食べたことがないような料理のレシピを教えてください。\r\n\r\n納豆と冷凍かぼちゃとナスとピーマンを使った料理のレシピとして、納豆とナスとピーマンのスパイス風味カレーがあります。このレシピを作るには、まず納豆を冷凍かぼちゃと一緒にフライパンに入れ、炒めます。次に、刻んだナスとピーマンを加え、スパイスを加えて炒めます。その後、カレーの素と水を加えて煮込み、好みの生野菜やサラダを添えて完成です。\r\n\r\n## Q. 工程ををもう少し詳しく教えて?\r\n\r\nこの料理を作る手順は次の通りです。\r\n\r\n1. 納豆を冷凍かぼちゃと一緒にフライパンに入れ、中火で炒めます。\r\n2. 刻んだナスとピーマンを加え、さらに炒めます。\r\n3. スパイスを加えて炒めます。スパイスは個人の好みに応じて、カレー粉やターメリック、コリアンダー、カイエンペッパーなどを使用することができます。\r\n4. カレーの素と水を加えて、よく混ぜます。\r\n5. 煮込み、沸騰したら火を弱めて、約 20 分間煮込みます。\r\n6. 煮込みが終わったら、好みの生野菜やサラダを添えて完成です。\r\n\r\n以上が納豆と冷凍かぼちゃとナスとピーマンを使ったスパイス風味カレーの作り方です。もし質問がありましたら、お気軽にお問い合わせください。\r\n\r\n## 感想\r\nスパイスカレーだ。納豆トッピングとかよくあるし普通に美味そう。まぁでも誰も食べたことがないような食べ物ではないな..。\r\n\r\n詳しい工程を教えてくれない場合があるから追加で質問した。最初の質問でちゃんと付け加えておいた方が良さそう。\r\n\r\n# Q. 鶏むね肉と適当な野菜を使った異国風の料理のレシピを教えてください。分量や工程も詳しく教えてください。\r\n\r\n鶏むね肉と野菜を使った異国風の料理のレシピを紹介します。分量や工程は、あなたのお好みに合わせて調整してください。\r\n\r\n【材料】\r\n\r\n- 鶏むね肉: 大さじ1\r\n- にんじん: 1/4本\r\n- セロリ: 1/4本\r\n- 人参: 1/4本\r\n- しめじ: 大さじ1\r\n- にんにく: 小さじ1\r\n- みりん: 大さじ1\r\n- みそ: 大さじ1\r\n- にんにくみそ: 小さじ1\r\n- にんじん: 1/4本\r\n\r\n【作り方】\r\n\r\n1. にんじん、セロリ、人参をおろし、1cm角に切ります。\r\n2. 鶏むね肉を1cm角に切ります。\r\n3. 小鍋ににんじん、セロリ、人参を入れ、弱火で炒めます。\r\n4. 鶏むね肉を加え、炒めます。\r\n5. しめじを入れ、さらに炒めます。\r\n6. にんじん、セロリ、人参を加え、炒めます。\r\n7. にんにく、みりん、みそ、にんにくみそを加え、炒めます。\r\n8. 水でさっと洗ったにんじんを加え、炒めます。\r\n9. 調理が完了したら、皿に盛り付けてお召し上がりください。\r\n\r\n他の野菜やスパイスを加えることで、さまざまな味わいを楽しめます。また、このレシピは鶏むね肉だけでなく、鶏もも肉や鶏胸肉を使用することもできます。ぜひ、自分の好みに合わせて作ってみてください。\r\n\r\n## 感想\r\n人参とにんじんは同じでいいのかな。計3/4本使うってことか。にんにくは固形でも使うし、にんにくみそとしても使うっぽいので臭そう。でもガッツリ感はあり、ご飯に合いそうで美味そうな雰囲気はある。\r\n\r\nプロンプトは具体的な食材を指定するのもいいが適当な野菜/肉みたいな指定の方が未知の料理になりやすくて面白いかもしれない。\r\n\r\n# 現状の良さげなレシピを生成するためのプロンプトTips\r\n- 「誰も食べたことがないような」とか「異国風の」といった形容句を付けた方がググっても出て来なそうな名も無い料理が出やすそう\r\n- 「分量や工程も詳しく教えてください。」 を付けた方がいわゆるレシピっぽい文章が生成されて良い\r\n- 食材は「適当な」で指定した方が幅広い料理が出やすい\r\n\r\n# 随時更新予定...\r\n","bodyHTML":"<p>ChatGPTにレシピを生成してもらうのが楽しい。適当に冷蔵庫の余り物を指定して「レシピを教えて」と聞くと良い感じに答えてくれる。</p>\n<p>普通じゃ思いつかないようなトンチキな解答も結構あり中々味わいがあって良い。レシピに困った時に使えるかもしれない。</p>\n<p>現実的に食えそうでかつユニークな回答を得るには「誰も食べたことがないような」とか「意外な組み合わせ」などの形容句を加えると良さそうだった。</p>\n<p>以下、ChatGPTが生成した今後自分でも試してみたいと思ったレシピをメモしとく。</p>\n<p>※記事が見づらくなるしググラビリティも悪くなるのでやりとりのスクショ画像は省く。自演したんじゃないかと疑われそうだけどスクショを貼ったところで画像もいくらでも改ざんできるわけで大して変わらんだろうからまぁ誤差。</p>\n<h1>Q.  鮭とほうれん草としめじを使った今まで誰も食べたことがないような料理のレシピを教えてください。</h1>\n<p>鮭とほうれん草としめじのロール</p>\n<p>材料：</p>\n<ul>\n<li>鮭 1/2枚</li>\n<li>ほうれん草 1/2束</li>\n<li>しめじ 1/2袋</li>\n<li>塩 小さじ1/2</li>\n<li>味醂 小さじ1/2</li>\n<li>卵 1個</li>\n<li>小麦粉 小さじ1/2</li>\n<li>作り方：</li>\n</ul>\n<ol>\n<li>鮭をスライスし、塩と味醂を加えてマリネする。</li>\n<li>ほうれん草を細かく切り、しめじを洗い、水切りしておく。</li>\n<li>卵を打ち、小麦粉を加えて薄める。</li>\n<li>フライパンに油を熱し、ほうれん草としめじを炒める。</li>\n<li>鮭をフライパンに入れ、表面が色づいたら反対側に折り返す。</li>\n<li>鮭の上にほうれん草としめじをのせ、お皿に並べる。</li>\n<li>卵液をひたして、鮭と一緒に焼く。</li>\n<li>焼き色がついたら、反対側に折り返し、さらに焼く。</li>\n<li>焼き上がったら、お皿に並べ、噛みやすく切って、お皿に盛り付ける。</li>\n<li>お好みで、塩、醤油、レモン汁などで味付けして完成！</li>\n</ol>\n<p>鮭とほうれん草としめじが柔らかく、卵液が香ばしさをプラスした、新鮮な味わいのロールができあがります。是非お試しください。</p>\n<h2>感想</h2>\n<p>マリネにした鮭を野菜やキノコで包んで卵で包んで焼くという料理。なんとなく美味そうな気はする。<code>卵を打つ</code>という工程が謎だが...。</p>\n<h1>Q.卵とサラダチキンともやしとオクラを使った意外な組み合わせの料理のレシピを教えてください。</h1>\n<p>以下は、卵、サラダチキン、もやし、オクラを使った料理のレシピの一例です。</p>\n<p>【材料】</p>\n<ul>\n<li>卵: 1個</li>\n<li>サラダチキン: 1/2カップ</li>\n<li>もやし: 1カップ</li>\n<li>オクラ: 1カップ</li>\n<li>玉ねぎ: 1/2個</li>\n<li>薄力粉: 1/4カップ</li>\n<li>中濃ソース: 1/4カップ</li>\n<li>油: 1/4カップ</li>\n<li>塩、胡椒、お好みのスパイス: 少々</li>\n</ul>\n<p>【作り方】</p>\n<ol>\n<li>卵をボウルに入れ、塩と胡椒を加えて混ぜます。玉ねぎをみじん切りにし、もやしとオクラを刻んでおきます。</li>\n<li>卵をフライパンで炒め、玉ねぎ、もやし、オクラを加えて炒めます。サラダチキンを加えて炒め、薄力粉をまぶして炒めます。</li>\n<li>中濃ソースを加え、よく混ぜます。塩、胡椒、お好みのスパイスを加えて味を調えます。</li>\n<li>完成した料理を皿に盛ります。好みでサラダや白飯を添えてお召し上がりください。</li>\n</ol>\n<p>このレシピは、簡単でかつおいしい料理が作れるようになるよう心がけました。ぜひ、試してみてください。</p>\n<h2>感想</h2>\n<p>材料を全部炒めて中濃ソースで味付けするという料理。イメージできそうで出来ない絶妙な料理。お好みでサラダに添えてもおいしいらしい。</p>\n<h1>Q. 納豆と冷凍かぼちゃとナスとピーマンを使った誰も食べたことがないような料理のレシピを教えてください。</h1>\n<p>納豆と冷凍かぼちゃとナスとピーマンを使った料理のレシピとして、納豆とナスとピーマンのスパイス風味カレーがあります。このレシピを作るには、まず納豆を冷凍かぼちゃと一緒にフライパンに入れ、炒めます。次に、刻んだナスとピーマンを加え、スパイスを加えて炒めます。その後、カレーの素と水を加えて煮込み、好みの生野菜やサラダを添えて完成です。</p>\n<h2>Q. 工程ををもう少し詳しく教えて?</h2>\n<p>この料理を作る手順は次の通りです。</p>\n<ol>\n<li>納豆を冷凍かぼちゃと一緒にフライパンに入れ、中火で炒めます。</li>\n<li>刻んだナスとピーマンを加え、さらに炒めます。</li>\n<li>スパイスを加えて炒めます。スパイスは個人の好みに応じて、カレー粉やターメリック、コリアンダー、カイエンペッパーなどを使用することができます。</li>\n<li>カレーの素と水を加えて、よく混ぜます。</li>\n<li>煮込み、沸騰したら火を弱めて、約 20 分間煮込みます。</li>\n<li>煮込みが終わったら、好みの生野菜やサラダを添えて完成です。</li>\n</ol>\n<p>以上が納豆と冷凍かぼちゃとナスとピーマンを使ったスパイス風味カレーの作り方です。もし質問がありましたら、お気軽にお問い合わせください。</p>\n<h2>感想</h2>\n<p>スパイスカレーだ。納豆トッピングとかよくあるし普通に美味そう。まぁでも誰も食べたことがないような食べ物ではないな..。</p>\n<p>詳しい工程を教えてくれない場合があるから追加で質問した。最初の質問でちゃんと付け加えておいた方が良さそう。</p>\n<h1>Q. 鶏むね肉と適当な野菜を使った異国風の料理のレシピを教えてください。分量や工程も詳しく教えてください。</h1>\n<p>鶏むね肉と野菜を使った異国風の料理のレシピを紹介します。分量や工程は、あなたのお好みに合わせて調整してください。</p>\n<p>【材料】</p>\n<ul>\n<li>鶏むね肉: 大さじ1</li>\n<li>にんじん: 1/4本</li>\n<li>セロリ: 1/4本</li>\n<li>人参: 1/4本</li>\n<li>しめじ: 大さじ1</li>\n<li>にんにく: 小さじ1</li>\n<li>みりん: 大さじ1</li>\n<li>みそ: 大さじ1</li>\n<li>にんにくみそ: 小さじ1</li>\n<li>にんじん: 1/4本</li>\n</ul>\n<p>【作り方】</p>\n<ol>\n<li>にんじん、セロリ、人参をおろし、1cm角に切ります。</li>\n<li>鶏むね肉を1cm角に切ります。</li>\n<li>小鍋ににんじん、セロリ、人参を入れ、弱火で炒めます。</li>\n<li>鶏むね肉を加え、炒めます。</li>\n<li>しめじを入れ、さらに炒めます。</li>\n<li>にんじん、セロリ、人参を加え、炒めます。</li>\n<li>にんにく、みりん、みそ、にんにくみそを加え、炒めます。</li>\n<li>水でさっと洗ったにんじんを加え、炒めます。</li>\n<li>調理が完了したら、皿に盛り付けてお召し上がりください。</li>\n</ol>\n<p>他の野菜やスパイスを加えることで、さまざまな味わいを楽しめます。また、このレシピは鶏むね肉だけでなく、鶏もも肉や鶏胸肉を使用することもできます。ぜひ、自分の好みに合わせて作ってみてください。</p>\n<h2>感想</h2>\n<p>人参とにんじんは同じでいいのかな。計3/4本使うってことか。にんにくは固形でも使うし、にんにくみそとしても使うっぽいので臭そう。でもガッツリ感はあり、ご飯に合いそうで美味そうな雰囲気はある。</p>\n<p>プロンプトは具体的な食材を指定するのもいいが適当な野菜/肉みたいな指定の方が未知の料理になりやすくて面白いかもしれない。</p>\n<h1>現状の良さげなレシピを生成するためのプロンプトTips</h1>\n<ul>\n<li>「誰も食べたことがないような」とか「異国風の」といった形容句を付けた方がググっても出て来なそうな名も無い料理が出やすそう</li>\n<li>「分量や工程も詳しく教えてください。」 を付けた方がいわゆるレシピっぽい文章が生成されて良い</li>\n<li>食材は「適当な」で指定した方が幅広い料理が出やすい</li>\n</ul>\n<h1>随時更新予定...</h1>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/27/comments","created_at":"2022-12-04T12:47:07Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/27/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/27","id":1474787100,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/27/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5X53cc","number":27,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/27/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/27/timeline","title":"ChatGPTに適当な食材を使ったレシピを考えてもらう","updated_at":"2022-12-04T12:47:07Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/27","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},"issueComments":[],"pickupArticles":[{"body":"[Web Development with Ruby on Rails](https://amzn.to/3N2XFRl)を読んでる。\r\n\r\nmodelにロジックは書かない、1コントローラーメソッドに対して1Serviceにしてそこに必要なビジネスロジックは詰めこむ、serviceは1メソッドしかpublicにしない、serviceのpublicなメソッドの振る舞いのみ入念にテストするという割り切った考えは前評判どおりだけど思想強ぇ〜となった。\r\n\r\nRailsでDDDとかやろうとするとドメインの整理から始まりmodelはただのDTOにしてentityやvalue object等の実装を用意して、なんというか少なくとも実装に関してはクラスがめちゃくちゃ増えていくイメージだけど著者はむしろそういうのと逆方向(というかRailsとしては自然な方向)に逆らわず標準提供されてる道具を使って、最低限のレイヤーをサステナブルという目的(ここが重要)を達成するためだけに追加するという考えだ。\r\n\r\n設計に絶対的な正解はなく、未来・要件・チーム・言語・フレームワークなどにあらゆる環境によって最適な選択は変わるという当たり前のことを思い知らされる感じ。\r\n\r\n[良いコード／悪いコードで学ぶ設計入門](https://amzn.to/3PNmkuN)を読んだあとなのでなおのことその実装方針の差が面白く感じた。\r\n\r\n良いコード設計ができるというのはこういった多種多様な設計方針や実装方法の引き出しがあり、その中から妥当なものを選択できる能力なのだろうと思う。(もっと広い意味でだけど)アーキテクチャ選択に絶対はないというのは[ソフトウェアアーキテクチャの基礎](https://amzn.to/3POoAly)でも書いてあった気がする。\r\n\r\n自分は金にならんプロジェクト(スタートアップのすぐ解散するアプリ開発や少人数開発みたいなもの)ばかりやってきたから将来性についてあまり深く考えなくてもぶっちゃけよくて、そんなに神経質に設計について固執してこなかった。そのツケみたいなもので設計に関するスキルにややコンプレックスがあるから最近はこういう本をいくつか読んで妄想したりしている。\r\n\r\n自分のようなバックグラウンドの人間からするとどんなにクソコードでも金を産むコードに対してまずはリスペクトが生まれてしまうという悲しい性。めくじらたててキレ散らかしてる人を見るとなんともいえない感情にならん訳でもない。もちろんそれとこれとは別なのは理解するが....","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/comments","created_at":"2022-05-30T09:55:28Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/3","id":1252487542,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5Kp3F2","number":3,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/timeline","title":"Web Development with Ruby on Railsと悲しい性","updated_at":"2022-05-30T09:55:55Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"- 先日 OpenAI から[ChatGPT](https://chat.openai.com/chat)が Beta 公開された\r\n- ChatGPT ではどんな質問に対しても何かしらの回答を生成してくれるのだが、ソースコードに関しても中々の筋が良さそうな雰囲気のコード片を生成してくれるということで少し話題になっていた\r\n- こうしたプログラムを生成してくれる AI が発展していく中でどういう具合にプログラマの仕事が奪われていくのか興味がある\r\n- 特に以下では**web アプリやモバイルアプリなどのアプリケーションの開発において**という文脈で考えることにする\r\n- まず AI がプログラマの仕事を奪うまでにはいくつかの段階があると思う\r\n\r\n# コード支援レベル\r\n\r\n- 現状は[GitHub Copilot](https://github.com/features/copilot)のようなコーディング支援を行うレベルの AI はある程度実用レベルになっている\r\n  - 自分は Copilot が生成したコード片をプロダクションコードに含めるのは権利関係の問題もあり様子見している\r\n  - しかし Copilot を使っていないわけではなく、変数名や定型作業のサジェストや変数名の補完、コードの書き出しの補助などで利用している\r\n    - 例えば API のレスポンスで受け取る予定の JSON をペタッと貼るとそれにあった構造体とか型が丸ッと生成されたりする。スニペットとか静的なコードジェネレータでやってたような作業が良い感じにできるなど。\r\n  - 正直このようなコーディングの支援 AI だけではプログラマの仕事は AI に奪われないだろう。全然奪うというよりプログラマの手助けをするだけなので、これではまだまだプログラマがいないとアプリケーションは完成しない。\r\n\r\n# ChatGPT レベル\r\n\r\n- では ChatGPT のようにある程度まとまったサイズのコード片を生成してくれる AI が普及するとどうなるか\r\n  - Twitter ではさまざまなプログラマがコード片の生成を試みているがその内容を見るとそのまま使えるコードが半分、修正が必要なコードが 1〜2 割、完全に間違っているコードが 3〜4 割という感じだ\r\n  - 今のクオリティだと人が書いた方がまだ早い、もしくはプログラマによる手修正が結構必要そう。なのでプログラマがいないとまだアプリケーションは完成させられないだろう\r\n  - ただし修正すること前提で簡単なタスク用のまとまったコード片を生成してコーディングの時間短縮、といった使い方はできるかもしれない\r\n  - ある意味これもコーディング支援というレベルではある\r\n    - というか GitHub Copilot が GPT-3 を使ってるから実質同じといえば同じ\r\n\r\n# かなり高精度にコード生成できるレベル\r\n\r\n- ではそのまま使えるコード片を ほぼ 100%のクオリティで生成できる AI が登場するようになるとどうか\r\n  - ここまでくると AI に生成してほしいコードの内容を伝えてコード片を大量に生成してもらい、それをプログラマが組み合わせてアプリケーションという形にする流れでも現実的になってきそう\r\n    - 例えば「メールアドレス認証するコード書いて」「CRUD なフォームのモデルとコントローラとビューを書いて」等々でいくつかの動くコード片が生成される\r\n    - 人間はこれらをつなぎ合わせるだけでアプリケーションが完成するイメージ\r\n      - こうしたコード片をつなぎ合わせる仕事はアセンブリエンジニアとでも呼ばれるようになりそう\r\n  - **AI には体力が無いかつマシンさえあれば並列で大量に実行できるという人間には成し得ない強力な生産性がある**\r\n    - 金とマシンさえあれば 24 時間並列で一気にコード生成してもらえるはず\r\n  - よって例えば今までだと新規でアプリケーションを完成させるのに必要なプログラマが 1 人月必要だった案件でも AI にコーディング部分を大幅に代替してもらえるなら一部コード修正やレビューが必要にしても、数人日で完成させられるようなことはあるかもしれない\r\n  - この辺りから一部のプログラマの仕事は AI に奪われたと言われるようになるだろう\r\n- とはいえこれらは**新規開発の場合のみの話**だ\r\n- 仕事におけるプロダクションで稼働するシステム開発の難易度の高い部分は既存システムへ追加・修正などの改修を入れるところである\r\n- どんなに正確なコード片を生成できたり、あるいはアプリケーション全体のコードを生成できたとしてもそれは新規開発時のコーディングの代替であり、一度本番に乗ってしまったコードを運用していく際にはちょっとやそっとのコード片の生成レベルでは代替は難しそうだ\r\n\r\n# 既存コードのコンテキストも読み取ってコード生成できるレベル\r\n\r\n- では改修要望を書くと既存コードのコンテキストを加味した状態の追加修正が入ったコードが丸っと生成されるようになるとどうか\r\n  - これが出来るならアプリケーションのコーディング部分を担当するプログラマはほぼ不要になるかもしれない\r\n    - 生成されたコードを既存コードに適用するくらいで済むレベルを想定\r\n  - 残りの仕事に必要なのは下記くらいか\r\n    - 生成されたコードが安定して実行し続けられるように周辺環境を作るインフラエンジニア\r\n    - 生成されたコードに問題はないか確認するコードレビューエンジニア\r\n    - 生成されたコードが想定通りに動くか確認する QA エンジニア\r\n    - AI のコード生成や生成したコードを管理するプロンプトエンジニア/アセンブリエンジニア?\r\n      - AI の癖を知り既存コードとの相性の良いプロンプトを管理するご機嫌伺い役\r\n- ここまでくると新規開発だけでなく既存システムの改修に関するコーディングはある程度代替できるのでさらに従来のプログラマの仕事は減らせるかもしれない\r\n\r\n# さらに先の話\r\n\r\n- さらに AI がプログラマの仕事を奪うにはどんなことが必要か\r\n  - 生成されたアプリケーションを実行管理し安定運用してくれるインフラをなんとかしてもらう必要がありそう\r\n    - 生成されたアプリケーションと想定するサービス品質などを指定すると自動でインフラを展開して運用までやってくれるような仕組みはできるか？\r\n    - サーバー・ネットワーク・DB などの知識を隠蔽できるか？\r\n    - トラブルシューティングは可能か？\r\n      - この辺りができないとインフラ系のエンジニアの仕事はなくせなそう\r\n  - アプリケーションが正しく動いているか保証できる必要がありそう\r\n    - 想定外の挙動はないかコードレビューする\r\n    - 生成されたコードが想定通りの動作をしているかテストを書く\r\n    - 生成されたコードが想定通りの動作をしているか動作確認を行う\r\n    - 誤作動した時にストップできる\r\n      - この辺りを担保できないと品質保証系のエンジニアの仕事はなくせなそう\r\n- その他仕事に関してはどうか？\r\n  - 他の役職に関しては詳しくないので何もいえない\r\n    - というか自分の理解が浅いかもしれない職に関して簡単に奪われる職として挙げるのは憚られる\r\n\r\n# 雑多な話\r\n\r\n## 生成されるコード\r\n\r\n- AI が生成するコードは既存のプログラミング言語で書かれたコードである必要はあるのか\r\n  - コード片を人間が読まなくても良いレベルのクオリティなら既存の言語で吐き出す意味はないのでは\r\n    - トラブルシューティングしづらそう\r\n    - 過去の資産(GitHub 上のコードとか)を利用するなら既存のプログラミング言語の方が吐き出しやすそうではある\r\n- AI が吐き出しやすいようなコードを書くという価値観が新たにコーディング規約に追加されたりするかも\r\n- そもそも実行バイナリを吐き出すだけではダメか？\r\n  - 実行バイナリをブラックボックステストであとは QA エンジニアが検証するだけのお仕事で良いのでは\r\n    - とはいえトラブルシューティングしづらそうなのはキツいか\r\n\r\n## 開発体験\r\n\r\n- 開発体験(DX)の向上は必要か？\r\n  - AI が大方のコード生成をしてくれるなら開発体験の向上にコストをかける必要はあるのか\r\n  - プログラマがコードに手を入れなくても良いなら lint とか formatter とか型とかもいらないのでは\r\n- プログラミング言語やフレームワークの選定はどう変わるか？\r\n  - AI が一番精度良く吐き出せる言語が人気になるか\r\n  - ただまぁこれは今と変わらず要件次第になりそうではあるな\r\n\r\n## プログラマの仕事\r\n\r\n- プログラマの仕事はどう変わるか\r\n  - コードを書く比重が減り、コード片を生成する作業とシステムを組み上げる作業に比重が移りそう\r\n  - 要件を分解しシステムを構成するコード片を生成するためのプロンプト作成作業が大量に発生しそう\r\n  - より必要になる能力\r\n    - 業務知識への明るさ\r\n    - 調整能力(コミュニケーション力含め)\r\n    - 要件の分解とそのそれぞれへの解決策を文章化する能力\r\n    - **システム全体**の設計力\r\n  - 今も似たようなことをやってるはずだし必要な能力は変わらなそう\r\n  - コード化する部分がめちゃくちゃ爆速になるだけか？\r\n- フロントエンドエンジニアとかバックエンドエンジニアみたいな職域の境はなくなり、システム全体を設計して形にできる全部できる強いフルスタックな人が 1 人いればアプリケーション開発には十分というチーム構成になる可能性はあるかも\r\n- システムの安定性を向上させたり保証する仕事の重要性が増しそう\r\n  - 要は**AI の尻拭い**\r\n    - テストや QA を手厚くやって AI の生成したコードの穴を塞ぐ仕事\r\n    - コードレビューの仕事\r\n  - QA 用 AI が出てくる可能性もあるが、その AI の QA を誰がやるのか？とかその AI は業務依存の実装になりそうなので維持管理は内製になりそう\r\n    - AI より安いマンパワーを使った方がコスパ良いとかありそう\r\n- インフラ周りは構築はまだしも運用を完全に AI に代替させることで仕事を奪わせるのは難しそうに感じる、というか想像できない\r\n  - ただ自社で DC 持ってるとかよっぽど特殊な要件のアプリケーションでなければクラウドベンダが良い感じのソリューションを出してきそうではある。昔に比べたら今でも十分インフラは深い知識なくてもある程度構築運用できるし。\r\n- 責任を取ること\r\n  - AI のミスの尻拭いは人間がやる\r\n\r\n## 完全に未知の概念に対応できるか\r\n\r\n- 「イスカルテンダ王国のスルマオン暦のランフォイを求めるコード」みたいな未知の概念は AI に正しく対応できない(はず)\r\n- AI が知らないものは人間が頑張るしかない\r\n\r\n## AI の学習ソースはどうなるのか\r\n\r\n- 現状は GitHub やインターネット上のコードを学習してモデルを作ってると思うが、近い将来学習ソースが枯渇するという話がある\r\n- 将棋 AI は将棋 AI の生成した棋譜をさらに学習したりしているが、AI が生成したプログラミングのコードをさらに学習したりすれば解決するか？\r\n  - 将棋における[floodgate](http://wdoor.c.u-tokyo.ac.jp/shogi/floodgate.html)みたいな AI が作ったソースコードが実行されたり共有されたりするものが生まれるか？\r\n\r\n## 信頼性\r\n\r\n- AI が生成したコードをどこまで信頼できるか\r\n  - 例えばある手術に使われる機器のソフトウェアが一切人間の手が入っていない AI による自動生成コードで作られているとして、自分の娘がその機器で手術を受けると知ったら、今の AI のレベルなら 100%手術をやめさせると思う\r\n  - その信頼性を**担保するための仕事**(コードを人間が書くべきといっているわけではない)はしばらくは人間の仕事になりそう\r\n  - 特に人の営みと高度に接続する必要がある場面では避けられないように思う\r\n    - AI にはパーソナリティや家族のような守るべきものが(現時点では)ないという点がある種の弱点(利点)な気がする\r\n- AI は人との営みの中で何か重要なことを行うためには責任感が足りなすぎる\r\n  - 失敗しましたごめんな！で済まない場面への対応を整備する必要がありそう\r\n  - そうなると責任は開発(会社|者)が取るしかない。AI の尻拭いは人間がやる。\r\n- ある程度無責任でも良い場面には使えるが強く責任が伴う場面では、失敗した場合のケアや予防策を構築する必要がある\r\n\r\n## シンギュラリティ\r\n\r\n- AI が考え、AI が解決案を生み出し、また AI が問題を見つけ、AI が解決を試みるみたいなシンギュラリティ的な世界は一部の分野ではもうすぐあり得そう\r\n- 社会の中でも広く適用されるためには失敗の責任を自分で取れる、自分で尻拭いできる能力が AI に生まれたら世界は変わりそう。まだまだ SF っぽいだいぶ先の話な気もする。\r\n- プログラマはAIの失敗の尻拭いをするために謝罪の練習をしておくと良さそう(?)\r\n\r\n # [追記] コード生成ではなくシステム生成できるレベル\r\n\r\n- 昨夜もう少しちゃんと考えてみたが、そもそもコード生成というのをやめてシステム全体を生成して展開するところまで一気通貫でやってしまえるならどうか\r\n  - 例えば仕様書とシステム構成をアップロードしたらアプリケーションコードが生成されインフラが構築され一気にAWSか何かに展開される感じ\r\n    - 生成されたシステムをブラックボックスでテストして振る舞いなど問題なければOKみたいな。\r\n    - これで十分な案件はかなりあるのでは。\r\n  - これなら新規開発に関してはもうコーディングが完全にいらないしインフラ周りの仕事も消える\r\n  - 昨日書いた時はどのみち既存システムの改修とかは既存データをどうするかとか既存インフラとのつなぎ合わせとか調整の関係で大変じゃないかと思っていたが、そもそも全て改修時にスクラップ&ビルドすれば良いなと思った\r\n    - アプリケーションコードもインフラ側も全部都度作り直す\r\n    - そうなると既存データとどう整合性を保つかだけが問題になる\r\n      - であればここだけ人間が頑張れば良いのでは...\r\n      - というかここまでできるならデータに関してもAI側でやってくれそう\r\n  - もうこの段階まで来ると変更容易性だとか**保守性に関する概念すら全て過去の遺物**\r\n  - あとは品質管理だけどうするかだけど、これもテストと品質水準をまとめてAIに提出し検証してもらう感じで良いのかも。\r\n    - ブコメなどでも書かれていたが確かにここまでくるともう人間が把握できる規模ではないかもだし、どのみち機械に頼らないといけない部分も出てきそう。\r\n    - このへんも時間の問題なのかもしれないな...\r\n\r\n# [追記] システム開発がなくなる世界線\r\n- ここまで簡単にシステム開発を適用できるようになると、そもそも世の中的に必要なソフトウェアが全ての業界に行き渡りあらかた開発され切ってしまったという世界線もあるか\r\n- ある意味今でいうところの白物家電みたいな。\r\n- そうなるとシステム開発という業種自体かなり下火になりそう\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/comments","created_at":"2022-12-03T08:28:02Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/26","id":1473845983,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5X2Rrf","number":26,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/timeline","title":"どのようにしてプログラマはAIに仕事を奪われていくかの妄想","updated_at":"2022-12-04T01:15:33Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"# 背景\r\n今までは出勤やらなんやらで外を出歩くことが多かったが、リモートワークでそれらが完全になくなった。宅食を使ってるから食事も家でなんとかなってしまうし2日間外に出ないなんてこともまぁまぁあるので良くない。\r\n\r\n厚生労働省の[身体活動・運動](https://www.mhlw.go.jp/www1/topics/kenko21_11/b2.html)によると生活習慣病やメンタルヘルスの予防には普段からの身体活動量の増加が重要らしい。が、一部周囲の先輩方によると40を超えていきなり運動を始めようとして膝や腰を痛めたりしてさらに不健康になってる人もいた。歳をとると健康のために運動しようと思ってさらに怪我をするという惨状が結構あるみたいで、これを避けるには早いうちから運動習慣をつけた方がいい。\r\n\r\n自分は元々十数年前は大学で陸上部に入っていたので基礎的な心得はある。厚生労働省の先の資料にもある通り完全に運動経験のない人は歩くことから始めるべきだが自分の場合はそういう背景もあるのでウォーキングよりもジョギングくらいから始めても大丈夫そうと判断し久々にランニングシューズに足を通してジョギングを始めた。\r\n\r\n# 準備\r\nまずはジョギングを始めるための準備で買ったものがいくつかあるので書いておく。\r\n\r\n## シャツ\r\n一つはシャツ。ジョギング用のTシャツはいくらあっても困らんのでユニクロで3,4枚まとめて買った。[ドライEX系のシャツ](https://www.uniqlo.com/jp/ja/products/E449017-000/00?colorDisplayCode=66&sizeDisplayCode=004)がサラサラしてて良さそうだった。まぁ普通に気にならない人ならすでに持っている自前のTシャツでも良いと思う。\r\n\r\n## 骨伝導イヤホン\r\n![IMG_3418_res](https://user-images.githubusercontent.com/1421093/190836175-4a561518-ec86-4f53-bfc9-fd8b2e23c35b.JPG)\r\n\r\nあとは骨伝導イヤホン。Shokzの[OpenMove](https://amzn.to/3qNIeTz)というのを購入した。実はこれはジョギング専用ということではなく元々気になってはいたんだけど、ちょうど楽天で30%OFFになっており良い機会なので購入した感じ。普通のイヤホンだと耳に入れないといけないが、汗をかくと気持ち悪い感じになるし走ってると抜け落ちそうになるので怖い。OpenMoveなら耳の上にかけるだけだし走ってもブレないので良い。加えて周囲の音がしっかり聞こえるので脇道からの急な自転車の飛び出しなどにも気付きやすいというのもある。\r\n\r\n骨伝導イヤホンの便利さについてはこの記事がわかりやすい。自分も似たような意見だ。\r\n- [骨伝導ヘッドセット着けっぱなしな生活を始めて1年が過ぎた](https://honeshabri.hatenablog.com/entry/aftershokz-air2)\r\n\r\n## スマホを入れるやつ\r\n本当は走るときは何も持たない方が楽だけど、出先での何かあった時に困るのでスマホは持ち歩きたい。普段はスマートウォッチとしてシャオミの[Mi Band](https://amzn.to/3DydBZQ)を使っているのだけど、これはスマホを携帯していないとワークアウト時の計測の精度が出ない。実測してみたがスマホを携帯している時と比べてだいぶ少なめに走行距離が計測される。たくさん走ったのに過小記録されるとモチベが落ちるので避けたい。\r\n\r\n世の中の人々はスマホをどうやって持ち歩いてるのか調べてみたところ、[腕につけるタイプ](https://amzn.to/3LnCFEB)と[腰につけるタイプ](https://amzn.to/3Dz0U12)の人が多かった。前者は「ランニング アームバンド」とかで検索すれば良いし、後者は「ランニング ウエストポーチ」で検索すれば良い。が自分はどちらも買わずにダイソーで[200円のウエストポーチ](https://jp.daisonet.com/collections/accessory0205/products/4549131941081)を購入し、それを襷掛けして使っている。少し揺れるのでだるい感じもあるがある程度使うと慣れるし、最初は安物でいいやと思ってこれを使ってる。\r\n\r\n## ランニングシューズ\r\n10年前に購入したランニングシューズがあったのでそれをそのまま利用。\r\n\r\n## ズボン\r\n陸上部時代の短パンがあったのでそれをそのまま使ってる。\r\n\r\n# 走る\r\n実際に準備が整ったので走り始めた。走る前には入念にストレッチをする。準備運動を怠ると体に支障を起こすので絶対にやる。\r\n\r\n走るコースは近所にちょうどよくランニングに適した歩道があるのでそこを適当に走ってみることにした。時間帯は朝に走るのは精神的にキツすぎるので仕事終わりの夜。涼しいし人も少ないので集中できる。寝る前すぎると交感神経が高まってしまい睡眠の質が落ちそうなので寝る2時間以上前には走ることにしてる。\r\n\r\n初日。走り始めて500mくらいで両脚が死んだ。痛いんじゃなくて400mとかを走って乳酸が溜まり激重になった感じが両脚全体を襲っていた。自分がこんなに走れなくなっていることに絶望しながら結局10分/km程度の激遅ペースで2kmくらい走って終わった。惨敗である。\r\n\r\nそれから1日おきくらいに走り続けて今は大体10回目くらいなんだけど今は8分/kmのペースで5kmくらいは走れるところまで改善した。足の筋肉が衰えまくっており初日の惨劇を引き起こしていたが心肺機能の方はそれほど衰えていなくて思ったよりも早く走れるようになってきている。\r\n\r\n当面は最低10分/kmで1時間くらいは走り続けられるようになることを目標にしている。別に大会に出る予定もないので楽なペースで一定時間走り続けられれば良い。\r\n\r\n# Podcast\r\nところで走りつづけている際にPodcastを聴くようにしてるのだけどこれがとても良い。大体どのPodcastも1~2時間くらいなので倍速で聴きながら走り終えるとちょうどいい感じでPodcastを一つ消化できる。走ることとPodcastを聴くことしかやれないので、PCやスマホやその他の雑事が集中を妨げることもない。集中してPodcastを聴ける。\r\n\r\n聞いているチャンネルは主に技術Podcast。今は下記のPodcastあたりを聴いているところ。\r\n\r\n- [rebuild.fm](https://rebuild.fm/)\r\n- [texta.fm](https://podcasts.apple.com/jp/podcast/texta-fm/id1530076592?l=en)\r\n- [misreading chat](https://misreading.chat/)\r\n\r\nPodcastにそんなに詳しくないので技術系のPodcastでおすすめのものがあったら教えてほしい所存。\r\n\r\n# 感想\r\n走ると単純に気持ちいい。元々走り慣れているのもあるが走ると不要なことを考えずに集中できるので脳が整理される。\r\n\r\n幸い足の関節が痛くなったりということは発生していない。おそらくBMI17.6くらいの低体重なので足への負荷が少ないのと普段から家で体幹トレーニングやスクワットなどをやっているから基礎筋力はついているのだと思う。走り方も昔取った杵柄で悪くないというのもありそう。\r\n\r\nただ足の裏の皮が軽く剥がれたりしててそれはちょっと痛い。豆みたいなもの。これはどうしようもなさそうだが走り続けていけば落ち着くと思う。\r\n\r\nあとジョギング後に食べるアイスが美味しすぎてやばい。これはいわゆるサウナ後に飲むオロポみたいなもので麻薬的な\"良さ\"がある。気をつけたい。\r\n\r\nこれからはより走りやすい季節になってくるし走るのが楽しくなっていきそう。","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/22/comments","created_at":"2022-09-17T02:05:50Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/22/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/22","id":1376634817,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/22/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5SDcfB","number":22,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/22/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/22/timeline","title":"ジョギングを始めた","updated_at":"2022-09-17T02:05:50Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/22","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}}]},"__N_SSG":true}