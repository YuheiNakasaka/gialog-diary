{"pageProps":{"issue":{"body":"最近ほぼ毎日カレーを食ってるんだけど、今日はなんとなくの思い付きで火鍋をカレーにしたらめちゃくちゃ美味かったので忘れないようにレシピを書き記しておく。\r\n\r\n# 材料(2人分)\r\n## A) 火鍋\r\n- 豆板醤: 大さじ1\r\n- 花椒: 小さじ1\r\n- 八角: ちょっと\r\n- 鷹の爪: 1カケラ\r\n- 桃屋のしびれと辛さががっつり効いた麻辣香油(もしない場合は普通の食べるラー油+ニンニクをガッツリ): 1/3瓶\r\n- ウェイパー: 小さじ1\r\n- 水: 300cc前後\r\n\r\n## B) 具(何入れてもOK)\r\n- とり肉: 適当\r\n- にんじん: 適当\r\n- 玉ねぎ: 適当\r\n- じゃがいも: 適当\r\n\r\n## C) カレー\r\n- S&Bのカレーフレーク(固形でも多分OKだが安物はやめろ、最低限ジャワ): 大さじ2.5\r\n\r\n## 作り方\r\n### 鍋にA)火鍋を全部投入して中火にかけて煮立たせる(15分くらい)\r\nぐつぐつの方が火鍋感が出て良い。\r\n\r\n### B)具を火が通るまで炒める\r\n具は何を入れてもOK。にんじんが美味かったのでおすすめ。\r\n\r\n### B)を火鍋に投入する\r\n具が馴染むまで少しかき混ぜる\r\n\r\n### C)カレー を鍋に投入する\r\nカレーが全体に溶け切るまで混ぜる。もしとろみが足りなければルーを足す。とろみが多すぎたら水を足せ。\r\n\r\n## 写真\r\n![IMG_3277 2](https://user-images.githubusercontent.com/1421093/183254406-995b65fb-c721-40ba-9c85-1875b49997fb.JPG)\r\n![IMG_3278](https://user-images.githubusercontent.com/1421093/183254480-e3a1a331-8210-4d2d-97d1-9f3459398007.JPG)\r\n![IMG_3281](https://user-images.githubusercontent.com/1421093/183254425-1b6ba9f0-e277-4092-8a9e-a806b5e0d38e.JPG)\r\n\r\n## 感想\r\n基本はカレーだが遠くで中華の声が聞こえるような感じの味。花椒とニンニクとシビ辛が効いていて最高。火鍋自体で出汁みたいなものが効いているので全体として味の密度が異常。\r\n\r\n[桃屋のしびれと辛さががっつり効いた麻辣香油](https://www.momoya.co.jp/shop/products/detail/115)がかなり重要なのでお近くのスーパーで買ってくれ。カレールーは固定のやつでも全然OKだがPBの安物はやめた方が良い。火鍋に味が負けるので。最低でもジャワあたりで。\r\n\r\n全体的に結構辛めなのでお腹が弱い人は注意。\r\n\r\nおすすめ。","bodyHTML":"<p>最近ほぼ毎日カレーを食ってるんだけど、今日はなんとなくの思い付きで火鍋をカレーにしたらめちゃくちゃ美味かったので忘れないようにレシピを書き記しておく。</p>\n<h1>材料(2人分)</h1>\n<h2>A) 火鍋</h2>\n<ul>\n<li>豆板醤: 大さじ1</li>\n<li>花椒: 小さじ1</li>\n<li>八角: ちょっと</li>\n<li>鷹の爪: 1カケラ</li>\n<li>桃屋のしびれと辛さががっつり効いた麻辣香油(もしない場合は普通の食べるラー油+ニンニクをガッツリ): 1/3瓶</li>\n<li>ウェイパー: 小さじ1</li>\n<li>水: 300cc前後</li>\n</ul>\n<h2>B) 具(何入れてもOK)</h2>\n<ul>\n<li>とり肉: 適当</li>\n<li>にんじん: 適当</li>\n<li>玉ねぎ: 適当</li>\n<li>じゃがいも: 適当</li>\n</ul>\n<h2>C) カレー</h2>\n<ul>\n<li>S&#x26;Bのカレーフレーク(固形でも多分OKだが安物はやめろ、最低限ジャワ): 大さじ2.5</li>\n</ul>\n<h2>作り方</h2>\n<h3>鍋にA)火鍋を全部投入して中火にかけて煮立たせる(15分くらい)</h3>\n<p>ぐつぐつの方が火鍋感が出て良い。</p>\n<h3>B)具を火が通るまで炒める</h3>\n<p>具は何を入れてもOK。にんじんが美味かったのでおすすめ。</p>\n<h3>B)を火鍋に投入する</h3>\n<p>具が馴染むまで少しかき混ぜる</p>\n<h3>C)カレー を鍋に投入する</h3>\n<p>カレーが全体に溶け切るまで混ぜる。もしとろみが足りなければルーを足す。とろみが多すぎたら水を足せ。</p>\n<h2>写真</h2>\n<p><img src=\"https://user-images.githubusercontent.com/1421093/183254406-995b65fb-c721-40ba-9c85-1875b49997fb.JPG\" alt=\"IMG_3277 2\">\r\n<img src=\"https://user-images.githubusercontent.com/1421093/183254480-e3a1a331-8210-4d2d-97d1-9f3459398007.JPG\" alt=\"IMG_3278\">\r\n<img src=\"https://user-images.githubusercontent.com/1421093/183254425-1b6ba9f0-e277-4092-8a9e-a806b5e0d38e.JPG\" alt=\"IMG_3281\"></p>\n<h2>感想</h2>\n<p>基本はカレーだが遠くで中華の声が聞こえるような感じの味。花椒とニンニクとシビ辛が効いていて最高。火鍋自体で出汁みたいなものが効いているので全体として味の密度が異常。</p>\n<p><a href=\"https://www.momoya.co.jp/shop/products/detail/115\">桃屋のしびれと辛さががっつり効いた麻辣香油</a>がかなり重要なのでお近くのスーパーで買ってくれ。カレールーは固定のやつでも全然OKだがPBの安物はやめた方が良い。火鍋に味が負けるので。最低でもジャワあたりで。</p>\n<p>全体的に結構辛めなのでお腹が弱い人は注意。</p>\n<p>おすすめ。</p>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/17/comments","created_at":"2022-08-06T15:06:37Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/17/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/17","id":1330775595,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/17/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5PUgYr","number":17,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/17/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/17/timeline","title":"火鍋カレー","updated_at":"2022-08-06T15:10:30Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/17","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},"issueComments":[],"pickupArticles":[{"body":"東京都調布市にある深大寺という寺に行った。おそらく調布駅が最寄りだがそこから歩くとなると30分以上はかかる。吉祥寺方面から行くにいても調布側から行くにしてもバスを乗り継ぐ方が良い。車があるなら駐車場はたくさんあるので車で行くべき。そのくらいの距離感の場所にあるので少々アクセス的には面倒な場所である。\r\n\r\nしかしながらその距離感のおかげが深大寺自体は夏休み真っ只中の晴天の日でもそれほど混雑しておらず快適に過ごせた。\r\n\r\n深大寺には文字通り\"深大寺\"という寺がある。深大寺には都内では唯一の[国宝・釈迦如来像](https://www.jindaiji.or.jp/about/kokuho.php)がありそれを目当てに遠くからやってくる人々がいるようだ。自分はというと深大寺それ自体よりもその周辺の店々や自然豊かな植物園を散歩したくて行った。\r\n\r\n![mosaic_20220820183523_600 (1)](https://user-images.githubusercontent.com/1421093/185739346-b6d01671-1439-40c4-a271-76697c1080f7.png)\r\n\r\n深大寺は蕎麦が有名だ。なんでも周辺には20店ほどの蕎麦屋が深大寺を取り囲むように軒を連ねているらしい。もちろん自分もそばを食べた。晴れていたのでテラス席で池を目の前にして蕎麦を啜った。味はまぁ普通という感じではあったが自然に囲まれた場所で蕎麦を食べられる体験は中々よかった。\r\n\r\n![VPih22h5iI6ab0k1660988394_1660988448_600](https://user-images.githubusercontent.com/1421093/185739573-48cc4089-722d-4215-b2b4-dcec4611a830.jpg)\r\n![IMG_3325_600](https://user-images.githubusercontent.com/1421093/185739619-433a2c26-9248-41c0-aaf3-7ab04e60cf66.JPG)\r\n\r\nまた調布市にゆかりのある水木しげるにちなんでゲゲゲの鬼太郎に関する店もあった。寺の前に鬼太郎のモニュメントが飾られていて謎のロケーションではあったが子供を中心にそれなりな人だかりを作っていた。\r\n\r\n![mosaic_20220820184335_600 (1)](https://user-images.githubusercontent.com/1421093/185739698-2e7ad039-91a7-4600-bcb1-433d72c8b6e9.png)\r\n\r\n![IMG_3330_600](https://user-images.githubusercontent.com/1421093/185739737-a3934f1d-6e3a-4431-9fab-92631b5cb470.JPG)\r\n\r\n深大寺の裏手には[神代植物公園](https://ja.wikipedia.org/wiki/%E7%A5%9E%E4%BB%A3%E6%A4%8D%E7%89%A9%E5%85%AC%E5%9C%92)という都内としてはかなり広大な植物公園(有料: 大人500円)がある。有料公園ということでこれまた休日なのに人が全然いないのでとてもゆったり過ごせる。雑木林を歩いたり、広い芝生の広場でピクニックをしたり、4000種類以上のバラが拝めるバラ園があったりとただ歩いてるだけでも飽きない。カナヘビの赤ちゃんを発見して懐かしい気持ちになったりもした。\r\n\r\n![IMG_3338_600](https://user-images.githubusercontent.com/1421093/185739782-065cdcae-4f6f-4a1b-b34b-2ad0a2156452.JPG)\r\n\r\n![IMG_3337_600](https://user-images.githubusercontent.com/1421093/185739819-02412eee-64f6-421b-aa51-b9115cf7335f.JPG)\r\n\r\nいろんな園がある中でもバラ園の横にある大温室という熱帯植物を中心に展示されている施設が面白かった。ここではあの2年に1度しか咲かない花で有名な[ショクダイオオコンニャク](https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%A7%E3%82%AF%E3%83%80%E3%82%A4%E3%82%AA%E3%82%AA%E3%82%B3%E3%83%B3%E3%83%8B%E3%83%A3%E3%82%AF)が育てられている。今回訪れた際はその姿を拝むことはできなかったが巨大なプランターはその大きさを物語っていた。その他にも背丈を遥かに超えるバナナの木や食虫植物などもあり自然のパワーを感じた。\r\n\r\n![IMG_3341_600](https://user-images.githubusercontent.com/1421093/185739892-132d5f5a-e38a-417a-aee3-c0df139030a4.JPG)\r\n![IMG_3346_600](https://user-images.githubusercontent.com/1421093/185739917-0168506d-ecc1-45cc-b0b9-5b781a662448.JPG)\r\n![mosaic_20220820185044_600 (1)](https://user-images.githubusercontent.com/1421093/185739977-7e0eef04-ceef-405b-b26a-54fe63a6eb08.png)\r\n![IMG_3343_600](https://user-images.githubusercontent.com/1421093/185740015-a0e50519-c0f2-4bc4-8463-8f4e6a5540fb.JPG)\r\n![IMG_3353_600](https://user-images.githubusercontent.com/1421093/185740065-f3e0a56a-bb42-4d7e-8c1c-2c5ca0b795d7.JPG)\r\n\r\nバラ園の前に百台ほどのベンチが一列に並んでいるエリアがある。誰も座ってなくて異様な雰囲気だった。しかもよく見てみると8割くらいのベンチにメッセージが彫ってあってめちゃくちゃ不気味だった。座りずらすぎる...\r\n![IMG_3355_600](https://user-images.githubusercontent.com/1421093/185740263-e0dc2642-3c38-400b-8e3e-4c64c2ecc561.JPG)\r\n![IMG_3357_600](https://user-images.githubusercontent.com/1421093/185740291-beabbcb1-aef1-47ff-be53-85ad9ccc1965.JPG)\r\n\r\n\r\n都内で静かに自然を感じたいと思った時に選択として挙がるのは、\r\n\r\n- 等々力渓谷\r\n- 高尾山\r\n- 奥多摩\r\n- 秋川渓谷\r\n\r\nくらいなものかなと思っていたのだけど、如何せん等々力渓谷以外はおいそれと気軽に行けるような位置にない。しかし深大寺は自分が今住んでいる地域からアクセスがそれほど悪くない(せいぜい1時間以内で行ける)のでいい場所を見つけた気がした。\r\n\r\n他にも都内で自然を感じられるお手軽スポット情報があれば教えてほしい。","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/19/comments","created_at":"2022-08-20T09:59:10Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/19/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/19","id":1345112334,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/19/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5QLMkO","number":19,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/19/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/19/timeline","title":"深大寺に行った","updated_at":"2022-08-20T09:59:10Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/19","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"[Web Development with Ruby on Rails](https://amzn.to/3N2XFRl)を読んでる。\r\n\r\nmodelにロジックは書かない、1コントローラーメソッドに対して1Serviceにしてそこに必要なビジネスロジックは詰めこむ、serviceは1メソッドしかpublicにしない、serviceのpublicなメソッドの振る舞いのみ入念にテストするという割り切った考えは前評判どおりだけど思想強ぇ〜となった。\r\n\r\nRailsでDDDとかやろうとするとドメインの整理から始まりmodelはただのDTOにしてentityやvalue object等の実装を用意して、なんというか少なくとも実装に関してはクラスがめちゃくちゃ増えていくイメージだけど著者はむしろそういうのと逆方向(というかRailsとしては自然な方向)に逆らわず標準提供されてる道具を使って、最低限のレイヤーをサステナブルという目的(ここが重要)を達成するためだけに追加するという考えだ。\r\n\r\n設計に絶対的な正解はなく、未来・要件・チーム・言語・フレームワークなどにあらゆる環境によって最適な選択は変わるという当たり前のことを思い知らされる感じ。\r\n\r\n[良いコード／悪いコードで学ぶ設計入門](https://amzn.to/3PNmkuN)を読んだあとなのでなおのことその実装方針の差が面白く感じた。\r\n\r\n良いコード設計ができるというのはこういった多種多様な設計方針や実装方法の引き出しがあり、その中から妥当なものを選択できる能力なのだろうと思う。(もっと広い意味でだけど)アーキテクチャ選択に絶対はないというのは[ソフトウェアアーキテクチャの基礎](https://amzn.to/3POoAly)でも書いてあった気がする。\r\n\r\n自分は金にならんプロジェクト(スタートアップのすぐ解散するアプリ開発や少人数開発みたいなもの)ばかりやってきたから将来性についてあまり深く考えなくてもぶっちゃけよくて、そんなに神経質に設計について固執してこなかった。そのツケみたいなもので設計に関するスキルにややコンプレックスがあるから最近はこういう本をいくつか読んで妄想したりしている。\r\n\r\n自分のようなバックグラウンドの人間からするとどんなにクソコードでも金を産むコードに対してまずはリスペクトが生まれてしまうという悲しい性。めくじらたててキレ散らかしてる人を見るとなんともいえない感情にならん訳でもない。もちろんそれとこれとは別なのは理解するが....","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/comments","created_at":"2022-05-30T09:55:28Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/3","id":1252487542,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5Kp3F2","number":3,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/timeline","title":"Web Development with Ruby on Railsと悲しい性","updated_at":"2022-05-30T09:55:55Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"- 先日 OpenAI から[ChatGPT](https://chat.openai.com/chat)が Beta 公開された\r\n- ChatGPT ではどんな質問に対しても何かしらの回答を生成してくれるのだが、ソースコードに関しても中々の筋が良さそうな雰囲気のコード片を生成してくれるということで少し話題になっていた\r\n- こうしたプログラムを生成してくれる AI が発展していく中でどういう具合にプログラマの仕事が奪われていくのか興味がある\r\n- 特に以下では**web アプリやモバイルアプリなどのアプリケーションの開発において**という文脈で考えることにする\r\n- まず AI がプログラマの仕事を奪うまでにはいくつかの段階があると思う\r\n\r\n# コード支援レベル\r\n\r\n- 現状は[GitHub Copilot](https://github.com/features/copilot)のようなコーディング支援を行うレベルの AI はある程度実用レベルになっている\r\n  - 自分は Copilot が生成したコード片をプロダクションコードに含めるのは権利関係の問題もあり様子見している\r\n  - しかし Copilot を使っていないわけではなく、変数名や定型作業のサジェストや変数名の補完、コードの書き出しの補助などで利用している\r\n    - 例えば API のレスポンスで受け取る予定の JSON をペタッと貼るとそれにあった構造体とか型が丸ッと生成されたりする。スニペットとか静的なコードジェネレータでやってたような作業が良い感じにできるなど。\r\n  - 正直このようなコーディングの支援 AI だけではプログラマの仕事は AI に奪われないだろう。全然奪うというよりプログラマの手助けをするだけなので、これではまだまだプログラマがいないとアプリケーションは完成しない。\r\n\r\n# ChatGPT レベル\r\n\r\n- では ChatGPT のようにある程度まとまったサイズのコード片を生成してくれる AI が普及するとどうなるか\r\n  - Twitter ではさまざまなプログラマがコード片の生成を試みているがその内容を見るとそのまま使えるコードが半分、修正が必要なコードが 1〜2 割、完全に間違っているコードが 3〜4 割という感じだ\r\n  - 今のクオリティだと人が書いた方がまだ早い、もしくはプログラマによる手修正が結構必要そう。なのでプログラマがいないとまだアプリケーションは完成させられないだろう\r\n  - ただし修正すること前提で簡単なタスク用のまとまったコード片を生成してコーディングの時間短縮、といった使い方はできるかもしれない\r\n  - ある意味これもコーディング支援というレベルではある\r\n    - というか GitHub Copilot が GPT-3 を使ってるから実質同じといえば同じ\r\n\r\n# かなり高精度にコード生成できるレベル\r\n\r\n- ではそのまま使えるコード片を ほぼ 100%のクオリティで生成できる AI が登場するようになるとどうか\r\n  - ここまでくると AI に生成してほしいコードの内容を伝えてコード片を大量に生成してもらい、それをプログラマが組み合わせてアプリケーションという形にする流れでも現実的になってきそう\r\n    - 例えば「メールアドレス認証するコード書いて」「CRUD なフォームのモデルとコントローラとビューを書いて」等々でいくつかの動くコード片が生成される\r\n    - 人間はこれらをつなぎ合わせるだけでアプリケーションが完成するイメージ\r\n      - こうしたコード片をつなぎ合わせる仕事はアセンブリエンジニアとでも呼ばれるようになりそう\r\n  - **AI には体力が無いかつマシンさえあれば並列で大量に実行できるという人間には成し得ない強力な生産性がある**\r\n    - 金とマシンさえあれば 24 時間並列で一気にコード生成してもらえるはず\r\n  - よって例えば今までだと新規でアプリケーションを完成させるのに必要なプログラマが 1 人月必要だった案件でも AI にコーディング部分を大幅に代替してもらえるなら一部コード修正やレビューが必要にしても、数人日で完成させられるようなことはあるかもしれない\r\n  - この辺りから一部のプログラマの仕事は AI に奪われたと言われるようになるだろう\r\n- とはいえこれらは**新規開発の場合のみの話**だ\r\n- 仕事におけるプロダクションで稼働するシステム開発の難易度の高い部分は既存システムへ追加・修正などの改修を入れるところである\r\n- どんなに正確なコード片を生成できたり、あるいはアプリケーション全体のコードを生成できたとしてもそれは新規開発時のコーディングの代替であり、一度本番に乗ってしまったコードを運用していく際にはちょっとやそっとのコード片の生成レベルでは代替は難しそうだ\r\n\r\n# 既存コードのコンテキストも読み取ってコード生成できるレベル\r\n\r\n- では改修要望を書くと既存コードのコンテキストを加味した状態の追加修正が入ったコードが丸っと生成されるようになるとどうか\r\n  - これが出来るならアプリケーションのコーディング部分を担当するプログラマはほぼ不要になるかもしれない\r\n    - 生成されたコードを既存コードに適用するくらいで済むレベルを想定\r\n  - 残りの仕事に必要なのは下記くらいか\r\n    - 生成されたコードが安定して実行し続けられるように周辺環境を作るインフラエンジニア\r\n    - 生成されたコードに問題はないか確認するコードレビューエンジニア\r\n    - 生成されたコードが想定通りに動くか確認する QA エンジニア\r\n    - AI のコード生成や生成したコードを管理するプロンプトエンジニア/アセンブリエンジニア?\r\n      - AI の癖を知り既存コードとの相性の良いプロンプトを管理するご機嫌伺い役\r\n- ここまでくると新規開発だけでなく既存システムの改修に関するコーディングはある程度代替できるのでさらに従来のプログラマの仕事は減らせるかもしれない\r\n\r\n# さらに先の話\r\n\r\n- さらに AI がプログラマの仕事を奪うにはどんなことが必要か\r\n  - 生成されたアプリケーションを実行管理し安定運用してくれるインフラをなんとかしてもらう必要がありそう\r\n    - 生成されたアプリケーションと想定するサービス品質などを指定すると自動でインフラを展開して運用までやってくれるような仕組みはできるか？\r\n    - サーバー・ネットワーク・DB などの知識を隠蔽できるか？\r\n    - トラブルシューティングは可能か？\r\n      - この辺りができないとインフラ系のエンジニアの仕事はなくせなそう\r\n  - アプリケーションが正しく動いているか保証できる必要がありそう\r\n    - 想定外の挙動はないかコードレビューする\r\n    - 生成されたコードが想定通りの動作をしているかテストを書く\r\n    - 生成されたコードが想定通りの動作をしているか動作確認を行う\r\n    - 誤作動した時にストップできる\r\n      - この辺りを担保できないと品質保証系のエンジニアの仕事はなくせなそう\r\n- その他仕事に関してはどうか？\r\n  - 他の役職に関しては詳しくないので何もいえない\r\n    - というか自分の理解が浅いかもしれない職に関して簡単に奪われる職として挙げるのは憚られる\r\n\r\n# 雑多な話\r\n\r\n## 生成されるコード\r\n\r\n- AI が生成するコードは既存のプログラミング言語で書かれたコードである必要はあるのか\r\n  - コード片を人間が読まなくても良いレベルのクオリティなら既存の言語で吐き出す意味はないのでは\r\n    - トラブルシューティングしづらそう\r\n    - 過去の資産(GitHub 上のコードとか)を利用するなら既存のプログラミング言語の方が吐き出しやすそうではある\r\n- AI が吐き出しやすいようなコードを書くという価値観が新たにコーディング規約に追加されたりするかも\r\n- そもそも実行バイナリを吐き出すだけではダメか？\r\n  - 実行バイナリをブラックボックステストであとは QA エンジニアが検証するだけのお仕事で良いのでは\r\n    - とはいえトラブルシューティングしづらそうなのはキツいか\r\n\r\n## 開発体験\r\n\r\n- 開発体験(DX)の向上は必要か？\r\n  - AI が大方のコード生成をしてくれるなら開発体験の向上にコストをかける必要はあるのか\r\n  - プログラマがコードに手を入れなくても良いなら lint とか formatter とか型とかもいらないのでは\r\n- プログラミング言語やフレームワークの選定はどう変わるか？\r\n  - AI が一番精度良く吐き出せる言語が人気になるか\r\n  - ただまぁこれは今と変わらず要件次第になりそうではあるな\r\n\r\n## プログラマの仕事\r\n\r\n- プログラマの仕事はどう変わるか\r\n  - コードを書く比重が減り、コード片を生成する作業とシステムを組み上げる作業に比重が移りそう\r\n  - 要件を分解しシステムを構成するコード片を生成するためのプロンプト作成作業が大量に発生しそう\r\n  - より必要になる能力\r\n    - 業務知識への明るさ\r\n    - 調整能力(コミュニケーション力含め)\r\n    - 要件の分解とそのそれぞれへの解決策を文章化する能力\r\n    - **システム全体**の設計力\r\n  - 今も似たようなことをやってるはずだし必要な能力は変わらなそう\r\n  - コード化する部分がめちゃくちゃ爆速になるだけか？\r\n- フロントエンドエンジニアとかバックエンドエンジニアみたいな職域の境はなくなり、システム全体を設計して形にできる全部できる強いフルスタックな人が 1 人いればアプリケーション開発には十分というチーム構成になる可能性はあるかも\r\n- システムの安定性を向上させたり保証する仕事の重要性が増しそう\r\n  - 要は**AI の尻拭い**\r\n    - テストや QA を手厚くやって AI の生成したコードの穴を塞ぐ仕事\r\n    - コードレビューの仕事\r\n  - QA 用 AI が出てくる可能性もあるが、その AI の QA を誰がやるのか？とかその AI は業務依存の実装になりそうなので維持管理は内製になりそう\r\n    - AI より安いマンパワーを使った方がコスパ良いとかありそう\r\n- インフラ周りは構築はまだしも運用を完全に AI に代替させることで仕事を奪わせるのは難しそうに感じる、というか想像できない\r\n  - ただ自社で DC 持ってるとかよっぽど特殊な要件のアプリケーションでなければクラウドベンダが良い感じのソリューションを出してきそうではある。昔に比べたら今でも十分インフラは深い知識なくてもある程度構築運用できるし。\r\n- 責任を取ること\r\n  - AI のミスの尻拭いは人間がやる\r\n\r\n## 完全に未知の概念に対応できるか\r\n\r\n- 「イスカルテンダ王国のスルマオン暦のランフォイを求めるコード」みたいな未知の概念は AI に正しく対応できない(はず)\r\n- AI が知らないものは人間が頑張るしかない\r\n\r\n## AI の学習ソースはどうなるのか\r\n\r\n- 現状は GitHub やインターネット上のコードを学習してモデルを作ってると思うが、近い将来学習ソースが枯渇するという話がある\r\n- 将棋 AI は将棋 AI の生成した棋譜をさらに学習したりしているが、AI が生成したプログラミングのコードをさらに学習したりすれば解決するか？\r\n  - 将棋における[floodgate](http://wdoor.c.u-tokyo.ac.jp/shogi/floodgate.html)みたいな AI が作ったソースコードが実行されたり共有されたりするものが生まれるか？\r\n\r\n## 信頼性\r\n\r\n- AI が生成したコードをどこまで信頼できるか\r\n  - 例えばある手術に使われる機器のソフトウェアが一切人間の手が入っていない AI による自動生成コードで作られているとして、自分の娘がその機器で手術を受けると知ったら、今の AI のレベルなら 100%手術をやめさせると思う\r\n  - その信頼性を**担保するための仕事**(コードを人間が書くべきといっているわけではない)はしばらくは人間の仕事になりそう\r\n  - 特に人の営みと高度に接続する必要がある場面では避けられないように思う\r\n    - AI にはパーソナリティや家族のような守るべきものが(現時点では)ないという点がある種の弱点(利点)な気がする\r\n- AI は人との営みの中で何か重要なことを行うためには責任感が足りなすぎる\r\n  - 失敗しましたごめんな！で済まない場面への対応を整備する必要がありそう\r\n  - そうなると責任は開発(会社|者)が取るしかない。AI の尻拭いは人間がやる。\r\n- ある程度無責任でも良い場面には使えるが強く責任が伴う場面では、失敗した場合のケアや予防策を構築する必要がある\r\n\r\n## シンギュラリティ\r\n\r\n- AI が考え、AI が解決案を生み出し、また AI が問題を見つけ、AI が解決を試みるみたいなシンギュラリティ的な世界は一部の分野ではもうすぐあり得そう\r\n- 社会の中でも広く適用されるためには失敗の責任を自分で取れる、自分で尻拭いできる能力が AI に生まれたら世界は変わりそう。まだまだ SF っぽいだいぶ先の話な気もする。\r\n- プログラマはAIの失敗の尻拭いをするために謝罪の練習をしておくと良さそう(?)\r\n\r\n # [追記] コード生成ではなくシステム生成できるレベル\r\n\r\n- 昨夜もう少しちゃんと考えてみたが、そもそもコード生成というのをやめてシステム全体を生成して展開するところまで一気通貫でやってしまえるならどうか\r\n  - 例えば仕様書とシステム構成をアップロードしたらアプリケーションコードが生成されインフラが構築され一気にAWSか何かに展開される感じ\r\n    - 生成されたシステムをブラックボックスでテストして振る舞いなど問題なければOKみたいな。\r\n    - これで十分な案件はかなりあるのでは。\r\n  - これなら新規開発に関してはもうコーディングが完全にいらないしインフラ周りの仕事も消える\r\n  - 昨日書いた時はどのみち既存システムの改修とかは既存データをどうするかとか既存インフラとのつなぎ合わせとか調整の関係で大変じゃないかと思っていたが、そもそも全て改修時にスクラップ&ビルドすれば良いなと思った\r\n    - アプリケーションコードもインフラ側も全部都度作り直す\r\n    - そうなると既存データとどう整合性を保つかだけが問題になる\r\n      - であればここだけ人間が頑張れば良いのでは...\r\n      - というかここまでできるならデータに関してもAI側でやってくれそう\r\n  - もうこの段階まで来ると変更容易性だとか**保守性に関する概念すら全て過去の遺物**\r\n  - あとは品質管理だけどうするかだけど、これもテストと品質水準をまとめてAIに提出し検証してもらう感じで良いのかも。\r\n    - ブコメなどでも書かれていたが確かにここまでくるともう人間が把握できる規模ではないかもだし、どのみち機械に頼らないといけない部分も出てきそう。\r\n    - このへんも時間の問題なのかもしれないな...\r\n","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/comments","created_at":"2022-12-03T08:28:02Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/26","id":1473845983,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5X2Rrf","number":26,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26/timeline","title":"どのようにしてプログラマはAIに仕事を奪われていくかの妄想","updated_at":"2022-12-04T00:45:27Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/26","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}}]},"__N_SSG":true}