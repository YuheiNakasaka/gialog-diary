{"pageProps":{"issue":{"body":"![IMG_3393_re](https://user-images.githubusercontent.com/1421093/188592416-52c944d8-d57b-4d3f-9559-d044c8e380c7.JPG)\r\n\r\n抹茶とほぼ同等レベルで美味しい。黒胡麻ソースとクリームと合わせて食べないとだめ。それぞれ単体だとそれほどでもないが合わせるとめちゃくちゃ旨くなる。","bodyHTML":"<p><img src=\"https://user-images.githubusercontent.com/1421093/188592416-52c944d8-d57b-4d3f-9559-d044c8e380c7.JPG\" alt=\"IMG_3393_re\"></p>\n<p>抹茶とほぼ同等レベルで美味しい。黒胡麻ソースとクリームと合わせて食べないとだめ。それぞれ単体だとそれほどでもないが合わせるとめちゃくちゃ旨くなる。</p>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/35/comments","created_at":"2023-02-05T06:36:53Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/35/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/35","id":1571288045,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/35/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5dp_Pt","number":35,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/35/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/35/timeline","title":"202カリー堂のバスクチーズケーキ 9月/10月の新作。ゴマバスクチーズケーキ。","updated_at":"2023-02-05T06:36:53Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/35","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},"issueComments":[],"pickupArticles":[{"body":"4月頃に痔が酷くなり座るのが嫌になってしまった。座りたくないのであれば立って仕事をするしかないが、スタンディングデスクをいきなり買っても使わなくなるんじゃないのか？という不安もありまずは手近でスタンディングデスクっぽいものをこしらえて試してみることにした。\r\n\r\n# 最初の1~2週間\r\nめちゃくちゃ足が痛くなる。そりゃ毎日8時間くらいほぼ立ち続けているから当然だ。足の裏、股関節、ふくらはぎなどへの疲れがすごい。風呂に浸かってマッサージをしてた。\r\n\r\n作業はというと割と普通にできる。腰が痛くなったり首が痛くなったりということはない。長時間座っていると腰が痛くなることがあったがそれがなくなったのは少し良かったかなと感じた程度。\r\n\r\n会議が無駄に長くなったりするとキレそうになる。さっさと要点まとめて終われボケ...と強く思うようになる。\r\n\r\n# 1ヶ月ほど経過\r\n立ち続けることがそれほど気にならなくなる。2時間くらいは平気で立ったままでいられる感じ。とはいえ一日の仕事が終わると座って仕事をしている時よりも全身の疲労感は多め。\r\n\r\nスタンディング力が高まったおかげでダラダラ続く会議への苛立ちが少し減った。さっさと終われとは思うけど...。\r\n\r\n夏が近づくとPCからの熱と部屋全体の熱気が顔の辺りを覆う。座っている時よりも汗をかきやすくなる。30℃を超えると流石に冷房がないとキツくなった。\r\n\r\n# 2ヶ月経過\r\n特に普段と変わりなくスタンディングワークをしていることに特別感すら感じなくなる。\r\n\r\nそういえばこの頃から電車で立っていることが苦ではなくなっていた。コロナ関係なく外出時はあまり人と接触したくなくて立ってることもまぁまぁ多めだったので疲れにくくなったのはありがたい。\r\n\r\n# 2ヶ月半頃\r\nこの頃からか、足の裏の特に踵や母指球辺りが硬くなってきて時折結構な痛みが出るようになった。当時はスリッパを履いてフローリングの上に立っていたわけだが、おそらく足の裏の出っぱっている部分に力がかかりやすくなっていてタコのようなものができる寸前になっていたのだと思う。\r\n\r\n1時間立って作業をして5分座って休み、また1時間立つみたいなインターバルをちゃんと入れるようになった。今までは疲れたら座って休憩みたいな感じだったけど疲れてなくても休憩を入れるようにした。\r\n\r\nまぁそれでも痛みはちょくちょくやってきたりするもので途方に暮れていた。\r\n\r\n<img width=\"591\" alt=\"スクリーンショット 2022-07-25 21 04 21\" src=\"https://user-images.githubusercontent.com/1421093/180773703-76e6eda7-e959-4104-8194-76c00a9de302.png\">\r\n\r\n# 現在\r\nついに足の裏の痛み問題を解決する術を発見した。地面をふにゃふにゃにするのである。\r\n\r\n今まではスリッパを履いていたとはいえ、足場は平面で硬かった。故に足の裏への負担が偏ってしまっていた。その足場に別の部屋で浸かっていたロングな座椅子を置きその上に立って作業をするようにしてみた。すると1日中立っていても全然痛くなくなったのだ....。\r\n\r\nさらにしゃがめばすぐ足元は座椅子なのですぐにリラックスタイムに入れる。立って良し、座って良しのロング座椅子便利すぎる。\r\n\r\nそれに合わせて足元に小さめのちゃぶ台を置いたり座椅子にクッションを追加したりしてようやく文句ないスタンディングワーク環境ができた。\r\n\r\n# 作業環境全体像\r\n現在の作業環境の全体像はこんな感じ(後ろの椅子はほぼ使っていない)\r\n![IMG_3244](https://user-images.githubusercontent.com/1421093/180774838-28eb541b-9d6b-4b9b-8998-92d54f935d7a.JPG)\r\n\r\nスタンディングデスクを購入すると結構高い(まともなやつだと5万くらいする)し合わなかったらマジで邪魔な机なので、家に最初からあったちゃぶ台とかテーブルを重ねたり魔改造してそれっぽい机にしている。\r\n\r\n普通こういう作業環境を公開するエンジニアのブログなどでは配線周りやキーボード、ディスプレイ、椅子などもこだわりぬいて綺麗な写真を載せているのだけども、自分はそういう細部へのデザインセンスがなく美的感覚が終わっているためこんな有様になっている。\r\n\r\nニトリとか激安通販とかで買った家に元々あったものばかりなので、新たに費やした費用は0円。もしスタンディングワークをやめるとしても臆することなく辞められるのが利点。\r\n\r\nそもそも論として痔を治せばこんながんばらんでも良いのでは？みたいな話もあるが、まだ手術するほどではない(と病院で言われた)のと手術後は出産後よりキツかったと知り合いの妊婦さんが言っていたのを聞いて恐れ慄いており、対処療法でギリギリまで頑張って悪化させないぞ!!!と決意したという経緯があります。。。\r\n\r\n(ジオン注射なら日帰りで痛みもそんなにないとか色々言われてはおりますが中々踏み出せないものです...)","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/15/comments","created_at":"2022-07-25T12:30:43Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/15/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/15","id":1316769318,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/15/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5OfE4m","number":15,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/15/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/15/timeline","title":"スタンディングワークを3ヶ月ほど続けた感想","updated_at":"2022-07-25T12:37:42Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/15","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"たまに転職する際の企業の選び方について聞かれることがある。自分は転職を大して経験してるわけではないから具体的なアドバイスはできないだけどとりあえず**自分なりの**企業の見方について少し話すことにしてる。\r\n\r\nそれはあらゆるものを資本と資産と収益の関係でみるということだ。\r\n\r\nといっても別に財務諸表を読むスキルをつけろと言っているわけではなく(あれば良いに越したことはない)、企業というシステムがどういうロジックで動いていて、組織やそこで働く人々が何をやっているかの大雑把な流れを把握するという話である。\r\n\r\n# 資本を得る・資産を作る・収益を得る\r\nまず企業の生産活動というのが何をやっているか？という大雑把な流れを整理すると下記に集約できる。\r\n\r\n- 資本を得る\r\n- 資産を作る\r\n- 収益を得る\r\n\r\n基本的にはこの３つを回しているだけだ。\r\n\r\n例えば銀行からお金を借りて(資本を得る)、商品を作り(資産を作る)、販売して対価をもらう(収益を得る)といった具合。\r\n\r\n資本を得るについては借入やVCや市場からの調達や得た収益が資本になったりする。\r\n資産を作るについては製品を作ったりサービスを作ったりすることがそれにあたる。\r\n収益を得るについては資産を活用してそれを金に変える部分のことだ。\r\n\r\n資本を得る→資産を作る→収益を得るという各フェーズの中で営業やマーケティングや開発/生産や経理やらなんやらといった職務の人がおり、彼らがそれぞれの役割で働くことで会社が回っていく。結果的に業績が上がったり下がったりという具合になるわけだ。\r\n\r\n# 転職に生かす\r\nで、この企業の見方を前提にして転職に際しては自分がどの役割を担うことになるのか？ということを考える。\r\n\r\n例えば自分の場合ならソフトウェアエンジニアなのでほぼ「資産を作る」というフェーズに従事することになるとわかる。だから企業を選ぶ際は、どういう資産(サービスや製品)を作っているか、資産(サービスや製品)の成熟度はどの程度か、どういう体制で資産(サービスや製品)を作っているのか、将来の(資産的な)展望を最初に見る。\r\n\r\nまぁこれは誰でもやると思うが、しかしこれだけでは不十分で、一番大事なのは**その資産がどうやって収益を産んでいるのか**まで見ることだ。なぜなら資産が収益を産む構造が乏しい場合は資本が減り資産を作ることに投資する原資が減るから結果として、開発全体への体験が悪くなるし給与も上がらなくなるから。\r\n\r\nなので一般的にエンジニアとして良いDXと良い給与を得たいなら資産が収益を生み出す構造が強固な会社を選ぶ方が良い転職になりやすいと思う。\r\n\r\nといった感じで資本と資産と収益の観点で企業活動を見ると、自分が企業活動のどこを担い、それがその活動にどれほど寄与できるか理解しやすいし、その寄与が回り回ってDXや給与へどれほどつながりそうかというところまで意識できるようになる。\r\n\r\n# 業務に生かす\r\n資本を得る→資産を作る→収益を得るという考え方は普段の業務にも当てはめられる。例えばエンジニアの生産活動は企業全体で見ると資産を作る部分にあたるが、この資産を作る部分のエンジニアチームとしての生産活動をさらに分解して、資本を得る→資産を作る→収益を得るという構造にマッピングしてみる。\r\n\r\n- 資本を得る→ 人材(スキル)・時間を得る\r\n- 資産を作る→ 開発\r\n- 収益を得る→ リリースと運用\r\n\r\n少々強引だけど無理矢理マッピングしてみるとこんな感じになるはず。\r\n\r\nで仮に自分の役職がインフラエンジニアであれば収益を得るの部分が責任範囲になるし、フロントエンド/サーバーサイドエンジニアであれば資産を作る部分が責任範囲になる、といった具合に考えることができる。\r\n\r\n各人はその責任範囲における生産活動を行い、またその責任範囲の中で生産性を向上させられることであれば基本なんでもやっていく道理はあるはずだ。もし新しい言語やフレームワークの導入や技術的負債の返済をしたいとなった時に、この観点で自分の立ち位置を理解できていれば、自分の責任範囲の生産性をどれほど向上させそれが組織にどういう寄与をするかを説明しやすくなる。結果として上司への提言にも説得力が出るので受け入れやすくなると思う。\r\n\r\nここでも大事なのは**資産を作る→収益を得る**の部分。どんなに開発を頑張ってもリリースされて安定運用に乗らなければ意味がない。金をドブに捨てているのと同じことになる。という意味ではデプロイ頻度が向上する仕組みづくりが重要で近年CI/CDの仕組みの重要性やSREが取り沙汰されるのはこの資産を作る→収益を得るの間の生産性を向上させる役割を担うためだと思う。\r\n\r\nこうした資本を得る→資産を作る→収益を得るという構造は、エンジニアの生産活動に対してもマッピングできたように他の役職でも多分できるはずで、各種部門内における資本を得る→資産を作る→収益を得るという構造のリソースを調整していく仕事がいわゆるCXOという役職だ。もちろんだけどCTOは会社全体の資本を得る→資産を作る→収益を得るという構造を調整している。\r\n\r\n# 人生の場合\r\n資本を得る→資産を作る→収益を得るという構造は日々の生活にも見出すことができる。無理矢理マッピングするとこんな感じか。\r\n\r\n- 資本を得る→ 金・時間を得る\r\n- 資産を作る→ 買い物をする・遊ぶ・勉強する\r\n- 収益を得る→ 金を得る\r\n\r\n労働者であれば、働いて金を得て、その金を使って何かを買ったり遊んだり勉強したりして自分という資産を豊かにして、それを労働力として使い金を稼いで...という感じ。もし株式や不動産を買ってそこから収益を得られるなら、収益を得る手段が資産それ自体になったりする。いわゆる不労所得。\r\n\r\nちなみにピエール・ブルデューの文化資本は資産を作る部分の資産の初期値パラメータになりそう。\r\n\r\nまぁ人生は大体こんな感じだと思う。\r\n\r\nここでも重要なのは**資産を作る→収益を得る**の部分でどんなに勉強しても収益に繋げる仕組みがないなら金は得られない。自分という資産が収益を産み出すためのの生産性というものを考えるなら、資産を作る部分に力を入れるのと同じだけそこから収益を得る部分にも力を入れないといけない。\r\n\r\nとはいえ人生が他の生産活動と違うのは別にそんな生産性なんて考えなくても良いことだ。企業活動では無理だけど人生なら自分が満足すれば何も産まなくても別にいいし生産性なんて考えなくても良い。\r\n\r\n資本を得る→資産を作る→収益を得るという構造は人生にも見出すことはできるけど、それに意味があるのかどうかは疑問ではある。\r\n\r\n# 最後に\r\n資本・資産・収益の構造で身の回りの生産活動を見渡してみると、割と何にでも当てはめることができるとわかる。が、そのマッピングに意味があるかは別問題だ。\r\n\r\nせいぜい暇人の思考実験にはなるのでこの3連休が暇でどうしようもない人にはちょうど良いかもしれない。","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/23/comments","created_at":"2022-09-23T03:42:08Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/23/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/23","id":1383255736,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/23/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5Scs64","number":23,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/23/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/23/timeline","title":"あらゆるものを資本と資産と収益の関係でみる","updated_at":"2022-09-23T03:42:08Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/23","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"※以下、エンジニア=ウェブアプリケーションエンジニアとして書いています\r\n\r\n[エンジニアとして今の自分を形成した本を5冊紹介する](https://panda-program.com/posts/introduce-five-books)という記事を読み、自分だったらどの本を選ぶかなと考えてみた。\r\n\r\nこの記事を読んでみた感じ、名著が多いな〜という印象を受けた。対象読者に関しては、\r\n\r\n> 独学でプログラムを書き始めた人やエンジニアスクールを卒業したばかりの方というよりは、実務経験を1~3年くらい積んでいるけど次に何を学べば良いかわからず、自分でイマイチ伸び悩んでいると感じている人\r\n\r\nと著者も書いている通りちょっと実務経験のある人になっているので確かにそういう人達には丁度良さそうだなと思う。\r\n\r\n自分もこのブログの著者が書いているようないわゆる名著の部類に入る本をそういう時期にいくつか読んではいるが、それらはタメになった本ではあるものの\"今の自分を形成した\"とまではいえないよなーと思う。\r\n\r\n本というのは読むタイミングが大切だ。プログラミングを始めたての頃にClean Architectureを読んだ時の感想(ふーんとしかならなかった)と負債に塗れたプロジェクトをくぐり抜けた後に読んだClean Architectureへの感想では全く異なるはずである。\r\n\r\nまたいくら名著といっても時間と共に古くなってしまう考えや方法が出てきてしまう。技術書であればなおさらだ。よくこういう記事で挙げられる「UNIXという考え方」もその一つで、[名著「UNIXという考え方 - UNIX哲学」は本当に名著なのか？ 〜 著者のガンカーズは何者なのかとことん調べてみた](https://qiita.com/ko1nksm/items/f1800c6ff6dd649d7429)という記事ではこの本の今では古臭くなってしまっている箇所などを丁寧に検証してくれている。\r\n\r\n古くなってしまったからもうその本は読む必要がない、というわけではないからこそ名著であるというのもまた事実である。現代に至るまでの歴史の中で今を振り返るために、また未来を見据えるために重要なヒントをくれたりする。\r\n\r\nでは\"自分を形成した\"本とはどういう本なのか、それはこの道へのめり込むきっかけや感動を得た本ではないかなと思う。\r\n\r\nそれが結果的に名著と呼ばれる本であることも多いが自分にとってはどちらかというとスキルが圧倒的に未熟な頃に読んだ本、いわゆる入門書のようなものがそれにあたるのではないかと考えた。今風にいうと\"駆け出しエンジニア\"のようなスキルレベルの頃に読んだ本である。\r\n\r\n未熟な頃に感動した思い出があるからこそ今もエンジニアとして仕事を続けられていると思う。なのでそういう思い出が詰まった本、思い出補正全開本を\"自分を形成した本\"として5冊選んでみた。思い出補正全開ゆえ今回選んだ本は決して全てがおすすめできるわけではないので悪しからず。\r\n\r\n# [初めてのRuby](https://www.oreilly.co.jp/books/9784873113678/) \r\nRuby1.8と1.9に対応している。現在3.1とかを使っていることを考えると感慨深い...。この本を読んだのは大学卒業~新卒入社した位のタイミングだ。当時の会社ではPHPでウェブアプリケーションを(なんとなく)書いていた。しかし世間はどこもかしこもRuby on Railsを使っておりミーハー心からRubyについて学ばねばな〜などと思い手に取った本だ。\r\n\r\n完全な初学者が手を出すとわからないかもと思えるような一見無味乾燥な本ではあるけど解説がとても丁寧なので当時の自分くらいのレベルでも理解できた。この本を読み切れたことで技術書を読むことのハードルが下がった。またRubyという言語の面白さとかスピリットみたいなものが垣間見えた気がしている。と同時に各種一般的なプログラミングに関する用語についての理解も深まったのでPHPを書く時やドキュメントを読む時の理解力も上がったという副次効果もあった気がする。\r\n\r\n対応Rubyバージョンを見て貰えば分かるとおり今読むべき本ではないとは思うけどあのぐいぐいと引き込まれる体験は確実に今の自分を形成するスタート地点になっていると思う。\r\n\r\n# [Rails3レシピブック](https://www.sbcr.jp/product/4797363821/)\r\nRailsといえば[Ruby on Railsチュートリアル](https://railstutorial.jp/)である。ウェブアプリケーション開発者においては言わずと知れた当時の神サイトだ。当時はまだ全て無料で閲覧できたのでその点もありがたかった。\r\n\r\nこのサイトでTwitterもどきを作ったり、このRails3レシピブックと睨めっこしながら粛々と自分の考える最強のwebサービスを開発するみたいなことを毎日やっていた。その開発体験から派生してすぐあとに起業することになるわけであるが、その時も開発時にいつも横にはRails3レシピブックがあった。\r\n\r\nこれまた対応Railsバージョンを見て貰えば分かるとおり今読むべき本ではないものの、当時の自分にwebサービス開発の楽しさを教えてくれた気がするので個人的に思い出深い本であることは確かである。\r\n\r\n# [リファクタリング: Rubyエディション](https://www.amazon.co.jp/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0-Ruby%E3%82%A8%E3%83%87%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%B3-Jay-Fields/dp/4048678841)\r\n起業してから一人で我流でwebサービス開発を続けていく中でコードが肥大化していきどうしたもんかね...となってしまう時期がきた。恥ずかしながらこの頃は**Done is better than perfect**よろしく、動けば良い、さっさとリリースじゃ!とガンガン積み木を重ねていくようにコーディングをしていた。実際自分以外に誰もコードを触らないわけなのでなんとかなっていたわけであるが、それなりにコードが大きくなると自分一人でもこれは不味いなと感じるようなコードが増えてきた。その時に手に取ったのがリファクタリング: Rubyエディションである。\r\n\r\nこの本は[リファクタリング 既存のコードを安全に改善する](https://amzn.to/3b3ACYK)というオリジナルのRuby版である。元の本の方はJavaで書かれているのだが、PHPとかJavascriptとか当時のweb開発の言語しか触っていなかった自分に敷居が高く感じられた。一方Ruby版の方はすでに慣れ親しんだ言語で書かれているということで臆せず読み始められた。\r\n\r\nデザインパターンやOOPなどの実装テクニックについて見聞きしたことはあっても実際にどう使えばいいのかというのがいまいち理解できずにいたが、これを読んで腑に落ちた。実際のコードベースに取り入れやすいという環境やタイミングがぴったり合ったというのも大きいがそれにしても学んだ概念がすぐに実践で活用できたというのは気持ちよかった。\r\n\r\n# [コンピュータシステムの理論と実装 ―モダンなコンピュータの作り方](https://amzn.to/3J5EuFa)\r\nある程度webサービスなどが作れるようになるともっとコンピュータの仕組みとか低レイヤーについても知りたくなった。こういうことは本来大学でCSを学んできている人には素地としてあるのかもしれないが自分には全くその手の知識がなかった。\r\n\r\n巷でおすすめされている本やいわゆる名著というものを手に取って読んだりはしてみたが難しいしピンとこないものが多かった。元来頭が良くなくて抽象化能力とか理解力が低いという自覚はあったので理論が延々と続くようなちゃんとした教科書が得意ではないのである。\r\n\r\nそんな時に手に取ったのが[コンピュータシステムの理論と実装 ―モダンなコンピュータの作り方](https://amzn.to/3J5EuFa)だ。これはNANDという電子素子から始まり、CPU、OS、コンパイル、VMと実装していき最終的にはNAND Tetrisと呼ばれるゲームまで作ろうという本。作ると言っても物理的に回路を構築したりするわけではなくHDLや好きな言語(自分はPython)でコードを書いて組み上げていくという流れになる。とはいえ本格的に論理回路から順に組み上げて一応は一通りのコンピュータがどうやって動いているのかを手を動かしながら知れるのでコンピュータへの解像度が爆上がりして感動した。\r\n\r\nOSとか言語を作る部分は流石に全然物足りないのだけど低レイヤーを理解するための足がかりにはなるはず。この本はすでに名著の部類に入ってるし今でも十分おすすめできる。[From Nand To Tetris](https://www.nand2tetris.org/)や巷にすでに実装を行なっている人たちのコードがGitHubやQiitaやZennにたくさんあるのでそれらを参照しながら挑戦すると良いと思う。\r\n\r\n# [Writing An Interpreter In Go](https://amzn.to/3PCmynY)\r\n上記の本を読み始めたのと同じ理由でこの本を読んだ。タイトルの通りGolangでインタプリタを書く本である。プログラミング言語を作ってみるというのは誰もがやってみたいことの一つではあると思うが、いきなりドラゴンブックを読めるわけはないのでどうしたもんかと思っているような人に丁度良い本。\r\n\r\nこれまた解説メインではなくLexer・Parser・Evaluatorを実際に手を動かしながら順を追って解説してくれるのが嬉しい。プログラミング言語を作るっていうのはこういうことなのかと膝を叩く経験ができる。\r\n\r\n今だと日本語版で[Go言語でつくるインタプリタ](https://amzn.to/3PZvOmd)という本になっているので手に取りやすそう。同じ著者がこの本の[コンパイラ版](https://amzn.to/3POSB3K)も出しているのでそちらも読むとさらに理解が深まると思われる。\r\n\r\nよく考えると最初から最後までしっかりと読み込んだ洋書はこれが初めてだったかもしれない。そういう意味でも自分の身になった良い本だったなと思う。\r\n\r\n# 最後に\r\n[エンジニアとして今の自分を形成した本を5冊紹介する](https://panda-program.com/posts/introduce-five-books)という記事を読み、自分にとっての5冊を選んで書いてみた。\r\n\r\n今の自分を形成した本というのは必ずしも万人にとって有益な本ではないかもしれないが、その人の人生を垣間見ることができるという意味で酒のつまみにはなるようなネタだなと思った。他の人(もっと自分より年季の入った人)の経験も読みたい。\r\n\r\nわからない概念だったものが腑に落ちて一段解像度が上がる体験をすると感動してしまうタイプの人間なので分からないことだらけのエンジニア初期の頃に読んだ本の方が贔屓目で見てしまう。新卒の彼らに技術書をお薦めする時は慎重を期して選出するのだけどある意味おじさんの自分語りのようなレベルならばこういう少し偏った選び方もありだと思う。\r\n\r\nそういえばこれを書くために今までどんな本を読んできたかなと振り返ってみたが、圧倒的にインターネット上の記事やドキュメントなどのコンテンツを読んでいる方が多いと思った。\r\n\r\n今は当時にも増してweb上のコンテンツがテキスト・動画問わず溢れているので「おすすめの本」というのを挙げることにそんなに意味はなくなっていくのかもしれない。とはいえ媒体が変わっても初心者が成長していく過程でブレークスルーのきっかけとなった思い出の\"何か\"はあるわけでそれを共有して感慨に浸っているのをみるのはまぁまぁ面白いと思う。\r\n\r\n最後に自分がプログラミングで万能感を得た最古の原体験として、このゆーすけベーさんのブログ記事が出発点だったなと思い出したので貼っておく。一人部屋にこもってこの記事を読みながらクローラを書いていた、フォルダに溜まっていく大量の画像を見つめながら万能感に浸っていたのがめちゃくちゃ懐かしい...\r\n\r\n- [Rubyやってみる！（新おっぱいスクリプトもあるぉ）](https://yusukebe.com/posts/2012/0520074309/)","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/comments","created_at":"2022-07-26T07:58:54Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/16","id":1317850509,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5OjM2N","number":16,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16/timeline","title":"エンジニアとして今の自分を形成した本","updated_at":"2022-07-26T08:00:11Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/16","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}}]},"__N_SSG":true}