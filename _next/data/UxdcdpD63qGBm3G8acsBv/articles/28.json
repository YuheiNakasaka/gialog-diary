{"pageProps":{"issue":{"body":"- 先日「育児など家庭の色々があって自分の時間が確保できなくなった。技術力を高めるための勉強ができなくて不安。」みたいな話を聞いた\r\n- この悩みの直接的な解決方法としては先人の様々な体験談および対策みたいなものが世に出回っているからご家庭の状況に応じて参照すればいい思う\r\n  - [子育てと開発を両立するコツは「無理をしないこと」。パパ／ママエンジニアの働き方とは](https://engineer-lab.findy-code.io/ikuji_findy)\r\n  - [子育てを支える技術 ─ フルスタックお父さんとエンジニアとしての成長を両立させるには](https://eh-career.com/engineerhub/entry/2018/05/15/110000)\r\n  - [ITエンジニアと子育てと勉強と](https://zenn.dev/akinari_ueda/articles/3ec81c9605e732cb7912)\r\n- それよりも「技術力を高めるための勉強ができなくて不安」という点が個人的には気になった。\r\n- 技術力とは何か？技術力が高くないとなぜ不安なのか？みたいな話\r\n- 技術力は特に明確な定義があるわけではない\r\n  - 例えば著名なOSSにコミットしているとか低レイヤーのプロトコルやインフラをバリバリ実装してるとか競プロで上位勢だとか、挙げ始めたらキリがなく、それっぽい何かはたくさん挙げられそう\r\n  - つまるところ技術力というのはその人の理想次第なのではないか\r\n- 技術力が無いとなぜ不安か\r\n  - 「**今職を失うのではないかという不安**」と「**将来職を失うのではないかという不安**」がある\r\n  - 前者に関しては\r\n    - 技術力が無いと仕事がこなせない => 役立たずとしてクビになる => 職を失う => 生きていく金がない => 不安、というロジック？\r\n  - 後者に関しては\r\n    - 技術力が無いと職を得られない => 生きていく金がない => 不安、というロジック？\r\n  - どちらにしても技術力の高低によって仕事をし続けられるかどうかが決まるという前提がありそう\r\n- 技術力の高さと失職の可能性\r\n  - 確かに技術力が高ければ職を得やすそうだしクビにもなりにくいのは確か\r\n  - しかし技術力の有り無しは0か1の離散的な話ではなく、0と1の間に無限のグラデーションがあるはず\r\n    - 技術力が0.2の人もいれば0.5の人もいるし0.8の人もいる\r\n    - どれだけの力があれば失職の可能性に怯えずに済むのか。はっきりわからない部分が多い。\r\n      - 企業ごとに技術力を0.2しか求められない会社もあるし0.8求める会社もある\r\n      - 自分の所属する企業はどれくらいを求めているのか、自分の将来働いているであろう企業群はどの程度を求めているのだろうか\r\n- 技術的成長はどれほど必要か？仕事が出来るだけの技術力があれば良いのでは？\r\n  - 仕事を最低限こなせるだけの技術力があれば仕事を失わないのではないか\r\n    - 少なくとも日本だとそんな簡単に解雇しづらいし\r\n- 業務外の技術について\r\n  - 現状の仕事で必要な範囲を超えた技術を学ぶことはどれだけ重要か\r\n    - 例えばサーバーサイドエンジニアがUnityを学ぶのはその人の不安の解消に役立つのかとか\r\n  - 不安の解消という観点では今の仕事の延長線上にある未知の技術に手を出す以外の学習は遠回り感があるのでは？\r\n- 仕事で必要なのは技術力ではなく仕事力ではないか\r\n  - エンジニアは技術職と言われることも多いし、仕事を遂行する能力=技術力というような考えをしがち\r\n  - しかし仕事を遂行する力、すなわち仕事力は技術力と一致しない(もちろんガチTech企業ならほぼ一致することもあるが)\r\n  - これは別に技術力を軽んじている訳ではなくソフトスキルを礼賛したいわけでも無く、仕事に必要な技術力は高々仕事の範囲でしかないという意味\r\n  - その仕事特有のドメイン知識や問題の定義・解決能力、チームを巻き込む力など仕事には仕事をこなすために必要なスキルがある\r\n  - 仕事とは**ある目標を達成すること**なので重要なのは技術力ではなく目標遂行能力だ\r\n    - 自分はこの能力を**仕事力**と定義してる\r\n  - 技術力というのはその中で必要になるピースの一つである。だからまずは今の仕事にどういう技術力がどのくらい必要か見極めて必要な分だけ学べば良い\r\n- そう考えると先の若者のように「業務外で勉強する時間がなくて不安」みたいな話についてはとりあえず下記の心構えで上から順に臨むのが良さそうに思った\r\n  - 仕事に取り組む上で必要な自分に足りていない技術力を定義すること。まずこれが重要。\r\n  - そしてその技術の学習を業務内で出来る限り行う\r\n    - 業務に関係のある技術なのでお賃金をもらいながら胸を張ってやるべき\r\n  - それでもどうしても足りないのであれば仕方なく業務外で頑張る\r\n    - ここに占める割合があまりにも多い場合は、上司のタスク割り当てが間違ってる可能性があるのでまず相談する\r\n      - 自分の能力不足の場合、気合いでやる。しかし気合いで血反吐を吐きながらやるのは最終手段。\r\n- 巷のスゴいエンジニアと自分を比べたり膨大で深遠な技術力という怪物を倒そうと頑張るのではなく、まずは自分に必要な最低限のサイズの目標に切り分けてそれだけを相手にするように心がける。まずは不安に囚われず余裕を持てるようになるところを目指す。\r\n- **今職を失うのではないかという不安**に関してはこんな感じ\r\n- では**将来職を失うのではないかという不安**に関してはどうか\r\n  - 業務内の時間で仕事にコミットすることで得た知識がそのまま将来の不安を軽減させてくれる可能性もあるし、余裕が生まれたことで業務外でできるようになる好き勝手な技術探求で得た知見が将来の不安を軽減させてくれる可能性もある\r\n  - どのみち将来のことはどうなるかわからない\r\n    - 10年前のインフラ・サーバーサイド・フロントエンド・各種技術の流行りやスタンダードを思い浮かべてほしい。何が消えて何が残って何が新たに生まれるかはわからんすぎる(ある程度の方向性は予測できるにせよ)。\r\n    - そういう意味ではハードウェアやOSやネットワークのような比較的低レイヤーな基礎技術を学ぶのが良いとかはあるかも\r\n      - だからといってその辺の知識が将来の失職を予防してくれるかも不明。その時必要となる仕事力がないと結局は不安は拭えない。\r\n- 第一は今コミット出来ることにコミット。そして遠い将来に関しては直感を頼りに逐一betしながら祈る。\r\n- その他色々\r\n  - 将来については歳を重ねて技術力どころではなくなり健康力みたいなものも必要そう。健康への投資も重要っぽい。\r\n    - 目や腰、その他生活習慣病などのケアに追われている中年エンジニアが自分のTLにも散見されるようになってきた(TLの老化...)。\r\n  - 未婚・DINKsなど子育てが無い人は**将来職を失うのではないかという不安**への投資がしやすいので余裕があるか？\r\n    - 先に書いた通り将来に関しては祈り要素もあるので皆等しくほんのり不安なのは同じ\r\n    - 置かれた立場によってそれぞれの不安要素はあるものだし、まして子の有無によって発生するもの/失っているものを比較するのは語り得ないものなので踏み込むべきではない\r\n  - こういう人生や日常の悩みは現状把握と分解と整理が基本なので一人で抱え込まずに早めに適当に文章にするなり人に吐き出すなりすると良い。当事者だけではるつぼに嵌ってしまう。\r\n","bodyHTML":"<ul>\n<li>先日「育児など家庭の色々があって自分の時間が確保できなくなった。技術力を高めるための勉強ができなくて不安。」みたいな話を聞いた</li>\n<li>この悩みの直接的な解決方法としては先人の様々な体験談および対策みたいなものが世に出回っているからご家庭の状況に応じて参照すればいい思う\n<ul>\n<li><a href=\"https://engineer-lab.findy-code.io/ikuji_findy\">子育てと開発を両立するコツは「無理をしないこと」。パパ／ママエンジニアの働き方とは</a></li>\n<li><a href=\"https://eh-career.com/engineerhub/entry/2018/05/15/110000\">子育てを支える技術 ─ フルスタックお父さんとエンジニアとしての成長を両立させるには</a></li>\n<li><a href=\"https://zenn.dev/akinari_ueda/articles/3ec81c9605e732cb7912\">ITエンジニアと子育てと勉強と</a></li>\n</ul>\n</li>\n<li>それよりも「技術力を高めるための勉強ができなくて不安」という点が個人的には気になった。</li>\n<li>技術力とは何か？技術力が高くないとなぜ不安なのか？みたいな話</li>\n<li>技術力は特に明確な定義があるわけではない\n<ul>\n<li>例えば著名なOSSにコミットしているとか低レイヤーのプロトコルやインフラをバリバリ実装してるとか競プロで上位勢だとか、挙げ始めたらキリがなく、それっぽい何かはたくさん挙げられそう</li>\n<li>つまるところ技術力というのはその人の理想次第なのではないか</li>\n</ul>\n</li>\n<li>技術力が無いとなぜ不安か\n<ul>\n<li>「<strong>今職を失うのではないかという不安</strong>」と「<strong>将来職を失うのではないかという不安</strong>」がある</li>\n<li>前者に関しては\n<ul>\n<li>技術力が無いと仕事がこなせない => 役立たずとしてクビになる => 職を失う => 生きていく金がない => 不安、というロジック？</li>\n</ul>\n</li>\n<li>後者に関しては\n<ul>\n<li>技術力が無いと職を得られない => 生きていく金がない => 不安、というロジック？</li>\n</ul>\n</li>\n<li>どちらにしても技術力の高低によって仕事をし続けられるかどうかが決まるという前提がありそう</li>\n</ul>\n</li>\n<li>技術力の高さと失職の可能性\n<ul>\n<li>確かに技術力が高ければ職を得やすそうだしクビにもなりにくいのは確か</li>\n<li>しかし技術力の有り無しは0か1の離散的な話ではなく、0と1の間に無限のグラデーションがあるはず\n<ul>\n<li>技術力が0.2の人もいれば0.5の人もいるし0.8の人もいる</li>\n<li>どれだけの力があれば失職の可能性に怯えずに済むのか。はっきりわからない部分が多い。\n<ul>\n<li>企業ごとに技術力を0.2しか求められない会社もあるし0.8求める会社もある</li>\n<li>自分の所属する企業はどれくらいを求めているのか、自分の将来働いているであろう企業群はどの程度を求めているのだろうか</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>技術的成長はどれほど必要か？仕事が出来るだけの技術力があれば良いのでは？\n<ul>\n<li>仕事を最低限こなせるだけの技術力があれば仕事を失わないのではないか\n<ul>\n<li>少なくとも日本だとそんな簡単に解雇しづらいし</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>業務外の技術について\n<ul>\n<li>現状の仕事で必要な範囲を超えた技術を学ぶことはどれだけ重要か\n<ul>\n<li>例えばサーバーサイドエンジニアがUnityを学ぶのはその人の不安の解消に役立つのかとか</li>\n</ul>\n</li>\n<li>不安の解消という観点では今の仕事の延長線上にある未知の技術に手を出す以外の学習は遠回り感があるのでは？</li>\n</ul>\n</li>\n<li>仕事で必要なのは技術力ではなく仕事力ではないか\n<ul>\n<li>エンジニアは技術職と言われることも多いし、仕事を遂行する能力=技術力というような考えをしがち</li>\n<li>しかし仕事を遂行する力、すなわち仕事力は技術力と一致しない(もちろんガチTech企業ならほぼ一致することもあるが)</li>\n<li>これは別に技術力を軽んじている訳ではなくソフトスキルを礼賛したいわけでも無く、仕事に必要な技術力は高々仕事の範囲でしかないという意味</li>\n<li>その仕事特有のドメイン知識や問題の定義・解決能力、チームを巻き込む力など仕事には仕事をこなすために必要なスキルがある</li>\n<li>仕事とは<strong>ある目標を達成すること</strong>なので重要なのは技術力ではなく目標遂行能力だ\n<ul>\n<li>自分はこの能力を<strong>仕事力</strong>と定義してる</li>\n</ul>\n</li>\n<li>技術力というのはその中で必要になるピースの一つである。だからまずは今の仕事にどういう技術力がどのくらい必要か見極めて必要な分だけ学べば良い</li>\n</ul>\n</li>\n<li>そう考えると先の若者のように「業務外で勉強する時間がなくて不安」みたいな話についてはとりあえず下記の心構えで上から順に臨むのが良さそうに思った\n<ul>\n<li>仕事に取り組む上で必要な自分に足りていない技術力を定義すること。まずこれが重要。</li>\n<li>そしてその技術の学習を業務内で出来る限り行う\n<ul>\n<li>業務に関係のある技術なのでお賃金をもらいながら胸を張ってやるべき</li>\n</ul>\n</li>\n<li>それでもどうしても足りないのであれば仕方なく業務外で頑張る\n<ul>\n<li>ここに占める割合があまりにも多い場合は、上司のタスク割り当てが間違ってる可能性があるのでまず相談する\n<ul>\n<li>自分の能力不足の場合、気合いでやる。しかし気合いで血反吐を吐きながらやるのは最終手段。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>巷のスゴいエンジニアと自分を比べたり膨大で深遠な技術力という怪物を倒そうと頑張るのではなく、まずは自分に必要な最低限のサイズの目標に切り分けてそれだけを相手にするように心がける。まずは不安に囚われず余裕を持てるようになるところを目指す。</li>\n<li><strong>今職を失うのではないかという不安</strong>に関してはこんな感じ</li>\n<li>では<strong>将来職を失うのではないかという不安</strong>に関してはどうか\n<ul>\n<li>業務内の時間で仕事にコミットすることで得た知識がそのまま将来の不安を軽減させてくれる可能性もあるし、余裕が生まれたことで業務外でできるようになる好き勝手な技術探求で得た知見が将来の不安を軽減させてくれる可能性もある</li>\n<li>どのみち将来のことはどうなるかわからない\n<ul>\n<li>10年前のインフラ・サーバーサイド・フロントエンド・各種技術の流行りやスタンダードを思い浮かべてほしい。何が消えて何が残って何が新たに生まれるかはわからんすぎる(ある程度の方向性は予測できるにせよ)。</li>\n<li>そういう意味ではハードウェアやOSやネットワークのような比較的低レイヤーな基礎技術を学ぶのが良いとかはあるかも\n<ul>\n<li>だからといってその辺の知識が将来の失職を予防してくれるかも不明。その時必要となる仕事力がないと結局は不安は拭えない。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>第一は今コミット出来ることにコミット。そして遠い将来に関しては直感を頼りに逐一betしながら祈る。</li>\n<li>その他色々\n<ul>\n<li>将来については歳を重ねて技術力どころではなくなり健康力みたいなものも必要そう。健康への投資も重要っぽい。\n<ul>\n<li>目や腰、その他生活習慣病などのケアに追われている中年エンジニアが自分のTLにも散見されるようになってきた(TLの老化...)。</li>\n</ul>\n</li>\n<li>未婚・DINKsなど子育てが無い人は<strong>将来職を失うのではないかという不安</strong>への投資がしやすいので余裕があるか？\n<ul>\n<li>先に書いた通り将来に関しては祈り要素もあるので皆等しくほんのり不安なのは同じ</li>\n<li>置かれた立場によってそれぞれの不安要素はあるものだし、まして子の有無によって発生するもの/失っているものを比較するのは語り得ないものなので踏み込むべきではない</li>\n</ul>\n</li>\n<li>こういう人生や日常の悩みは現状把握と分解と整理が基本なので一人で抱え込まずに早めに適当に文章にするなり人に吐き出すなりすると良い。当事者だけではるつぼに嵌ってしまう。</li>\n</ul>\n</li>\n</ul>","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/comments","created_at":"2022-12-20T12:17:23Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/28","id":1504471609,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5ZrGo5","number":28,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28/timeline","title":"仕事力と技術力と不安に関する雑文","updated_at":"2022-12-21T00:26:43Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/28","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},"issueComments":[],"pickupArticles":[{"body":"[Web Development with Ruby on Rails](https://amzn.to/3N2XFRl)を読んでる。\r\n\r\nmodelにロジックは書かない、1コントローラーメソッドに対して1Serviceにしてそこに必要なビジネスロジックは詰めこむ、serviceは1メソッドしかpublicにしない、serviceのpublicなメソッドの振る舞いのみ入念にテストするという割り切った考えは前評判どおりだけど思想強ぇ〜となった。\r\n\r\nRailsでDDDとかやろうとするとドメインの整理から始まりmodelはただのDTOにしてentityやvalue object等の実装を用意して、なんというか少なくとも実装に関してはクラスがめちゃくちゃ増えていくイメージだけど著者はむしろそういうのと逆方向(というかRailsとしては自然な方向)に逆らわず標準提供されてる道具を使って、最低限のレイヤーをサステナブルという目的(ここが重要)を達成するためだけに追加するという考えだ。\r\n\r\n設計に絶対的な正解はなく、未来・要件・チーム・言語・フレームワークなどにあらゆる環境によって最適な選択は変わるという当たり前のことを思い知らされる感じ。\r\n\r\n[良いコード／悪いコードで学ぶ設計入門](https://amzn.to/3PNmkuN)を読んだあとなのでなおのことその実装方針の差が面白く感じた。\r\n\r\n良いコード設計ができるというのはこういった多種多様な設計方針や実装方法の引き出しがあり、その中から妥当なものを選択できる能力なのだろうと思う。(もっと広い意味でだけど)アーキテクチャ選択に絶対はないというのは[ソフトウェアアーキテクチャの基礎](https://amzn.to/3POoAly)でも書いてあった気がする。\r\n\r\n自分は金にならんプロジェクト(スタートアップのすぐ解散するアプリ開発や少人数開発みたいなもの)ばかりやってきたから将来性についてあまり深く考えなくてもぶっちゃけよくて、そんなに神経質に設計について固執してこなかった。そのツケみたいなもので設計に関するスキルにややコンプレックスがあるから最近はこういう本をいくつか読んで妄想したりしている。\r\n\r\n自分のようなバックグラウンドの人間からするとどんなにクソコードでも金を産むコードに対してまずはリスペクトが生まれてしまうという悲しい性。めくじらたててキレ散らかしてる人を見るとなんともいえない感情にならん訳でもない。もちろんそれとこれとは別なのは理解するが....","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/comments","created_at":"2022-05-30T09:55:28Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/3","id":1252487542,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5Kp3F2","number":3,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3/timeline","title":"Web Development with Ruby on Railsと悲しい性","updated_at":"2022-05-30T09:55:55Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/3","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"[Misreading Chat](https://misreading.chat/2022/05/12/92-software-development-waste/)で紹介されていた[Software Development Waste](https://homepages.dcc.ufmg.br/~figueiredo/disciplinas/papers/icse17sedano.pdf)という論文。\r\n\r\nこの論文に載っていたTypes of Software Development Wasteというソフトウェア開発のムダについて類型されていたものが面白かったので日本語にしてみた。\r\n\r\n# 誤った機能・製品の構築\r\n## ムダ\r\nユーザーニーズやビジネスニーズに対応していない機能・製品を構築するコスト\r\n## 原因\r\n- ユーザーの要望\r\n  - ユーザー調査、検証、テストを行っていない、ユーザーフィードバックを無視している、ユーザー価値の低い機能に取り組んでいる\r\n- ビジネスの要望\r\n  - ビジネス関係者を関与させていない、関係者からのフィードバックが遅い、製品の優先度が不明確\r\n## 一言メモ\r\nユーザーの声を汲み損ねていたり、えいやで作ってしまった機能とかまぁムダですよねと言われてばそう。割とよく起こりがちである。\r\n\r\n# バックログの管理ミス\r\n## ムダ\r\n作業の重複、価値の低いユーザー機能の迅速化、必要なバグ修正の遅延のコスト\r\n## 原因\r\n- バックログの逆転\r\n- 同時に多くの機能に取り組む\r\n- 作業の重複\r\n- 十分に準備されていないストーリー(以降\"ストーリー\"は\"機能\"と同じ意味で使われてるっぽい？)\r\n- 機能開発とバグ修正のアンバランス\r\n- テストまたは重要なバグ修正の遅延\r\n- 気まぐれなスラッシング(訳が微妙)\r\n## 一言メモ\r\n取り組むべきタスクの優先度づけがうまくできてないと、あるべき順番であるべき機能がユーザに届けられなくなるのでそういうのはムダですよねという感じか。\r\n\r\n# リワーク(手戻り)\r\n## ムダ\r\n正しく行われたはずの納品物を変更するコスト\r\n## 原因\r\n- 技術的負債\r\n- ストーリーの却下（例：プロダクトマネージャーがストーリーの実装を却下）\r\n- 完了の明確な定義がない（ストーリーが曖昧、設計モックの推測）\r\n- 欠陥（テスト戦略の不備、バグの根本原因分析がない）。\r\n## 一言メモ\r\n仕様の作り込みが甘かったり、そもそもユーザーテストが不十分であやふやな機能が設計されたりして作り直しが発生するのはムダですよねという感じ。技術的負債やバグ起因で作り直しが発生するのもここの無駄にカウントされてる。\r\n\r\n# 不必要に複雑なソリューション\r\n## ムダ\r\n必要以上に複雑なソリューションを作成するコスト、機能、ユーザーインターフェース、コードを単純化する機会を逃す\r\n## 原因\r\n- ユーザーの視点から見た不必要な機能の複雑さ\r\n- 不必要な技術的複雑さ\r\n  - コードの重複、インタラクションデザインの再利用不足、前倒しで作った複雑すぎる技術的デザイン\r\n## 一言メモ\r\nオーバーエンジニアリングの結果、なんかかっこいいけど誰も容易に変更できなくなってしまったみたいな実装はたまにある気がする。しかもそれをやった人が退職してしまい結局全部書き直す羽目にみたいな、、やり直しが発生するという意味で確かにそういう実装は結局ムダと言われればムダ。\r\n\r\n# 不要な認知負荷\r\n## ムダ\r\n精神的エネルギーを不必要に消費するコスト\r\n## 原因\r\n- 技術的負債に苦しんでいる\r\n- 複雑または大規模なストーリー\r\n- 非効率なツールや問題のあるAPI、ライブラリ、フレームワーク\r\n- 不必要なコンテキストスイッチ\r\n- 非効率な開発フロー\r\n- 整理されていないコード\r\n## 一言メモ\r\n開発フローやツールや負債に起因してMPを過剰に消費させるのはムダですよねというやつ。\r\n\r\nそういえば精神的に負荷がかかることそれ自体がどのくらい開発の生産性低下を引き起こすのか知りたいんだけどそういう研究あるかな。例えば技術的負債によって発生する精神的な負荷は自体は実は生産性を低下させてなくて、技術的な負債そのものが生産性を低下させているだけみたいな。\r\n\r\nまぁMPが過剰に減らされるのは人間をリソースと考えるとムダだよねというのは当たり前だけど。\r\n\r\n# 心理的苦痛\r\n## ムダ\r\n不要なストレスでチームに負担をかけるコスト\r\n## 原因\r\n- チームのモラルの低下\r\n- ラッシュモード(締切がきつすぎるみたいな状況)\r\n- 対人関係やチーム内の対立\r\n## 一言メモ\r\nこれも上のやつと似ててMPの過剰消費に繋がるのでムダというやつ。\r\n\r\nそういえばフルリモートでissueベースで働いてると対人関係みたいなものを気にすることがほぼ無くなった。issueだけの関係だと後腐れなくて事務的に処理できることが多くて楽。一方でプロダクトを作っていくチームの一員としてビルドアップから参加する必要があると柔らかなコミュニケーションが必要になるので気を遣う。\r\n\r\n# 待ち時間/マルチタスク\r\n## ムダ\r\nマルチタスクに隠れがちなアイドルタイムのコスト\r\n## 原因\r\n- 遅いテストや信頼できないテスト\r\n- 信頼できない受け入れ環境\r\n- 不足する情報、人、設備\r\n- フィードバック遅延によるコンテキストスイッチ\r\n## 一言メモ\r\nテストが遅すぎたりPRのレビューがスルーされたりして先に進めない時に発生する待ち時間はムダですよね、というやつ。確かによく起きがちではあるが、PRのレビューで発生する待ちはどうしようもないところがあるな...。\r\n\r\n# ナレッジロス\r\n## ムダ\r\nチームがかつて知っていた情報を再取得するコスト\r\n## 原因\r\n- チームの解散や移動\r\n- 知識のサイロ化\r\n## 一言メモ\r\nチームの移動や変更でナレッジの共有をやり直すのに発生する時間とかがムダですよねというやつ。これは暗黙知を減らすために各人が情報をオープンに見える化しておかないと発生しがち。\r\n\r\nベテランの特定の人に質問が集中しちゃったりするとその人の本質的な作業時間が減るのもよくある。そういうベテランはそのプロダクトのあらゆることを知っているから開発のパフォーマンスも他の人より出せるはずなんだけど、オンボーディングを手伝うコストが度々発生しちゃたりすると勿体無いな〜となる。\r\n\r\n# 非効率的なコミュニケーション\r\n## ムダ\r\n不完全、不正確、誤解を招く、非効率的、または不在のコミュニケーションのコスト\r\n## 原因\r\n- チームサイズが大きすぎる\r\n- 非同期コミュニケーション\r\n  - 分散チーム、分散ステークホルダー、他のチームへの依存、チーム外の不透明なプロセス\r\n- 不均衡\r\n  - 会話を支配する、聞かない\r\n- 非効率な会議\r\n  - 集中力の欠如、振り返りのスキップ、毎日ブロッカーについて話さない(どういうこと...)、会議が長引く（例：長い立ち話）など\r\n## 一言メモ\r\nコミュニケーションがうまくいかないとムダですよねみたいな感じ。幅広いけどもまぁそれはそう。会議に関しても不要な話で盛り上がっちゃうとか曖昧な目的始まっちゃって終わりどころが見えずダラダラ続くみたいなことはよくある気がする。\r\n\r\n# 雑感\r\nソフトウェア開発におけるあるあるネタまとめみたいな様相である。こういうムダは確かに至る所に散見されるが、これらをどうやって取り除くかというのは中々難しい問題だ。だがその辺の対処法についてはこの論文に書いていない。\r\n\r\nこの辺りのムダを取り除くためのプロセス改善の話はどういう本(や記事や論文)を読むと良いのだろうか。","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/comments","created_at":"2022-06-23T03:03:33Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/10","id":1281601385,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5MY69p","number":10,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10/timeline","title":"ソフトウェア開発におけるムダ","updated_at":"2022-06-23T08:22:59Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/10","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}},{"body":"[目の見えない人は世界をどう見ているのか](https://amzn.to/3P9Tl3g)という本を読んだ。その中に目の見える人と目の見えない人が美術館で一緒に作品を鑑賞するソーシャルビューという試みが書いてあった。\r\n\r\nソーシャルビューではまず見える人が作品について語る。その際に重視するのは作品の形や客観的な情報ではなく本人の主観的な感想だ。それを聞いた目の見えない人たちはどう言った作品なのか想像しながら質問したり感想を述べたりする。このインタラクティブなやり取りの中で互いに作品の意図や意味を感じ楽しむ。このような美術鑑賞の試みがソーシャルビューである。\r\n\r\n> 情報化の時代にわざわざ集まってみんなで鑑賞する面白さは、見えないもの、つまり「意味」の部分を共有すること\r\n\r\n作品そのものを見るだけで得られるものはただのデータである。そのデータを受けた鑑賞者がそこにどのような意味を見出すのか。その共有を通じて目の見えない人は作品を脳内で立体的に補完し、さらにその補完した作品を受けてそこに自らの意味を見出していく。こういう営みだ。\r\n\r\n> 作品を鑑賞するとは自分で作品を作り直すこと\r\n\r\n「鑑賞する = 自分で作り直す」という文章に感銘を受けた。\r\n\r\nというのも自分は鑑賞が苦手だからだ。映画やアニメや漫画などあらゆる物語に対してそのストーリーを追うことしかできない。キャラクターに感情移入することもないしストーリーの不自然さに苛立つこともない。だから深読みとか考察みたいなものもできない。登場人物のパラメータの暗記と筋書きを追うことで満足してしまう。\r\n\r\nいわば\"物語\"という食べ物を食べても消化されずに排泄されてしまう感覚に近い。胃で消化されず腸で吸収されず体の一部になるような、そういう摂取の仕方が\"鑑賞\"なのだと思うのだけど、自分の場合は舌で感じた味くらいしか摂取できないわけだ。\r\n\r\n大味なバトル漫画を読んだりするときは心臓がバクバクすることもある。スナック菓子を食べているような感覚。刺激の強い味はどんどん食べたくなるしよく噛まずに早食いになる。物語を異常な速度で雑に食ってると変なアドレナリンが出ちゃうのだと思う。\r\n\r\nこれは老化とか体調が悪いからとかそういうのは関係なくて昔からこんな感じである。むしろそういう自分に自覚的になってきた分まだマシだ。\r\n\r\n鑑賞することは自分で作り直すということであるならば、自分は全く鑑賞が出来ていない。勿体無いなと思う。クリティカルシンキングだとか共感性の問題だとか、色々と理由はあるのかもしれないが浅い人間だな〜と感じてしまう。\r\n\r\nそういえばオードリーのオールナイトニッポンで春日が何十年もジャンプを読み続けているがどの作品も誰々が強いとか弱いみたいな話だけで自分と作品との関係から出てくる感想とか考察みたいなものが一切なくて若林にdisられてたのを聞いてめちゃくちゃ共感と安心感を覚えた。俺だ〜〜〜となった。","active_lock_reason":null,"assignee":null,"assignees":[],"author_association":"OWNER","closed_at":null,"comments":0,"comments_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/12/comments","created_at":"2022-07-08T09:00:11Z","events_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/12/events","html_url":"https://github.com/YuheiNakasaka/gialog-diary/issues/12","id":1298710077,"labels":[],"labels_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/12/labels{/name}","locked":false,"milestone":null,"node_id":"I_kwDOHaM3jc5NaL49","number":12,"performed_via_github_app":null,"reactions":{"+1":0,"-1":0,"confused":0,"eyes":0,"heart":0,"hooray":0,"laugh":0,"rocket":0,"total_count":0,"url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/12/reactions"},"repository_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary","state":"open","state_reason":null,"timeline_url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/12/timeline","title":"鑑賞が出来ない","updated_at":"2022-07-08T09:00:11Z","url":"https://api.github.com/repos/YuheiNakasaka/gialog-diary/issues/12","user":{"avatar_url":"https://avatars.githubusercontent.com/u/1421093?v=4","events_url":"https://api.github.com/users/YuheiNakasaka/events{/privacy}","followers_url":"https://api.github.com/users/YuheiNakasaka/followers","following_url":"https://api.github.com/users/YuheiNakasaka/following{/other_user}","gists_url":"https://api.github.com/users/YuheiNakasaka/gists{/gist_id}","gravatar_id":"","html_url":"https://github.com/YuheiNakasaka","id":1421093,"login":"YuheiNakasaka","node_id":"MDQ6VXNlcjE0MjEwOTM=","organizations_url":"https://api.github.com/users/YuheiNakasaka/orgs","received_events_url":"https://api.github.com/users/YuheiNakasaka/received_events","repos_url":"https://api.github.com/users/YuheiNakasaka/repos","site_admin":false,"starred_url":"https://api.github.com/users/YuheiNakasaka/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/YuheiNakasaka/subscriptions","type":"User","url":"https://api.github.com/users/YuheiNakasaka"}}]},"__N_SSG":true}